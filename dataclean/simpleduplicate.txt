("Account Object\n\nUse the account resource to learn about the current user's Account Engagement instance, such as the address, website URL, and account level. Learn more about accounts in Salesforce Help.\n\nInclude the authentication header with every request. For information on how to authenticate, see Authentication.\n\nResource Name\tOperation\tDescription\nAccount Read\tGET\tRequest information about the Account Engagement instance for the current user.\n\nRequest information about the Account Engagement instance for the current user.\n\nRequest information about the Account Engagement instance for the current user.\n\nTag\tDescription\n<account>\tParent tag. Contains information about the current user's Account Engagement instance. For more information about account fields, see Account.", 2)
("Get Started with Marketing Cloud Engagement APIs and SDKs\n\nUse the APIs to create apps that integrate with Marketing Cloud Engagement, or build custom apps and components on top of Marketing Cloud Engagement.\n\nIf you're new to REST APIs, start with the Marketing Cloud Engagement APIs module on Trailhead.\n\nA package is your starting point for all developer activity. Create packages to connect to the API. You can also extend Marketing Cloud Engagement with packages containing custom apps or custom Journey Builder activities and events. Your organization or business partners build these customizations, or they’re installed from AppExchange.\n\nSee Packages.\n\nMarketing Cloud Engagement offers a REST and SOAP API that share a common authentication mechanism based on OAuth 2. Use these APIs to interact with these features.\n\nTracking\nSubscribers and lists\nPrograms\nTriggered sends\nContent\nContacts\nJourney Builder\nMobile Connect\nMobilePush\nCampaigns\n\nSee Marketing Cloud Engagement APIs.\n\nSDKs provide a cross-functional framework around the REST and SOAP APIs that allow developers to integrate APIs using native language code libraries. We also provide SDKs for iOS and Android to use with MobilePush.\n\nSee Marketing Cloud Engagement SDKs.\n\nMarketing Cloud Engagement includes scripting languages to personalize landing pages, create applications, construct cross-channel templates or layouts, and work with messaging functions.\n\nSee Programmatic Marketing Content.", 2)
('Event Notification Service\n\nUse the Event Notification Service (ENS) API to receive notifications when certain events occur. You can be notified when customers request password resets, get order confirmations, log in using two-factor authentication, and other events.\n\nExample: Northern Trail Outfitters, or NTO, requests that Marketing Cloud Engagement send an online order confirmation email to a customer. The customer’s email address isn’t valid, so the ENS notifies NTO almost immediately that the order confirmation bounced. Using that feedback, NTO’s system sends the customer the order confirmation via SMS instead.', 2)
('Supported Notification Events\n\nThe Event Notification Service supports these notification events:\n\nTransactional Email Events\nEngagement Email Events\nTransactional SMS Events\nAutomation Studio Events', 2)
('Subscription Filters\n\nYour Event Notification Service subscription can filter the notifications that are sent to the associated callback. Filters are expressed as a list of one or more name=value pairs on the subscription.\n\nTo deliver the notification event to the callback, the name-value pairs must all be true.\n\nThe following data items are available for subscription filtering for each transactional send event type.\n\nNotification Event Category\tNotification Event Type\tData Items Available for Filtering\nTransactionalSendEvents\tEmailSent, SMSSent\tdefinitionKey\nTransactionalSendEvents\tEmailNotSent, SMSNotSent\tdefinitionKey, statusCode\nTransactionalSendEvents\tEmailBounced\tdefinitionKey, bounceCode, smtpReason\nSendEvents\tAutomationInstanceStarted\tautomationName, automationCustomerKey, automationType\nSendEvents\tAutomationInstanceCompleted\tautomationName, automationCustomerKey, automationType\nSendEvents\tAutomationInstanceStopped\tautomationName, automationCustomerKey, automationType\nSendEvents\tAutomationInstanceErrored\tautomationName, automationCustomerKey, automationType\nSendEvents\tAutomationInstanceSkipped\tautomationName, automationCustomerKey, automationType\n\nTo filter TransactionalSendEvents.EmailSent events for a specific transactional send definition, include the following subscription filter when you create a subscription.\n\nIf you apply this filter to a subscription for TransactionalSendEvents.EmailSent events, the callback receives TransactionalSendEvents.EmailSent notification events only for the transactional send definition of 12345. All other TransactionalSendEvents.EmailSent notification events are filtered out and not delivered to the callback.', 2)
('GET /hub/v1/approvals-v2/settings\n\nRetrieves the approvals settings based on the current user context.\n\nResult\tReason\tName\tType\tDescription\n200\tResponse includes approvals settings for the current user.\t\t\t\nkey\tstring\tKey for the EnableEmailApprovals setting\t\t\nvalue\tstring\tTrue/false value for the EnableEmailApprovals setting\t\t', 2)
('PATCH /hub/v1/approvals-v2/settings\n\nUpdates the approvals settings with the values provided in the request body. Currently only the EnableEmailApprovals setting can be updated using the API.\n\nName\tType\t\tDescription\nkey\tstring\tRequired\tKey for the EnableEmailApprovals setting\nvalue\tstring\tRequired\tTrue/false value for the EnableEmailApprovals setting\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse includes the approvals settings for current user.\n\xa0\tkey\tstring\tKey for the EnableEmailApprovals setting\n\xa0\tvalue\tstring\tTrue/false value for the EnableEmailApprovals setting\n\xa0\t\xa0\t\xa0\t\xa0\n400_KeyRequired\t\xa0\t\xa0\tKey is a required field.\n\xa0\tmessage\tstring\tKey is a required field.\n\xa0\terrorcode\tstring\tError code for the exception (10002)\n\xa0\t\xa0\t\xa0\t\xa0\n400_ValueRequired\t\xa0\t\xa0\tValue is a required field.\n\xa0\tmessage\tstring\tValue is a required field.\n\xa0\terrorcode\tstring\tError code for the exception (10002)\n\xa0\t\xa0\t\xa0\t\xa0\n400_ValueBoolean\t\xa0\t\xa0\t** Value should be boolean.**\n\xa0\tmessage\tstring\tValue should be boolean.\n\xa0\terrorcode\tstring\tError code for the exception (10002)', 2)
('GET /hub/v1/approvals-v2/{id}/roles\n\nRetrieves a list of roles for a given approval item as well as the users assigned to those roles.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tApproval item ID\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse includes details about the roles, and users assigned to those roles, for an approval item.\n\xa0\tworkflowRoleInstanceId\tstring\tID of workflowRoleInstance record\n\xa0\tworkflowRoleDefinitionId\tstring\tID of WorkflowRoleDefinition record\n\xa0\tRoleId\tstring\tUnique ID of the role\n\xa0\tkey\tstring\tUnique key for the role\n\xa0\tusers\tarray\tList of users for a specific role\n\xa0\tusers.workflowRoleInstanceUserId\tstring\tID of the workflowRoleInstanceUser record\n\xa0\tusers.workflowItemId\tstring\tID of the workflow item\n\xa0\tusers.workflowRoleInstanceId\tstring\tID of the workflowRoleInstance record\n\xa0\tusers.userId\tstring\tID of the user\n\xa0\tusers.userName\tstring\tName of the user\n\xa0\tusers.memberId\tstring\tMember ID (MID)\n\xa0\tusers.enterpriseId\tstring\tEnterprise ID (EID)\n\xa0\tusers.isActive\tstring\tIndicates if user is active', 2)
('GET /asset/v1/content/assets/{id}/file\n\nGets the binary file for an asset.\n\nName\tType\t\tDescription\nid\tnumber\tRequired\tThe ID of the asset\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tA Base64-encoded string of the file\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad request\n\xa0\tMessage\tstring\tThe error message\n\xa0\tErrorCode\tnumber\tThe specific error code\n\xa0\tDocumentation\tstring\tAny specific documentation for the error\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tValidation error\n\xa0\tMessage\tstring\tThe error message\n\xa0\tErrorCode\tnumber\tThe specific error code\n\xa0\tDocumentation\tstring\tAny specific documentation for the error', 2)
('GET /asset/v1/content/assets/{id}/salutations\n\nGets the header and footer for an email.\n\nName\tType\t\tDescription\nid\tnumber\tRequired\tThe ID of the asset\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccessful response\n\xa0\tHTMLHeader\tstring\tThe HTML header\n\xa0\tHTMLFooter\tstring\tThe HTML footer\n\xa0\ttextHeader\tstring\tThe text header\n\xa0\ttextFooter\tstring\tThe text footer\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad Request\n\xa0\tMessage\tstring\tThe error message\n\xa0\tErrorCode\tnumber\tThe specific error code\n\xa0\tDocumentation\tstring\tAny specific documentation for the error', 2)
('GET /asset/v1/content/assets/salutations\n\nGets the default header and footer for an account.\n\nResult\tReason\tName\tType\tDescription\tName\tType\tDescription\n200\tA salutation object\t\t\t\t\t\t\nHTMLHeader\tstring\tThe HTML header\t\t\t\t\t\nHTMLFooter\tstring\tThe HTML footer\t\t\t\t\t\ntextHeader\tstring\tThe text header\t\t\t\t\t\ntextFooter\tstring\tThe text footer\t\t\t\t\t\n400\tBad Request\t\t\t\t\t\t\nMessage\tstring\tThe error message\t\t\t\t\t\nErrorCode\tnumber\tThe specific error code\t\t\t\t\t\nDocumentation\tstring\tAny specific documentation for the error\t\t\t\t\t', 2)
('Use Case Examples for Enhanced Content Search\n\nThe following examples use the fictitious Northern Trail Outfitters company to show you how to use the enhanced content search feature.\n\nFor reference details related to these use cases, see POST /asset/v1/content/assets/query.\n\nNorthern Trail Outfitters (NTO) uses this naming taxonomy for their message campaigns:\n\n[Messaging Channel] [CALL TO ACTION] [Fiscal Year] [Quarter Number] [Month Number] [Week Number]\n\nUsing this taxonomy, NTO has these messages:\n\nNTO received feedback that the coupon codes in their flash sale messages in fiscal year 20, Q3, week 4 messages in August are not working, and they need to replace the code. To find all affected messages, they perform a search that returns all messages, regardless of channel, for that timeframe, based on the name taxonomy. NTO wants a search query that can return these messages:\n\nWith the like operator, NTO finds results with an exact match of a partial string.\n\nNTO received feedback that there is a typo in their email ad message in fiscal year 20, Q3, week 4 message in August, and they want to update the message. To find the affected message, they perform a search that returns only that message. NTO wants a search query than only returns this message:\n\nWith the equals operator, NTO can search to find an exact match for the name of the asset.\n\nA user is looking for an older email that she wants to duplicate as a starting point for a new email. She doesn’t remember what the exact name of the email was, but she knows that it contained these words: flash, sale, happy, new, year.\n\nWith the mustcontain operator, NTO performs a search for assets that contains all words included in the search.\n\nA user resumes work on an email a coworker created in her NTO account last week, but does not remember the email name. She filters all emails so that she only sees emails created by her coworker last week.', 2)
('PATCH /asset/v1/content/assets/{id}/archive\n\nArchive an asset.\n\nArchive an asset to remove it from availability for queries, triggered sends, and journeys, as if the asset were deleted.\n\nTo make the asset available again, use restore.\n\nName\tType\tDescription\nid\tnumber\tRequired. The ID of the asset to archive.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK\n\xa0\tmessage\tstring\tThe resource was successfully archived.\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad request\n\xa0\tMessage\tstring\tThe error message.\n\xa0\tErrorCode\tnumber\tThe specific error code.\n\xa0\tDocumentation\tstring\tAny specific documentation for the error.\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tPermission error\n\xa0\tMessage\tstring\tThe error message.\n\xa0\tErrorCode\tnumber\tThe specific error code.\n\xa0\tDocumentation\tstring\tAny specific documentation for the error.\nAsset Restore\nAsset Simple Query\nAsset Advanced Query', 2)
('PATCH /asset/v1/content/assets/{id}/restore\n\nRestore a previously archived asset.\n\nRestore an asset hidden by a prior Archive, and make it available again for queries, triggered sends, journeys, and other operations. After a restore, an asset behaves as though it had never been archived.\n\nName\tType\tDescription\nid\tnumber\tRequired. The ID of the asset to restore.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK\n\xa0\tMessage\tstring\tThe resource was successfully restored.\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad request\n\xa0\tMessage\tstring\tThe error message.\n\xa0\tErrorCode\tnumber\tThe specific error code.\n\xa0\tDocumentation\tstring\tAny specific documentation for the error.\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tPermission error\n\xa0\tMessage\tstring\tThe error message.\n\xa0\tErrorCode\tnumber\tThe specific error code.\n\xa0\tDocumentation\tstring\tAny specific documentation for the error.\nAsset Archive\nAsset Simple Query\nAsset Advanced Query', 2)
('DELETE /asset/v1/content/assets/{id}\n\nDeletes an asset.\n\nName\tType\t\tDescription\nid\tnumber\tRequired\tThe ID of the asset to delete\nisCDNDelete\tBoolean\t\tPermanently deletes the file and its URL in Akamai when the associated file is deleted in Content Builder. A value of 1 permanently deletes the file. If isCDNDelete is unspecified or if the value is 0, it doesn’t permanently delete the file.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK\n\xa0\tmessage\tstring\tThe resource was successfully deleted.\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad request\n\xa0\tMessage\tstring\tThe error message\n\xa0\tErrorCode\tnumber\tThe specific error code\n\xa0\tDocumentation\tstring\tAny specific documentation for the error\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tPermission error\n\xa0\tMessage\tstring\tThe error message\n\xa0\tErrorCode\tnumber\tThe specific error code\n\xa0\tDocumentation\tstring\tAny specific documentation for the error', 2)
('GET /asset/v1/content/categories/{id}\n\nReturns one Content Builder category by ID.\n\nName\tType\t\tDescription\nid\tnumber\tRequired\tThe ID of the category.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tA single category\n\xa0\tId\tstring\tSystem-assigned ID for the category.\n\xa0\tName\tstring\tName of the category.\n\xa0\tParentId\tnumber\tID of the parent category.\n\xa0\tCategoryType\tstring\tThe type of category, either asset or asset-shared.\n\xa0\tMemberId\tnumber\tID of the member who creates the category.\n\xa0\tEnterpriseId\tnumber\tID of the enterprise this business unit belongs to.\n\xa0\tSharingProperties\tobject\tStores the MIDs of business units this category is shared with and the sharing type. Only included in the response if CategoryType is asset-shared.\n\xa0\tMeta\tobject\tMeta is used much like the data attribute on CMS assets but for internal functionality in Content Builder. If meta is returned, be sure to pass it through the API.\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tUnauthorized\n\xa0\tMessage\tstring\tInsufficient privileges\n\xa0\tErrorCode\tnumber\t20002\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\tNot found\n\xa0\tMessage\tstring\tObject not found\n\xa0\tErrorCode\tnumber\t30003\n\xa0\t\xa0\t\xa0\t\xa0\n500\t\xa0\t\xa0\tInternal server error\n\xa0\tMessage\tstring\tNo message\n\xa0\tErrorCode\tnumber\t10000\n\nExample Request\n\nExample Response', 2)
('DELETE /asset/v1/content/deletedAssets/[AssetID]\n\nDeletes one Content Builder category by ID.\n\nName\tType\t\tDescription\nid\tnumber\tRequired\tThe ID of the category.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK\n\xa0\tmessage\tstring\tThe resource was successfully deleted.\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tUnauthorized\n\xa0\tMessage\tstring\tInsufficient privileges\n\xa0\tErrorCode\tnumber\t20002\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\tNot found\n\xa0\tMessage\tstring\tObject not found\n\xa0\tErrorCode\tnumber\t30003\n\xa0\t\xa0\t\xa0\t\xa0\n500\t\xa0\t\xa0\tInternal server error\n\xa0\tMessage\tstring\tNo message\n\xa0\tErrorCode\tnumber\t10000\n\nExample Request\n\nExample Response', 2)
('GET /asset/v1/content/assets/{id}/channelviews/{viewname}\n\nReturns the requested channel view’s compiled HTML for the asset.\n\nName\tType\t\tDescription\nid\tnumber\tRequired\tThe ID of the asset\nviewName\tstring\tRequired\tThe name of the asset view to retrieve\nthumbnail\tboolean\t\tSet to true to return a base64-encoded thumbnail image\nincludeHeaderFooter\tboolean\t\tIf asset has HTML or text views, set to true to include the message header and footer\nincludeDesignContent\tboolean\t\tSet to true to include design content in the thumbnail image\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccessful response\n\xa0\tcompiled\tstring\tA representation of the view\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tRequest errors\n\xa0\tMessage\tstring\tThe error message\n\xa0\tErrorCode\tnumber\tThe specific error code\n\xa0\tDocumentation\tstring\tAny specific documentation for the error\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tPermissions error\n\xa0\tMessage\tstring\tThe error message\n\xa0\tErrorCode\tnumber\tThe specific error code\n\xa0\tDocumentation\tstring\tAny specific documentation for the error', 2)
('GET /ott/v1/send/{messageId}\n\nRetrieves all the information about an existing OTT send message request.\n\nName\tType\t\tDescription\nmessageId\tstring\tRequired\tId of the send request to be retrieved. Id can be user-defined MessageKey or ottRequestId returned as a response to send message request.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tsuccess\n\xa0\trequestBody\tobject\tReturns the request body.\n\xa0\tstatus\tarray\tStatus of the message send request.\n\xa0\tstatus.event\tstring\tIndicates the type of event with values: Created, Queued, Sent, Error (if any).\n\xa0\tstatus.eventDateTime\tdatetime\tTimestamp indicating when the event occured.\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tForbidden\n\xa0\tmessage\tstring\tError message.\n\xa0\terrorcode\tnumber\tError code.\n\xa0\tdocumentation\tstring\tDocumentation for the error code.\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\tNot Found\n\xa0\tmessage\tstring\tError message.\n\xa0\terrorcode\tnumber\tError code.\n\xa0\tdocumentation\tstring\tDocumentation for the error code.', 2)
('GET /ott/v1/registration/{platform}/{ottPropertyId}\n\nRetrieves information about a registered OTT property by Platform and ID.\n\nName\tType\t\tDescription\nplatform\tstring\tRequired\tOTT Platform Name of the property.\nottPropertyId\tstring\tRequired\tID of the OTT property\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccess\n\xa0\tottPlatformName\tstring\tIndicates the name of the OTT network the resource is being registered with values: line, messenger.\n\xa0\tottPlatformAttributes\tobject\tObject containing OTT platform attributes.\n\xa0\tottPlatformAttributes.applicationId\tstring\tFacebook Application Id.\n\xa0\tottPlatformAttributes.pageId\tstring\tFacebook Page Id.\n\xa0\tottPlatformAttributes.pageName\tstring\tFacebook Page Name.\n\xa0\tottPlatformAttributes.endpointUrl\tstring\tSend API url of the OTT network.\n\xa0\tottPlatformAttributes.isActive\tinteger\tIndicates if the OTT resource is active with values: 0 (Inactive), 1 (Active).\n\xa0\tottPlatformAttributes.channelId\tstring\tLINE channel Id. Required for registering LINE resource.\n\xa0\tottPlatformAttributes.channelName\tstring\tLINE channel name. Required for registering LINE resource.\n\xa0\tottPlatformAttributes.isTransactional\tinteger\tIndicates if LINE channel is Transactional or Reseller with values: 0 (Reseller), 1 (Transactional).\n\xa0\tottPlatformAttributes.isTestChannel\tinteger\tIndicates if LINE channel is a Test channel with values: 0 (Not a test channel), 1 (test channel).\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad Request\n\xa0\tmessage\tstring\tError message.\n\xa0\terrorcode\tnumber\tError code.\n\xa0\tdocumentation\tstring\tDocumentation for the error code.\n\xa0\tvalidationErrors\tarray\tValidation errors in the request payload.\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\tForbidden\n\xa0\tmessage\tstring\tError message.\n\xa0\terrorcode\tnumber\tError code.\n\xa0\tdocumentation\tstring\tDocumentation for the error code.\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\tNot Found\n\xa0\tmessage\tstring\tError message.\n\xa0\terrorcode\tnumber\tError code.\n\xa0\tdocumentation\tstring\tDocumentation for the error code.', 2)
('GET /contacts/v1/schema\n\nRetrieves the collection of all contact data schemas contained in the current account.\n\nExample Request\n\nExample Response', 3)
('PATCH /contacts/v1/attributeSets/{id}\n\nUpdates a collection of attribute value containers or the data rows of a specified attribute set by ID or name.\n\nName\tType\tDescription\nid\tstring\tRequired. The ID of the attribute set expressed in the form of a GUID (UUID). Required if not using key or name.\nname\tstring\tRequired. The name of the attribute set. Prefix the value with name:. Required if not using ID.\nName\tType\tDescription\nitems\tarray\tRequired. An array of values to insert into the attribute set.\nitems.values\tarray\tRequired. Name and value pairs of attributes to insert into the attribute set.\n\nThe call requires at least the ID, Key, or Name value in the request. If you provide more than one of these values, the call processes the first matching value in this order.\n\nID\nKey\nName\n\nThe response contains information about the updated data.', 2)
('POST /contacts/v1/contacts\n\nCreates a new contact with the specified information in the specified attribute groups.\n\nName\tType\t\tDescription\ncontactKey\tstring\t\tPrimary address for the contact. You must provide either a value for contactKey or contactID.\ncontactID\tstring\t\tUnique ID for the contact. You must provide either a value for contactKey or contactID.\nattributeSets\tarray\tRequired\tArray of information used to create a new contact\nattributeSets.name\tstring\tRequired\tName of attribute group to which to add the contact information\nattributeSets.values\tarray\t\tName and value pairs indicating the attribute and applicable value\n\nExample Request\n\nThe request must include at least one of the attribute sets to create a new contact:\n\nEmail Addresses (You must also include this attribute set if you include Email Demographics)\nMobileConnect Demographics (You must include a country code for the Locale value)\nMobilePush Demographics (You must include an ApplicationID value)\nLINE Addresses and LINE Subscriptions (You must also include these attribute sets if you include LINE Demographics)\n\nWhatsApp is not supported.\n\nEach call accepts only one instance of each attribute set.\n\nYou must also include values for contactKey and HTML Enabled.\n\nChange @example.com to a valid domain.\n\nExample Response', 2)
('POST /contacts/v1/addresses/email/search\n\nRetrieves the contact key for one or more email channel addresses.\n\nName\tType\t\tDescription\nchannelAddressList\tarray\tRequired\tList of email channel addresses for which a contact key is requested\nmaximumCount\tinteger\t\tNumber of contact keys associated with an email channel address. The default value is 1.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse contains a list of contact keys with their created date and time.\n\xa0\tchannelAddressResponseEntities\tarray\tList of contact keys with their created date and time\n\xa0\tchannelAddressResponseEntities.contactKey\tstring\tContact key of the email channel address\n\xa0\tchannelAddressResponseEntities.createdDate\tdatetime\tContact key creation date\n\xa0\tchannelAddress\tstring\tRequested email channel address\n\xa0\toperationStatus\tstring\tCurrent operation status\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request\n\xa0\tserviceMessageID\tguid\tService message ID for the response\n\xa0\t\xa0\t\xa0\t\xa0\nEmptyResponse\t\xa0\t\xa0\tEmpty response when the email channel address is not found.\n\xa0\tchannelAddressResponseEntities\tarray\tEmpty array returned when email channel address is not found\n\xa0\tchannelAddress\tstring\tRequested email channel address\n\nExample Request\n\nExample Response', 2)
('POST /contacts/v1/attributeSets/{id}\n\nInserts a collection of attribute value containers or the data rows of a specified attribute set by ID or name.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tThe ID of the attribute set expressed in the form of a GUID (UUID). Required if not using key or name.\nname\tstring\tRequired\tThe name of the attribute set. Prefix the parameter with name:. For example, /attributeSets/name:{name}. Required if not using ID.\nName\tType\t\tDescription\nitems\tarray\tRequired\tArray of values to insert into the attribute set\nitems.values\tarray\tRequired\tName and value pairs of attributes to insert into the attribute set\n\nThe call requires at least the ID, Key, or Name value in the request. If you provide more than one of these values, the call processes the first matching value in the following order:\n\nID\nKey\nName\n\nExample Request by ID\n\nExample Request by Name\n\nExample Response', 2)
('GET /contacts/v1/attributeSets/name:{name}\n\nRetrieves a collection of attribute value containers or the data rows of a specified attribute set by name.\n\nName\tType\tDescription\nname\tstring\tRequired. The name of the attribute set. Precede the value with name:.\n\nThis call populates the ID, Key, and Name values for all items.\n\nThe response contains information about the requested attribute containers.', 2)
('PATCH /contacts/v1/contacts\n\nUpdates contacts with the specified information in the specified attribute groups.\n\nName\tType\t\tDescription\ncontactKey\tstring\tRequired\tPrimary address for the contact. You must provide either a value for contactKey or contactID.\ncontactID\tstring\tRequired\tUnique ID for the contact. You must provide either a value for contactKey or contactID.\nattributeSets\tarray\tRequired\tArray of information used to create a new contact\nattributeSets.name\tstring\tRequired\tName of attribute group to which to add the contact information\nattributeSets.values\tarray\t\tName and value pairs indicating the attribute and applicable value\n\nExample Request\n\nThe provided HTTP verb for this call applies to all sets in the JSON request body.\n\nChange @example.com to a valid domain.\n\nExample Response', 2)
('GET /contacts/v1/schemas/{schemaId}/attributeGroups\n\nRetrieves all attribute groups associated with a specified contact data schema.\n\nName\tType\t\tDescription\nschemaId\tstring\tRequired\tThe ID of the schema\n\nExample Request\n\nExample Response', 2)
('GET /contacts/v1/customObject/{id}/isUsedInContacts\n\nRetrieves information on whether the contact model for an account uses the custom object.\n\nName\tType\t\tDescription\nid\tguid\tRequired\tID of the custom object as GUID value\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tA validation response\n\xa0\tisUsedByContacts\tboolean\tIndicates whether a contact model uses the custom object\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request\n\xa0\tresultMessages\tarray\tArray of returned messages regarding custom objects\n\xa0\tserviceMessageID\tguid\tService message ID for the response\n\nExample Request\n\nExample Response', 2)
('GET /contacts/v1/schemas/{schemaId}/attributeGroups/{id}\n\nRetrieves a specified attribute group (by ID, key, or name) associated with a specified contact data schema.\n\nName\tType\t\tDescription\nschemaId\tstring\tRequired\tThe ID of the schema\nid\tstring\tRequired\tThe ID of the attribute group expressed in the form of a GUID (UUID). Required if not using key or name.\nkey\tstring\tRequired\tKey of the attribute group. Prefix the parameter with key:. For example, /attributeGroups/key:{key}. Required if not using ID or name.\nname\tstring\tRequired\tName of the attribute group. Prefix the parameter with name:. For example, /attributeGroups/name:{name}. Required if not using ID or key.\n\nExample Request by ID\n\nExample Response\n\nExample Request by Key\n\nExample Response\n\nExample Request by Name\n\nExample Response', 2)
('POST /contacts/v1/contacts/actions/delete/configSettings\n\nSets the configuration settings for the Contact Delete framework and components.\n\nName\tType\t\tDescription\nitems\tarray\tRequired\tKey value pairs of configuration settings you are modifying.\nitems.SettingKey\tstring\tRequired\tConfiguration setting key to modify. This key supports only the SuppressionRestoreUntilDays value.\nitems.Value\tstring\tRequired\tValue of the setting to modify. A value of -1 = 0 days. A value of 1 = 1 day.', 2)
("POST /contacts/v1/establish\n\nCreates or returns a contact using the Contact Key and Contact Type provided in the payload.\n\nName\tType\tDescription\ncontactKeys\tarray\tRequired. String array of one or more contact keys.\ncontactType\tnumber\tThe default contact type is Default or 0. Most users do not modify the default value.\nreturnResults\tboolean\tIndicates if the call returns results. The default value is true.\ncorrelateResponseItem\tboolean\tIndicates if the result items' return order matches the request order. The default value is true.\nincludeNewContactAwareness\tboolean\tIndicates that the contact has never been included in the results before. The default value is false.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccessfully Established Contact\n\xa0\titems\tarray\tAn array of contact result objects for the requested contacts to be established.\n\xa0\titems.value\tobject\tThe Contact result returned\n\xa0\titems.value.requestedContactKey\tstring\tThe requested Contact Key\n\xa0\titems.value.isNewContact\tboolean\tReturns if the Contact was newly created. Only is returned when includeNewContactAwareness=true\n\xa0\titems.value.contactReference\tobject\tThe Contact reference returned\n\xa0\titems.value.contactReference.contactID\tlong\tThe established Contact's ID\n\xa0\titems.value.contactReference.contactType\tstring\tThe established Contact's Type\n\xa0\titems.value.contactReference.contactKey\tstring\tThe established Contact's Type\n\xa0\titems.value.contactReference.contactStatus\tstring\tThe established Contact's Status\n\xa0\titems.value.requestItemIndex\tint\tThe Contact reference's index in the Request\n\xa0\titems.value.resultMessages\tarray\tAn array of result messages related to this Contact\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request\n\xa0\tresponseDateTime\tdatetime\tThe time the Response was created\n\xa0\tresultMessages\tarray\tAn array of result messages\n\xa0\tserviceMessageID\tguid\tService message ID for the Response\n\nThis action requires these permissions.\n\nContact Builder, Administer Contact Data Model\nContact Builder, Access", 2)
('POST /contacts/v1/contacts/actions/delete?type=ids\n\nAsynchronously deletes a contact when provided with its contact ID. Use the OperationID value returned to check the status of the deletion.\n\nName\tType\t\tDescription\nValues\tarray\tRequired\tArray of contact ID values to delete\nDeleteOperationType\tstring\tRequired\tType of delete operation to perform. Specify ContactAndAttributes to delete a contact from the entire account as long as no other channel references that contact. AttributesOnly is reserved for future use.\n\nThis request deletes contacts specified by the contact ID values passed in the values array.\n\nThis asynchronous process places the deletion call in a queue for processing. The queue processes only one deletion call at a time, and each process can take several hours to complete.\n\nWhen deleting from a sendable data extension, the call limits each process to one million rows.\n\nThis route deletes contact information from the account, including the Email, MobileConnect, and MobilePush apps. This deletion occurs at the enterprise level.\n\nA successful call suppresses any sends or other activities to the specified contacts for a specified number of days. The contact record still appears in Marketing Cloud Engagement, but you can’t include these suppressed contacts in any activities. After the specified number of days days, the system deletes the contact from all lists and sendable data extensions. You can’t restore any contact information associated with this delete process. Any subscriberID number assigned to the contact can be recycled in the future. For Enterprise accounts, this process deletes all information at the Enterprise level.\n\nTo configure suppression number values, use the Configure Settings for Deleting Contacts resource.', 2)
('GET /contacts/v1/attributeSetDefinitions/{id}\n\nRetrieves all attribute set definitiond in your contact data model.\n\nName\tType\t\tDescription\nid\tstring\t\tThe ID of the attribute set definition expressed in the form of a GUID (UUID). Leave off to retrieve all attribute set definitions in your contact data model.\n\nExample Request\n\nExample Response', 2)
('POST /contacts/v1/contacts/actions/delete?type=keys\n\nAsynchronously deletes a contact when provided with its contact key. Use the OperationID value returned to check the status of the deletion.\n\nName\tType\t\tDescription\nValues\tarray\tRequired\tArray of contact key values to delete\nDeleteOperationType\tstring\tRequired\tType of delete operation to perform. Specify ContactAndAttributes to delete a contact and all its attributes from the entire account and channels. AttributesOnly is reserved for future use.\n\nThis request deletes contacts specified by the contact key values passed in the values array.\n\nThis asynchronous process places the deletion call in a queue for processing. The queue processes only one deletion call at a time, and each process can take several hours to complete.\n\nThis resource deletes contact information from the account, including the Email, MobileConnect, MobilePush, and GroupConnect apps, as well as lists, audiences, journeys, and Einstein analytics. This deletion occurs at the enterprise level.\n\nA successful request suppresses any sends or other activities to the specified contacts for a specified number of days. The contact record still appears in Marketing Cloud Engagement, but you can’t include these suppressed contacts in any activities. After the specified number of days, the system deletes the contact from all lists and sendable data extensions. You can’t restore any contact information associated with this delete process. Any subscriberID number assigned to the contact can be recycled in the future. For Enterprise accounts, this process deletes all information at the Enterprise level.\n\nTo configure suppression number values, use the Configure Settings for Deleting Contacts resource.', 2)
('GET /contacts/v1/contacts/actions/delete/status?operationID=\n\nRetrieves status of contact deletion operation.\n\nName\tType\t\tDescription\noperationID\tinteger\tRequired\tQuery string parameter indicating ID of operation to check status\n\nUse the OperationID value returned by a contact delete call in the query string parameter.\n\nSince the contact delete call has 2 phases, there is a response example for each of the 2 phases.\n\nIn the delete phase, the backgroundOperationStatusID under the backgroundOperationsSummary node provides that status. If you\'re implementing this API, should use the backgroundOperationStatusID to determine whether or not the deletion has been fully processed. The notable values of backgroundOperationStatusID are:\n\nAll other status values should be interpreted as "Processing". Developers often use this status in their API implementation layer.', 2)
('POST /contacts/v1/contacts/actions/restrict?type=keys\n\nRestricts processing for contacts identified by ContactKey values in the request. This operation runs asynchronously. Use the OperationID value returned to check the status of the delete.\n\nName\tType\t\tDescription\nValues\tarray\tRequired\tArray of contact key values to restrict.', 2)
('POST /contacts/v1/operations/delete/{operationID}/retry\n\nRetry failed contact delete operation.\n\nName\tType\t\tDescription\noperationID\tstring\t\tundefined\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tRetry delete operation response.\n\xa0\toperationID\tinteger\tOperation ID for the retried request.\n\xa0\toperationRestarted\tboolean\tIndicates whether the request restarted.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tThe date and time of the retry response is in GMT time.\n\xa0\tresultMessages\tarray\tMessages about the request, like resulttype and resultcode. If the request results in errors, those details are listed here.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\nExample Request\n\nExample Response', 2)
('GET /contacts/v1/contacts/actions/restrict/status?operationID=\n\nRetrieves the status of the contact restrict operation.\n\nName\tType\t\tDescription\noperationID\tGUID\tRequired\tID of the operation you are checking the status of.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tRestrict request response\n\xa0\toperationInitiated\tboolean\tSystem-initiated restrict operation.\n\xa0\toperationID\tinteger\tAuto-generated restrict operation ID. Keep track of this ID because it allows you to check the status of a restriction and decide how to proceed if there is a failure.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tThe datetime restrict response is created in the system in GMT time.\n\xa0\thasErrors\tboolean\tThe requested operation is initiated with an error or not.\n\xa0\tresultMessages\tarray\tArray of messages about the restrict operation.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad restrict request response\n\xa0\toperationInitiated\tboolean\tSystem-initiated restrict operation.\n\xa0\toperationID\tinteger\tAuto-generated restrict operation ID. Keep track of this ID because it allows you to check the status of a restriction and decide how to proceed if there is a failure.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tThe datetime restrict response is created in the system in GMT time.\n\xa0\thasErrors\tboolean\tThe requested operation is initiated with error or not. For a 400 response this is true.\n\xa0\tresultMessages\tarray\tArray of messages about the restrict operation, with details about the bad request, like resulttype and resultcode.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.', 2)
('POST /contacts/v1/contacts/actions/restrict?type=ids\n\nRestricts processing for contacts identified by ContactID values in the request. This operation runs asynchronously. Use the OperationID value returned to check the status of the delete.\n\nName\tType\t\tDescription\nValues\tarray\tRequired\tArray of contact IDs to restrict.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tRestrict request response\n\xa0\toperationInitiated\tboolean\tSystem-initiated restrict operation.\n\xa0\toperationID\tinteger\tAuto-generated restrict operation ID. Keep track of this ID because it allows you to check the status of a restriction and decide how to proceed if there is a failure.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tThe datetime restrict response is created in the system in GMT time.\n\xa0\thasErrors\tboolean\tThe requested operation is initiated with an error or not.\n\xa0\tresultMessages\tarray\tArray of messages about the restrict operation.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad restrict request response\n\xa0\toperationInitiated\tboolean\tSystem-initiated restrict operation.\n\xa0\toperationID\tinteger\tAuto-generated restrict operation ID. Keep track of this ID because it allows you to check the status of a restriction and decide how to proceed if there is a failure.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tThe datetime restrict response is created in the system in GMT time.\n\xa0\thasErrors\tboolean\tThe requested operation is initiated with error or not. For a 400 response this is true.\n\xa0\tresultMessages\tarray\tArray of messages about the restrict operation, with details about the bad request, like resulttype and resultcode.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.', 2)
('POST /contacts/v1/operations/restrict/{operationID}/retry\n\nRetry failed contact restrict operation.\n\nName\tType\t\tDescription\noperationID\tstring\t\tundefined\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tRetry restrict operation response.\n\xa0\toperationID\tinteger\tOperation ID for the retried request.\n\xa0\toperationRestarted\tboolean\tIndicates whether the request restarted.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tThe date and time of the retry response is in GMT time.\n\xa0\tresultMessages\tarray\tMessages about the request, like resulttype and resultcode. If the request results in errors, those details are listed here.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\nExample Request\n\nExample Response', 2)
('POST /interaction/v1/interactions/contactMembership\n\nProvides a list of journeys and journey versions for a list of contact keys.\n\nName\tType\t\tDescription\nContactKeyList\tarray\tRequired\tList of up to 50 contact keys.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\t****\n\xa0\tresults\tobject\tAn object containing contacts found in a journey and contacts not found in a journey.\n\xa0\tcontactMemberships\tarray\tContact membership information.\n\xa0\tcontactMemberships.contactKey\tstring\tContact key that was included in the request.\n\xa0\tcontactMemberships.definitionKey\tstring\tUnique identifier for the journey where the contact was found.\n\xa0\tcontactMemberships.Version\tstring\tVersion number of the journey where the contact was found.\n\xa0\tcontactsNotFound\tarray\tList of contacts not found in any journeys in the account.\n\nTo issue a request, you must have the Journey Builder | General, Journey Builder | Automation, and Interaction Studio | Access permissions.', 2)
('POST /interaction/v1/interactions/contactexit/status\n\nReturns the status of a request to remove a contact from a journey or from one or more versions of a journey.\n\nName\tType\t\tDescription\nContactKey\tstring\tRequired\tID that uniquely identifies a subscriber or contact. Include a single contact or an array of up to 50 contacts.\nDefinitionKey\tstring\tRequired\tCustomer Key that uniquely identifies the journey. This key is the same for all versions of the journey.\nVersions\tarray\t\tOne or more versions of a journey from which to remove a contact.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\t****\n\xa0\tcontactKey\tstring\tContact that needs to be removed from a journey\n\xa0\tdefinitionKey\tstring\tDefinition key of the journey\n\xa0\tstatus\tarray\tArray of statuses of the contact in a given journey\n\xa0\tstatus.version\tstring\tVersion number of the journey\n\xa0\tstatus.message\tstring\tStatus of the request to remove a contact from a specific version of the journey\n\xa0\tstatus.definitionInstanceId\tstring\tUnique Id representing each instance of a contact in a journey', 2)
('POST /interaction/v1/interactions/contactexit\n\nRemoves up to 50 contacts from a journey or from one or more versions of a journey.\n\nName\tType\t\tDescription\nContactKey\tstring\tRequired\tID that uniquely identifies a subscriber or contact. Include a single contact or an array of up to 50 contacts.\nDefinitionKey\tstring\tRequired\tCustomer Key that uniquely identifies the journey. This key is the same for all versions of the journey.\nVersions\tarray\t\tOne or more versions of a journey from which to remove a contact.\nStatus\tName\tType\tDescription\n202\t\xa0\t\xa0\t****\n\xa0\terrors\tarray\tList of errors for request to remove a contact from a journey\n\xa0\tcontactKey\tstring\tContact that needs to be removed from a journey\n\xa0\tdefinitionKey\tstring\tDefinition key of the journey\n\xa0\tstatus\tarray\tArray of statuses of the contact in a given journey\n\xa0\tstatus.version\tstring\tVersion number of the journey\n\xa0\tstatus.message\tstring\tStatus of the request to remove a contact from a specific version of the journey', 2)
('POST /contacts/v1/attributeGroups/population\n\nCreates a population within Contact Builder.\n\n| Name | Type | | Description | | --- | --- | --- | --- | --- | | name |string |Required |Name of the new population |\n\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tPopulation AttributeGroup successfully created\n\xa0\titem\tobject\tThe newly created population item\n\xa0\toperationstatus\tstring\tCurrent operation status\n\xa0\trequestservicemessageid\tguid\tService message ID for the request\n\xa0\tservicemessageid\tguid\tService message ID for the response\n\xa0\t\xa0\t\xa0\t\xa0\ndefault\t\xa0\t\xa0\tUnexpected error\n\xa0\tmessage\tstring\tError message text\n\xa0\terrorCode\tint\tErrorCode ID for the error', 2)
('POST /contacts/v1/contacts/preferences\n\nAdds consent management information to contact records for data protection and privacy concerns. The request can include multiple contact IDs in a single JSON payload. For best performance, use batches of contact ID values whenever possible.\n\nName\tType\t\tDescription\nitems\tarray\tRequired\tArray of contact IDs and other properties to add.\nitems.contactID\tlong\tRequired\tUnique ID for the contact.\nitems.hasOptedOutTracking\tboolean\t\tIndicates whether a contact opted out of tracking information.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tAdded contact preferences.\n\xa0\titems\tarray\tArray of contact IDs and other properties to add.\n\xa0\titems.contactID\tlong\tUnique ID for the contact.\n\xa0\titems.hasOptedOutTracking\tboolean\tIndicates whether a contact opted out of tracking information.\n\xa0\trowsInserted\tinteger\tNumber of preferences inserted.\n\xa0\trowsUpdated\tinteger\tNumber of preferences updated.\n\xa0\trowsDeleted\tinteger\tNumber of preferences deleted.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tDate and time of the retry response in UTC.\n\xa0\tresultMessages\tarray\tArray of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\nTo issue a request, you must have these permissions.\n\nContacts | Read\nContacts | Write\nContacts | Access\nDocuments and Images, Read and Write\nSaved Content, Read and Write', 2)
('POST /contacts/v1/contacts/id:{contactId}/Preferences\n\nAdds consent management information to contact records by contact ID for data protection and privacy concerns.\n\nName\tType\t\tDescription\ncontactId\tstring\tRequired\tUnique ID for the contact.\nName\tType\t\tDescription\nvalue\tobject\tRequired\tArray of contact IDs and other properties to add.\nvalue.contactID\tlong\tRequired\tUnique ID for the contact.\nvalue.hasOptedOutTracking\tboolean\t\tIndicates whether a contact opted out of tracking information.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tAdded contact preferences by contact ID.\n\xa0\tvalue\tobject\tContains the contact ID and other properties to add.\n\xa0\tvalue.contactID\tlong\tUnique ID for the contact.\n\xa0\tvalue.hasOptedOutTracking\tboolean\tIndicates whether a contact opted out of tracking information.\n\xa0\trowsInserted\tinteger\tNumber of preferences inserted.\n\xa0\trowsUpdated\tinteger\tNumber of preferences updated.\n\xa0\trowsDeleted\tinteger\tNumber of preferences deleted.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tDate and time of the retry response in UTC.\n\xa0\tresultMessages\tarray\tArray of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\nTo issue a request, you must have the Assets | Upload and Assets | Publish permissions.\n\nDocuments and Images, Read and Write\nSaved Content, Read and Write', 2)
("GET /contacts/v1/contacts/id:{contactId}/Preferences\n\nRetrieves consent management information from contact records by contact ID for data protection and privacy concerns. GET requests might display values that are reserved for future use and don't perform any actions at this time. Use only the parameters documented here.\n\nName\tType\t\tDescription\ncontactId\tstring\tRequired\tUnique ID for the contact.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tRetrieved contact preferences by contact ID.\n\xa0\tvalue\tobject\tContains the contact ID and other properties to add.\n\xa0\tvalue.contactID\tlong\tUnique ID for the contact.\n\xa0\tvalue.hasOptedOutTracking\tboolean\tIndicates whether a contact opted out of tracking information.\n\xa0\trowsAffected\tinteger\tNumber of rows returned.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tDate and time of the retry response in UTC.\n\xa0\tresultMessages\tarray\tArray of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\nThese permissions are required.\n\nAssets, Upload\nAssets, Publish\nDocuments and Images, Read and Write\nSaved Content, Read and Write", 2)
('POST /contacts/v1/contacts/preferences/search?ReferenceType={ReferenceType}\n\nSearches for consent management information in contact records by reference type. For best performance, use batches of contact ID values whenever possible.\n\nName\tType\t\tDescription\nReferenceType\tinteger\tRequired\tFor contact key, use 1. For contact ID, use 2.\nName\tType\t\tDescription\nitems\tarray\tRequired\tArray of contact IDs or contact keys to search.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSearched contact preferences by reference type.\n\xa0\titems\tarray\tArray of contact IDs and other properties to add.\n\xa0\titems.contactID\tlong\tUnique ID for the contact.\n\xa0\titems.hasOptedOutTracking\tboolean\tIndicates whether a contact opted out of tracking information.\n\xa0\trowsAffected\tinteger\tNumber of rows returned.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tDate and time of the retry response in UTC.\n\xa0\tresultMessages\tarray\tArray of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\nThis action requires these permissions.\n\nAssets, Upload\nAssets, Publish\nDocuments and Images, Read and Write\nSaved Content, Read and Write', 2)
("GET /contacts/v1/contacts/key:{contactKey}/Preferences\n\nRetrieves consent management information from contact records by contact key. GET requests might display values that are reserved for future use and don't perform any actions at this time. Use only the parameters documented here. For best performance, use batches of contact ID values whenever possible.\n\nName\tType\t\tDescription\ncontactKey\tstring\tRequired\tPrimary address for the contact.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tRetrieved contact preferences by contact key.\n\xa0\tvalue\tobject\tContains the contact ID and other properties to add.\n\xa0\tvalue.contactID\tlong\tUnique ID for the contact.\n\xa0\tvalue.hasOptedOutTracking\tboolean\tIndicates whether a contact opted out of tracking information.\n\xa0\trowsAffected\tinteger\tNumber of rows returned.\n\xa0\trequestServiceMessageID\tguid\tService message ID for the request.\n\xa0\tresponseDateTime\tinteger\tDate and time of the retry response in UTC.\n\xa0\tresultMessages\tarray\tArray of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.\n\xa0\tserviceMessageID\tguid\tService message ID for the response.\n\nThese permissions are required.\n\nAssets, Upload\nAssets, Publish\nDocuments and Images, Read and Write\nSaved Content, Read and Write", 2)
("PUT /data/v1/async/dataextensions/{id}/rows\n\nUpsert data into a data extension asynchronously by key or ID. An upsert operation updates rows when the specified key already exists and inserts new rows when the specified key doesn't exist.\n\nName\tType\t\tDescription\nid\tguid\tRequired\tThe unique identifier of the data extension. If you don’t provide an external key, you must provide an ID.\nkey\tstring\tRequired\tThe external customer key of the data extension. If you don’t provide an ID, you must provide a key. Prepend the parameter with key:. For example, /dataextensions/key:{key}/rows\nName\tType\t\tDescription\nitems\tarray\tRequired\tAn array of objects, where each object represents a row of data in the target data extension. Each object is expected to contain name-value pairs matching the column name and value of the target.\nStatus\tName\tType\tDescription\n202\t\xa0\t\xa0\tAccepted\n\xa0\trequestId\tguid\tThe unique identifier of a successfully queued request. Use this ID in subsequent operations to retrieve the status or the results of the operation.\n\nThe request body consists of items, which is an array of JSON objects. Each object is expected to be a name-value pair that corresponds to the columns of the destination data extension. In this example, the data extension must have the fields FirstName, LastName, and ZipCode. Partial payloads are valid if they include all of the required fields.\n\nA successfully queued request returns the RequestId. Use this RequestId in subsequent operations to determine the status of the asynchronous call and overall results of the persist operation.\n\nThis error response shows when the custom object can’t be found before the request gets queued. Any errors that occur during the processing of the request by the business service are recorded with the results and are retrievable using the /data/v1/async/{requestId}/results?includeDetail=true resource.\n\nInsert Data Extension Rows by Key or ID", 2)
("POST /data/v1/async/dataextensions/{id}/rows\n\nInsert data into a data extension asynchronously by key or ID. If you want to update existing rows in a data extension, use the upsert method instead.\n\nName\tType\t\tDescription\nid\tguid\tRequired\tThe unique identifier of the data extension. If you don’t provide an external key, you must provide an ID.\nkey\tstring\tRequired\tThe external customer key of the data extension. If you don’t provide an ID, you must provide a key. Prepend the parameter with key:. For example, /dataextensions/key:{key}/rows\nName\tType\t\tDescription\nitems\tarray\tRequired\tAn array of objects, where each object represents a row of data in the target data extension. Each object is expected to contain name-value pairs matching the column name and value of the target.\nStatus\tName\tType\tDescription\n202\t\xa0\t\xa0\tAccepted\n\xa0\trequestId\tguid\tThe unique identifier of a successfully queued request. Use this ID in subsequent operations to retrieve the status or the results of the operation.\n\nThe request body consists of items, which is an array of JSON objects. Each object is expected to be a name-value pair that corresponds to the columns of the destination data extension. In this example, the data extension must have the fields FirstName, LastName, and ZipCode. Partial payloads are valid if they include all of the required fields.\n\nA successfully queued request returns the RequestId. Use this RequestId in subsequent operations to determine the status of the asynchronous call and overall results of the persist operation.\n\nThis error response shows when the custom object can't be found before the request gets queued. Any errors that occur during the processing of the request by the business service are recorded with the results and are retrievable using the /data/v1/async/{requestId}/results?includeDetail=true resource.\n\nUpsert Data Extension Rows by Key or ID", 2)
("Data Extensions Asynchronous API\n\nUse REST API to create or update data in a data extension asynchronously.\n\nIn an asynchronous call, the API accepts your request and immediately provides a request ID. However, this immediate response doesn’t mean that the operation has completed. Instead, you must issue a separate request to find the status of the operation that you're trying to perform, and then you must issue another request to view the result of that operation.\n\nBefore you can use the asynchronous API, set up your development environment by completing these steps.\n\nInstall a package with an API Integration component.\nUse your Client ID and Secret, obtain an OAuth access token. You use this token to authenticate your calls to the API.\nHTTP Method\tResource\tDescription\nPOST\t/data/v1/async/dataextensions/{id}/rows or /data/v1/async/dataextensions/key:{key}/rows\tInsert data into a data extension by ID or key. ID refers to the unique identifier of the data extension, and key refers to the external key (customer key) of the data extension.\nPUT\t/data/v1/async/dataextensions/{id}/rows or /data/v1/async/dataextensions/key:{key}/rows\tUpsert data into a data extension by ID or key.\nGET\t/data/v1/async/{requestid}/status\tRetrieve the status of an asynchronous request. Use the status to determine if the request is complete and whether there were errors in processing it.\nGET\t/data/v1/async/{requestid}/results\tRetrieve the result of an asynchronous request. The result includes information about the data that was created or updated as a result of the request. It also includes information about errors that occurred while processing it.\nSet Up Your Development Environment for Legacy Packages\nWhen to Use Asynchronous Processing", 2)
("PUT /hub/v1/dataevents/key:{key}/rows/{primaryKeys}\n\nUpserts a data extension row by data extension external key or ID. An upsert operation updates rows when the specified key already exists and inserts new rows when the specified key doesn't exist.\n\nTo upsert multiple data extension rows in a single operation, use the POST method instead.\n\nName\tType\t\tDescription\nkey\tstring\tRequired\tThe data extension external key, which is included in the URL as key:{keyValue}. If you don’t provide an ID, you must provide an external key.\nid\tstring\tRequired\tThe data extension ID, which is included in the URL. If you don’t provide an external key, you must provide an ID.\nprimaryKeys\tarray\t\tThe key-value pair of the primary key for the row.\nName\tType\t\tDescription\nvalues\tobject\t\tThe column name and value dataset for the row that you want to insert into the data extension.\n\nExample Request\n\nOr\n\nExample Response\n\nIf your request is invalid, the API returns a 400 response. This response includes additional details about the error.\n\nUpsert Data Extension Rows by Key or ID", 2)
("Use REST API to create or update data in a data extension synchronously.\n\nIn a synchronous call, the API executes the operation at the time the request is made and then returns the results of the operation.\n\nBefore you can use the asynchronous API, you must set up your development environment by completing these steps.\n\nInstall a package with an API Integration component.\nUse your Client ID and Secret, obtain an OAuth access token. You use this token to authenticate your calls to the API.\nHTTP Method\tResource\tDescription\nPOST\t/hub/v1/dataevents/key:{key}/rowset or /hub/v1/dataevents/{id}/rowset\tUpsert multiple data events in the same call. An upsert operation updates rows when the specified key already exists and inserts new rows when the specified key doesn't exist.\nPUT\t/hub/v1/dataevents/key:{key}/rows/{primaryKeys} or /hub/v1/dataevents/{id}/rows/{primaryKeys}\tUpsert a single data event.\nPUT\t/hub/v1/dataevents/key:{key}/rows/{primaryKeys}/column/{column}/increment or /hub/v1/dataevents/{id}/rows/{primaryKeys}/column/{column}/increment\tIncrement the value in a specified data event column.\nSet Up Your Development Environment for Legacy Packages\nWhen to Use Asynchronous Processing", 2)
('GET /data/v1/async/{requestId}/status\n\nRetrieve the status of a request to insert or upsert rows in a data extension. The response tells you if the request is complete and whether there were errors in processing it.\n\nName\tType\t\tDescription\nrequestId\tstring\tRequired\tThe requestId provided by a previously submitted asynchronous insert or update request.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK\n\xa0\tstatus\tobject\tInformation about the status of the asynchronous request.\n\xa0\tstatus.callDateTime\tdatetime\tThe date and time the asynchronous request was received.\n\xa0\tstatus.completionDateTime\tdatetime\tThe date and time the asynchronous request completed processing.\n\xa0\tstatus.pickupDateTime\tdatetime\tThe date and time the asynchronous request was picked up for processing.\n\xa0\tstatus.hasErrors\tboolean\tIndicates whether the results from processing the request contain any errors.\n\xa0\tstatus.requestStatus\tstring\tThe status of the asynchronous request, such as Pending, Completed, or Error.\n\xa0\tstatus.resultStatus\tstring\tThe status of the request.\n\xa0\tstatus.requestId\tguid\tThe unique identifier of the request to insert or upsert data rows.\n\xa0\trequestId\tguid\tThe unique identifier of the request to retrieve the status of the request.\n\nA successfully queued request returns the RequestId. When the request is no longer pending, use this requestId in subsequent operations to determine the status of the asynchronous call and overall results of the persist operation.\n\nPossible values for requestStatus are:\n\nPending\nComplete\nError\n\nExample Error Response\n\nInsert Data Extension Rows by Key or ID\nUpsert Data Extension Rows by Key or ID\nRetrieve Result of Asynchronous Request', 2)
('PUT /hub/v1/dataevents/key:{key}/rows/{primaryKeys}/column/{column}/increment\n\nIncrement the value in a column by providing the column name and the external key or ID for its row.\n\nName\tType\t\tDescription\nkey\tstring\tRequired\tThe data extension external key, which is included in the URL as key:{keyValue}. If you don’t provide an ID, you must provide an external key.\nid\tstring\tRequired\tThe data extension ID, which is included in the URL. If you don’t provide an external key, you must provide an ID.\nprimaryKeys\tarray\tRequired\tThe key-value pair of the primary key for the row.\ncolumn\tstring\tRequired\tThe name of the column that contains the value you want to increment.\nstep\tinteger\t\tThe amount to increase the value in the specified column. The default value is 1.\n\nExample Request\n\nOr\n\nExample Response\n\nIf your request is invalid, the API returns a 400 response. This response includes additional details about the error.', 2)
("POST /hub/v1/dataevents/key:{key}/rowset\n\nUpserts multiple data extension rows. An upsert operation updates rows if the specified key exists and inserts new rows if the specified key doesn't exist.\n\nThere are limits to the size of the payload that you can include with this request. For more information, see API Limits and Guidelines.\n\nName\tType\tDescription\nkey\tstring\tThe data extension external key, included in URL as key:{keyValue}. If you don’t provide an ID, you must provide an external key.\nid\tstring\tThe data extension ID, included in the URL. If you don’t provide an external key, you must provide an ID.\nkeys\tobject\tThe key-value pair of the primary key for each row.\nvalues\tobject\tThe column name and value for the row that you want to insert into the data extension.\n\nTo use this API, include the external key of the target data extension in the URL path. In the body of the POST request, provide the data that you want to upsert into the data extension. As a best practice, update or insert a maximum of 50 columns and 50 records at a time.\n\nThe response includes information about the data that was upserted into the data extension.\n\nUpsert Data Extension Row by Key or ID", 2)
('GET /data/v1/async/{requestId}/results\n\nRetrieve the results of a request to insert or upsert rows in a data extension. The response includes information about the data that was created or updated as a result of the request. It also includes information about any errors that occurred.\n\nName\tType\t\tDescription\nrequestId\tstring\tRequired\tThe requestId provided by a previously submitted asynchronous insert or update request.\nStatus\tName\tType\tDescription\n202\t\xa0\t\xa0\tAccepted\n\xa0\tpage\tinteger\tThe page number to display. Increment the page number to view additional results.\n\xa0\tpageSize\tinteger\tThe number of data rows to include in the result. The default is 50.\n\xa0\tcount\tinteger\tThe total number of data rows added or modified as a result of the request.\n\xa0\trequestId\tguid\tThe unique identifier of the request to retrieve results.\n\xa0\titems\tarray\tA list of data rows that were added or modified as a result of the request.\n\xa0\titems.errorCode\tstring\tIf the API can’t insert or update a data row, it provides an error code that categorizes the issue in that row.\n\xa0\titems.message\tstring\tIf the API can’t insert or update a data row, it provides a detailed description of the issue in that row.\n\xa0\titems.status\tstring\tThe status of processing the item.\nInsert Data Extension Rows by Key or ID\nUpsert Data Extension Rows by Key or ID\nRetrieve Status of Asynchronous Request', 2)
('POST /platform/v1/ens-callbacks\n\nRegisters a new callback to receive event notifications. You must register and verify your callback before you use it in a subscription.\n\nName\tType\tDescription\ncallbackName\tstring\tRequired. The name of the callback.\nurl\tstring\tRequired. The URL of the customer callback that receives event notifications in the format https://host[/path]. Ports and query string aren’t supported. The URL must be syntactically correct and not already registered as a callback URL.\nmaxBatchSize\tinteger\tThe maximum number of events that this callback can receive in a single call. The default value is 1,000. For the minimum and maximum batch sizes, see API Limits and Guidelines.\n\nYour URL endpoint must be online and reachable before you create a callback. The Event Notification Service immediately attempts to post verification details to the endpoint.\n\nIf your callback doesn’t respond within 30 seconds or returns a non-200 HTTP status, the callback creation fails with a 400 HTTP status. Reason codes for these failures resemble this example.\n\nResponse\tReason\n201 Created\tCallback created. Review example response.\n304 No Change\tCallback already exists on the server.\n400 Bad Request\tUnable to process the request.\n403 Forbidden\tFailed to pass authorization.\n500 Server Error\tInternal error\nVerify Callback', 4)
("GET /platform/v1/ens-callbacks/{callbackId}\n\nRetrieves details about a registered callback.\n\nName\tType\t\tDescription\ncallbackId\tstring\tRequired\tUnique identifier of the callback.\nResponse\tReason\n200 Success\tCallback retrieved. Review example response.\n400 Bad Request\tUnable to process the request.\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tCallback ID doesn't exist.", 2)
('POST /platform/v1/ens-verify\n\nVerifies a callback so that it can receive notifications.\n\nName\tType\t\tDescription\ncallbackId\tstring\tRequired\tUnique identifier of the callback.\nverificationKey\tstring\tRequired\tUnique, single-use verification code for the callback. Supplied during callback creation via an HTTPS POST.\n\nThe Event Notification Service requires a two-step verification process for registering a callback. Two-step verification ensures that the stream of event notifications can’t be used to attack an external URL endpoint. To achieve this security, the URL endpoint must have a critical role in the verification process. Therefore, it’s the only receiver of the single-use verification key needed to complete callback verification.\n\nIn callback verification, a unique, single-use verification key is generated when you create a callback and is sent to the callback URL that you registered using the create callback route. The payload that is posted to the callback URL is the same payload used to call the verify callback route.\n\nThe URL endpoint must do one of the following.\n\nCapture verification details, including the verification key, and immediately return them by calling the verify callback route.\nCapture verification details, including the verification key, in a way that allows a developer to manually call the verify callback route.\n\nIf you choose to allow manual verification, use the following code in your callback implementation to log the verification details.\n\nTo manually verify the callback, use the logged verification details to invoke the verify callback route.\n\nEnsure that your callback completes verification within four hours.\n\nResponse\tReason\n200 OK\tCallback successfully verified\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tIncorrect callback ID, verification key, or both.\n500 Server Error\tInternal error', 3)
("POST /platform/v1/ens-subscriptions\n\nCreates a single subscription. A subscription indicates which event types to receive notifications for and which callback, or webhook, to receive them on. A new subscription can take up to two minutes to become active. You can create a subscription only for a verified callback and up to 200 subscriptions per callback.\n\nName\tType\tDescription\nsubscriptionName\tstring\tRequired. Name of the subscription. This name must be unique.\ncallbackId\tstring\tRequired. Unique identifier of the callback that receives the notification events. This callback must already exist and must be verified.\neventCategoryTypes\tarray\tRequired. Comma-separated list of fully qualified event types for which you’re requesting notifications. Expressed as NotificationEventCategory.NotificationEventType. Review Supported Notification Events for a list of supported event categories and types.\nfilters\tarray\tEach string in the array is a key pair to filter on. Review Subscription Filters for a list of data items available for filtering.\n\nTo create a subscription, send a POST request to the /platform/v1/ens-subscriptions endpoint.\n\nThe subscription you create is in active status, and event notifications are sent to the associated callback. Ensure that the callback you specify is ready to receive events before creating a subscription for it.\n\nThe response contains information about the subscription.\n\nResponse\tReason\n201 Created\tSubscription is created. Review example response.\n304 No Change\tSubscription already exists on the server.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tCallback ID doesn't exist.\n500 Server Error\tInternal error", 3)
("DELETE /platform/v1/ens-callbacks/{callbackId}\n\nDeletes a registered callback that isn't used by any subscriptions. Delete all subscriptions for the callback before deleting the callback.\n\nName\tType\t\tDescription\ncallbackId\tstring\tRequired\tUnique identifier of the callback.\nResponse\tReason\n200 Success\tCallback is deleted.\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tCallback ID doesn’t exist.\n409 Conflict\tSubscriptions exist for the callback. Delete all subscriptions for the callback before deleting the callback.\n500 Server Error\tInternal error", 2)
('GET /platform/v1/ens-callbacks\n\nRetrieves details about all registered callbacks.\n\nResponse\tReason\n200 Success\tCallbacks retrieved. Review example response.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tCallback doesn’t exist\n500 Server Error\tInternal error', 2)
('GET /platform/v1/ens-subscriptions/{subscriptionId}\n\nRetrieves details for a subscription.\n\nName\tType\t\tDescription\nsubscriptionId\tstring\tRequired\tUnique identifier for the subscription.\nResponse\tReason\n200 Success\tCallback subscription is retrieved.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tSubscription ID doesn’t exist.\n500 Server Error\tInternal error', 2)
('PUT /platform/v1/ens-callbacks\n\nUpdates a registered callback. It can take up to two minutes for callback changes to become active.\n\nName\tType\t\tDescription\ncallbackName\tstring\tRequired\tName of the callback.\ncallbackId\tstring\tRequired\tUnique identifier of the callback.\nmaxBatchSize\tinteger\t\tMust be at least 100 and no more than 1,000. Default is 1,000.\nResponse\tReason\n200 OK\tCallback is updated. Review example response.\n201 Created\tCallback is new. Response includes callbackId, callbackName, url, and maxBatchSize.\n304 No Change\tCallback already exists on the server.\n400 Bad Request\tUnable to process the request.\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tCallback ID doesn’t exist for this MID.\n500 Server Error\tInternal error', 2)
('PUT /platform/v1/ens-subscriptions\n\nUpdates a single subscription. To pause an active subscription, set the status request parameter to paused. To unpause a paused subscription, set the status request parameter to active. Always supply a status reason in the request when you update the subscription status. Changes made to a subscription can take up to two minutes to become active.\n\nName\tType\t\tDescription\nsubscriptionId\tstring\tRequired\tUnique identifier for the subscription to update.\neventCategoryTypes\tarray\tRequired\tComma-separated list of fully qualified event types for which you’re requesting notifications. Expressed as NotificationEventCategory.NotificationEventType. Review Supported Notification Events for a list of supported event categories and types.\nfilters\tarray\t\tEach string in the array is a key=value pair to filter on. Review Subscription Filters for a list of data items available for filtering.\nsubscriptionName\tstring\t\tName of the subscription. This name must be unique.\nstatus\tstring\t\tIndicates the status of the callback subscription. Can be set to either active or paused. You can only pause active callback subscriptions. You can only make paused callback subscriptions active.\nstatusReason\tstring\t\tDescribes why you changed the status.\nResponse\tReason\n200 OK\tCallback description updated. Review example response.\n304 No Change\tUpdate already exists on the server.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n500 Server Error\tInternal error', 2)
('PUT /platform/v1/ens-regenerate\n\nRegenerates a signature key for a given callback. Regenerating a signature key deactivates the existing key.\n\nName\tType\tDescription\ncallbackId\tstring\tRequired. A unique identifier for the callback.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tNew signature key generated. Review example response.\n\xa0\tcallbackName\tstring\tName of the callback.\n\xa0\tcallbackId\tstring\tUnique identifier of the callback.\n\xa0\turl\tstring\tHTTPS URL of the customer callback that receives event notifications in the format https://host[/path].\n\xa0\tsignatureKey\tstring\tA symmetric key to authenticate messages.\n\nTo regenerate the signature key, send a PUT request to the /platform/v1/ens-regenerate endpoint.\n\nThe response includes information about the callback.\n\nResponse\tReason\n200 OK\tNew signature key generated. Review example response.\n400 Bad Request\tUnable to process the request.\n401 Unauthorized\tRequest not authorized; missing or incorrect bearer token.\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tCallback ID doesn’t exist for this MID.\n500 Server Error\tInternal error', 2)
('GET /platform/v1/ens-subscriptions-by-cb/{callbackId}\n\nRetrieves details for all subscriptions associated with a callback.\n\nName\tType\t\tDescription\ncallbackId\tstring\tRequired\tUnique identifier of the callback.\nResponse\tReason\n200 Success\tCallback subscriptions retrieved.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tCallback ID doesn’t exist for this MID.\n500 Server Error\tInternal error', 2)
('DELETE /platform/v1/ens-subscriptions/{subscriptionId}\n\nDeletes a subscription.\n\nName\tType\t\tDescription\nsubscriptionId\tstring\tRequired\tUnique identifier for the subscription to delete.\nResponse\tReason\n200 Success\tSubscription deleted.\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tSubscription ID doesn’t exist.\n500 Server Error\tInternal error', 2)
('GET /interaction/v1/rest\n\nRetrieves the discovery document for the collection of journey resources. To call this resource, assign your API Integration the Automation | Interactions | Read scope.\n\nExample Request\n\nThis request retrieves the Journey API discovery document. This document allows developers to quickly identify all methods available for the Journey service.\n\nExample Response\n\nIf successful, the API returns a 200 OK response. If unsuccessful, the API returns a 400 with more details on the error.', 3)
('POST /interaction/v1/interactions\n\nCreates or saves a journey. To create a new journey provide the request body in the appropriate Journey Specification. Please read the Journey Spec page to understand which properties are required to create a journey via the API. The id, key, createdDate, modifiedDate, status and definitionId are assigned by Journey Builder and are never to be passed in as parameters for creating a journey. To call this resource, assign your API Integration the Automation | Interactions | Read scope.\n\nName\tType\t\tDescription\nkey\tstring\tRequired\tThe customer key as a GUID (UUID) to be used while referencing this journey\nname\tstring\tRequired\tThe name of this journey\ndescription\tstring\t\tA description of this journey\nworkflowApiVersion\tnumber\tRequired\tThe Journey Spec version to use for this journey. Possible values: 0.5, 1.0.\ngoals\tarray\t\tThe goal for this particular journey. Expressed as an object of type ContactDecision from the Journey Spec.\ntriggers\tarray\t\tThe trigger for this particular journey. Expressed as an object of type ContactEvent from the Journey Spec.\nactivities\tarray\t\tThe activities which compose this particular journey. Expressed as objects of types supported by the Journey Spec.\n\nExample Request\n\nThis request creates a journey. This example represents the minimum required parameters to create a journey, as prescribed by the Journey Spec. These JSON paramters are always provided by Journey Builder and can never be supplied:\n\nid\nlastPublishedDate\ncreatedDate\nmodifiedDate\ndefinitionId\n\nTo understand how to leverage the full capability of creating journeys via the API, the Journey Spec documentation provides a comprehensive list of all available paramters. This enables you to create multiple combinations of entry events, waits, data-binding, activities and outcomes for a journey.\n\nExample Response', 2)
('POST /interaction/v1/events\n\nFires the entry event that initiates the journey. If you use UTF-8 characters in a payload for the Rest API, change the Content-Type header to: application/json; charset=UTF-8.\n\nName\tType\t\tDescription\nContactKey\tstring\tRequired\tThe ID that uniquely identifies a subscriber or a contact\nEventDefinitionKey\tstring\tRequired\tFind the EventDefinitionKey in Event Administration after the event is created and saved. The EventDefinitionKey is present for both standard and custom events. Don’t include a period in the EventDefinitionKey.\nData\tobject\t\tProperties of the event. Only required if defined in a custom event or by the event.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\t\xa0\n\xa0\teventInstanceId\tGUID formatted string\tThe ID of the entry event. This field name is reserved for system use. If you have a field in your payload with the same name, the data value for it is ignored, and a random GUID is logged to the data extension.', 2)
('GET /interaction/v1/eventDefinitions/{id}\n\nRetrieves an individual event definition by ID or key.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tThe ID of the event definition expressed in the form of a GUID (UUID). Required if not using a key.\nkey\tstring\tRequired\tThe key of the event definition. Required if not using an ID. Prefix the parameter with key:. For example, /eventDefinitions/key:{key}.', 2)
("PUT /interaction/v1/eventDefinitions/{id}\n\nUpdates an event definition by ID or key. Once an event definition is created, only a few properties can be updated. To call this resource, assign your API Integration the Automation | Interactions | Read scope.\n\nName\tType\tDescription\nid\tstring\tRequired. The ID of the event definition expressed in the form of a GUID (UUID). Required if not using a key.\nkey\tstring\tRequired. The key of the event definition. Required if not using ID. Prefix the value with key:.\nStatus\tName\tType\tDescription\nname\tstring\t\tA name for the event.\neventDefinitionKey\tstring\t\tThe unique ID of an event definition. Don't include special characters.\nsourceApplicationExtensionId\tstring\t\tA link to the application extension that defines the configuration screens for this type. Journey Builder uses this ID to filter shared entry sources. For example, for the Event Definition to be visible in the Existing Entry sources panel in the UI, this field needs to be populated. To obtain this value, perform a GET eventDefinition on similar events in Journey Builder.\ndataExtensionId\tstring\t\tThe ID for the data extension associated with the event. Events fired from the API write to this data extension.", 2)
('DELETE /interaction/v1/eventDefinitions/{id}\n\nDeletes an individual event definition by ID or key.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tThe ID of the event definition expressed in the form of a GUID (UUID). Required if not using a key.\nkey\tstring\tRequired\tThe key of the event definition. Required if not using an ID. Prefix the parameter with key:. For example, /eventDefinitions/key:{key}.', 2)
('GET /interaction/v1/eventDefinitions\n\nRetrieves a collection of event definitions that matches the filter criteria.\n\nName\tType\t\tDescription\n$page\tnumber\t\tThe number of pages to retrieve. The default value is 1.\n$pageSize\tnumber\t\tThe number of results to return on a page. The default and maximum is 50.\nname\tstring\t\tFilter results by the name of the event definition\nmode\tboolean\t\tFilter results by event definitions in production (1) or test (2) mode\nmode\tboolean\t\tFilter results by event definitions that are active (1) or inactive (2)\nmode\tboolean\t\tFilter results by event definitions that are visible in the Event Picker when creating a journey (1) or not (2)', 2)
("GET /interaction/v1/interactions/{id}\n\nRetrieves a single journey by ID or key. To call this resource, assign your API Integration the Automation | Interactions | Read scope.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tID of version 1 of the journey in the form of a GUID (UUID). Required if not using a key.\nkey\tstring\tRequired\tThe key of the journey. Required if not using ID. Prefix the parameter with key:. For example, /interactions/key:{key}.\nversionNumber\tnumber\t\tVersion number of the journey to retrieve. If not provided, the latest version is returned.\nextras\tstring\t\tA list of additional data to fetch. Available values are: all, activities, outcomes, and stats. Default is ''.\n\nExample Request\n\nThis request retrieves a single journey object for version 2 of the journey specified by the ID.\n\nExample Response", 2)
('GET /interaction/v1/interactions/{id}/audit/{action}\n\nRetrieves an audit log of a journey and its versions by ID or key. Pass in different actions to see history about creating, modifying, activating, deactivating, stopping, and deleting a journey.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tThe ID or key of the audit log to retrieve. Required if not using a key. The ID returns the audit log for all versions of the journey, unless a versionNumber is provided.\nkey\tstring\tRequired\tThe key of the audit log to retrieve. Required if not using ID. Prefix the parameter with key:. For example, /interactions/key:{key}.\naction\tstring\tRequired\tThe actions used to build your audit log. Specify all to return all actions. Use one of these possible values:\nall\ncreate\nmodify\npublish\nunpublish\ndelete\n\nversionNumber\tinteger\t\tThe version number of the journey audit log to retrieve\n\nExample Request\n\nExample Response The response includes a log containing these elements:\n\nPage count\nPage size\nCount of all actions passed in\nAn item object The item object includes specific information depending on the action passed in. All item objects include these elements for all actions:\nCustomer key\nJourney ID (or key), name, and description\nOriginal definition ID\nDate and time of the action\nName and id of user who performed the action', 2)
('POST /interaction/v1/interactions/stop/{definitionId}?versionNumber={versionNumber}\n\nStops a running journey. To call this resource, assign your API Integration the Automation | Interactions | Read scope.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tThe ID of the journey to stop, expressed in the form of a GUID (UUID).\nversionNumber\tinteger\tRequired\tThe version number of the journey to stop\n\nThis request stops the journey specified by the ID request parameter. Only the versionNumber specified in the versionNumber QUERY Parameter is stopped. A complete request requires you to provide a valid versionNumber.', 2)
("DELETE /interaction/v1/interactions/{id}\n\nDeletes a journey by ID or key. When deleting last version of a journey, check if the journey is associated with a tag and unassociated the tag using the deleteTags resource.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tThe ID of the journey to delete expressed in the form of a GUID (UUID). Required if not using a key. The ID deletes all versions of the journey, unless a versionNumber is provided.\nkey\tstring\tRequired\tThe key of the journey. Required if not using ID. Prefix the parameter with key:. For example, /interactions/key:{key}.\nversionNumber\tinteger\t\tVersion number of the journey to delete. If no version is specified, ALL versions associated with the provided ID will be deleted.\n\nExample Request\n\nThe following request will delete the journey specified with the ID request parameter. If you don't provide the versionNumber parameter, then ALL versions of the identified journey will be deleted. YOU CANNOT RECOVER THIS DATA.\n\nExample Response\n\nExample Error Response", 2)
("POST /interaction/v1/interactions/pause/key:{definitionKey}?versionNumber={versionNumber}\n\nPauses the running journey that matches the specified definitionKey.\n\nName\tType\t\tDescription\ndefinitionKey\tstring\tRequired\tThe definition key of the journey to be paused. Also known as the customer key of the journey.\nversionNumber\tinteger\tRequired\tThe version number of the journey to be paused. This parameter is optional only when the allVersions parameter is true.\nallVersions\tinteger\t\tIndicates whether to pause all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.\nName\tType\t\tDescription\nExtendWaitEndDates\tboolean\t\tIndicates whether to extend waits for all Wait by Duration activities while the journey is paused. This parameter applies only to Wait By Duration wait types. If the value is true, the wait end date is extended by the pause period. If the value is false, the wait end date isn't extended. If you don't use this parameter, the default value is false.\nPausedDays\tinteger\t\tNumber of days to pause the journey. Default is 14 days.\nGuardrailAction\tstring\t\tIndicates whether to resume or stop the journey after the pause duration (PausedDays). Allowed values are Stop and Resume. If you don't use this parameter, the default value is false.\nRetainContactInjectionWhileJourneyPaused\tboolean\t\tIndicates how new contact injections are treated (for entry sources that support this option) while the journey is paused. Choose whether to ignore new contacts (false) or to queue and process them when the journey resumes (true). If you don't use this parameter, the default value is false.\nid\tstring\t\tID of the journey to be paused.\nVersion\tstring\t\tVersion of the journey to be paused.", 2)
("GET /interaction/v1/interactions/publishStatus/{statusId}\n\nChecks the status of a publication.\n\nName\tType\tDescription\nstatusId\tstring\tRequired. The statusId provided by a successful POST request to schedule for a specific version of a journey.\n\nThis request retrieves the publishing status for the specified statusId provided while making a publishAsync request.\n\nJourney Builder returns one of these statuses.\n\nPublishInProcess\nPublishCompleted\nError\n\nIf any errors are encountered during the publishing process, they're listed as elements in the errors array.", 2)
("POST /interaction/v1/interactions/pause/{definitionID}?versionNumber={versionNumber}\n\nPauses the running journey that matches the specified definitionID.\n\nName\tType\t\tDescription\ndefinitionID\tstring\tRequired\tThe ID of the journey to be paused, expressed in the form of a GUID (UUID).\nversionNumber\tinteger\tRequired\tThe version number of the journey to be paused. This parameter is optional only when the allVersions parameter is true.\nallVersions\tboolean\t\tIndicates whether to pause all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.\nName\tType\t\tDescription\nExtendWaitEndDates\tboolean\t\tIndicates whether to extend waits for all Wait by Duration activities while the journey is paused. This parameter applies only to Wait By Duration wait types. If the value is true, the wait end date is extended by the pause period. If the value is false, the wait end date isn't extended. If you don't use this parameter, the default value is false.\nPausedDays\tinteger\t\tNumber of days to pause the journey. Default is 14 days.\nGuardrailAction\tstring\t\tIndicates whether to resume or stop the journey after the pause duration (PausedDays). Allowed values are Stop and Resume. If you don't use this parameter, the default value is false.\nRetainContactInjectionWhileJourneyPaused\tboolean\t\tIndicates how new contact injections are treated (for entry sources that support this option) while the journey is paused. Choose whether to ignore new contacts (false) or to queue and process them when the journey resumes (true). If you don't use this parameter, the default value is false.\nid\tstring\t\tID of the journey to be paused.\nVersion\tstring\t\tVersion of the journey to be paused.", 2)
("POST /interaction/v1/interactions/resume/key:{definitionKey}?versionNumber={versionNumber}\n\nResumes the paused journey that matches the specified definitionKey.\n\nName\tType\t\tDescription\ndefinitionID\tstring\tRequired\tThe ID of the journey to be resumed, expressed in the form of a GUID (UUID).\nversionNumber\tinteger\tRequired\tThe version number of the journey to be resumed. This parameter is optional only when the allVersions parameter is true.\nallVersions\tinteger\t\tIndicates whether to resume all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.", 2)
("POST /interaction/v1/interactions/resume/{definitionID}?versionNumber={versionNumber}\n\nResumes the paused journey that matches the specified definitionID.\n\nName\tType\t\tDescription\ndefinitionID\tstring\tRequired\tThe ID of the journey to be resumed, expressed in the form of a GUID (UUID).\nversionNumber\tinteger\tRequired\tThe version number of the journey to be resumed. This parameter is optional only when the allVersions parameter is true.\nallVersions\tinteger\t\tIndicates whether to resume all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.", 2)
('POST /interaction/v1/interactions/publishAsync/{id}?versionNumber={versionNumber}\n\nPublishes a journey version asynchronously. To call this resource, assign your API Integration the Automation | Interactions | Read scope.\n\nName\tType\t\tDescription\nid\tstring\tRequired\tThe ID of the journey to publish expressed in the form of a GUID (UUID).\nversionNumber\tinteger\tRequired\tVersion number of the journey to publish\n\nExample Request\n\nThis request asynchronously publishes the journey specified by the ID request parameter. Only the versionNumber specified in the versionNumber QUERY Parameter will be published. You must provide a valid versionNumber.\n\nExample Response\n\nExample Error Response', 2)
('Post /interaction/v1/interactions/contactexit\n\nRemoves up to 50 contacts from a journey or from one or more versions of a journey.\n\nName\tType\t\tDescription\nContactKey\tstring\tRequired\tID that uniquely identifies a subscriber or contact. Include a single contact or an array of up to 50 contacts.\nDefinitionKey\tstring\tRequired\tCustomer Key that uniquely identifies the journey. This key is the same for all versions of the journey.\nVersions\tarray\t\tOne or more versions of a journey from which to remove a contact.\nStatus\tName\tType\tDescription\n202\t\xa0\t\xa0\t****\n\xa0\terrors\tarray\tList of errors for request to remove a contact from a journey\n\xa0\tcontactKey\tstring\tContact that needs to be removed from a journey\n\xa0\tdefinitionKey\tstring\tDefinition key of the journey\n\xa0\tstatus\tarray\tArray of statuses of the contact in a given journey\n\xa0\tstatus.version\tstring\tVersion number of the journey\n\xa0\tstatus.message\tstring\tStatus of the request to remove a contact from a specific version of the journey', 2)
('Post /interaction/v1/interactions/contactexit/status\n\nReturns the status of a request to remove a contact from a journey or from one or more versions of a journey.\n\nName\tType\t\tDescription\nContactKey\tstring\tRequired\tID that uniquely identifies a subscriber or contact. Include a single contact or an array of up to 50 contacts.\nDefinitionKey\tstring\tRequired\tCustomer Key that uniquely identifies the journey. This key is the same for all versions of the journey.\nVersions\tarray\t\tOne or more versions of a journey from which to remove a contact.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\t****\n\xa0\tcontactKey\tstring\tContact that needs to be removed from a journey\n\xa0\tdefinitionKey\tstring\tDefinition key of the journey\n\xa0\tstatus\tarray\tArray of statuses of the contact in a given journey\n\xa0\tstatus.version\tstring\tVersion number of the journey\n\xa0\tstatus.message\tstring\tStatus of the request to remove a contact from a specific version of the journey\n\xa0\tstatus.definitionInstanceId\tstring\tUnique Id representing each instance of a contact in a journey', 2)
('GET /messaging/v1/messageDefinitionSends/key:{key}/deliveryRecords\n\nGets the delivery details of an email sent using the MessageDefinitionSends.\n\nName\tType\t\tDescription\nObjectID\tGUID\tRequired\tThe ID of the entry event send definition, included in URL as id:your ID value here or just the ID. Either this or the external key is required.\nkey\tstring\tRequired\tExternal key of the entry event send definition. Either this or the ObjectID is required.\nRecipientSendId\tGUID\tRequired\tThe RecipientSendId value returned from the /messageDefinitionSends send service, which is the unique identifier for a single email send.\n\nExample Request Using Send ID\n\nExample Request Using Send ID\n\nExample Response\n\nExample Queued Response\n\nExample Error Response', 2)
('GET /interaction/v1/interaction/journeyhistory/freshness\n\nRetrieves an estimated amount of time the backend pipelines are running behind. Journey History events after this time aren’t guaranteed to be available.\n\nExample Request\n\nExample Response\n\nThe response includes the amount of time (in seconds) processing pipelines are behind.\n\nFor example, this API returned 20 minutes. If a contact entered a journey 30 minutes ago and exited 10 minutes ago, only a partial history can be retrieved. Entry events and a few initial activities will be available through Journey History API, while the last activities and exit events won’t.', 2)
("POST /hub/v1/nestedtags\n\nCreates a tag that can be associated with any object that accepts tagging. The tag must contain a unique name. The tag can contain a description and a list of one or more nested tags.\n\nName\tType\tDescription\nname\tstring\tRequired. Name of the tag, up to 120 characters. The only special characters allowed are period (.) and apostrophe (').\ndescription\tstring\tDescription of the tag, up to 256 characters. The only special characters allowed are period (.), apostrophe ('), comma (,), and forward slash (/).\nparentId\tstring\tTagId that you want to be the parent of this tag. If you don’t provide a parentId, or if you specify zero as the parentId, the tag is created as a root tag with no parent.\ntags\tstring\tA list of tags to create as nested tags. To include no nested tags, omit this field. You can add and modify nested tags using the Update Nested Tags or Patch Nested Tags requests.\nStatus\tName\tType\tDescription\n201\t\xa0\t\xa0\tResponse includes the newly created tag and all of its properties, including nested tags at the level specified by the depth parameter.\n\xa0\tid\tinteger\tTagId of the tag.\n\xa0\tname\tstring\tName of the tag.\n\xa0\tdescription\tstring\tDescription of the tag.\n\xa0\tparentId\tstring\tTagId of the parent tag. This field is null or zero if no parent tag exists.\n\xa0\ttags\tobject\tA list of the tag’s nested tags. Add and modify nested tags using the Update Nested Tags or Patch Nested Tags requests.\n\nThis example creates a tag using only a name.\n\nThe response includes information about the tag.\n\nThis example creates a parent tag with nested tags.\n\nThe response includes information about the primary tag and the nested tags.\n\nThis example adds a new nested tag under an existing tag.\n\nThe response includes information about the nested tag.", 3)
('GET /hub/v1/nestedtags\n\nReturns an array of tags owned by the requesting client.\n\nName\tType\t\tDescription\ndepth\tnumber\t\tThe number of nesting levels to retrieve. The default depth is 0.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse includes an array of tags owned by the client, including each tag’s properties and nested tags at the level specified by the depth parameter.\n\xa0\tid\tinteger\tTagId of the tag.\n\xa0\tname\tstring\tName of the tag.\n\xa0\tdescription\tstring\tDescription of the tag.\n\xa0\tparentId\tstring\tTagId of the parent tag. This field is null or zero if no parent tag exists.\n\xa0\ttags\tobject\tA list of the tag’s nested tags. Add and modify nested tags using the Update Nested Tags or Patch Nested Tags requests.\n\nThis example gets a collection of all root tags but none of their nested tags.\n\nThis example gets a collection of all tags and includes their nested tags one level deep.', 2)
('GET /hub/v1/nestedtags/{tagId}\n\nReturns the tag associated with the specified tagId.\n\nName\tType\t\tDescription\ndepth\tnumber\t\tThe number of nesting levels to retrieve. The default depth is 0.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse includes the specified tag and all of its properties, including nested tags at the level specified by the depth parameter.\n\xa0\tid\tinteger\tTagId of the tag.\n\xa0\tname\tstring\tName of the tag.\n\xa0\tdescription\tstring\tDescription of the tag.\n\xa0\tparentId\tstring\tTagId of the parent tag. This field is null or zero if no parent tag exists.\n\xa0\ttags\tobject\tA list of the tag’s nested tags. Add and modify nested tags using the Update Nested Tags or Patch Nested Tags requests.\n\nThis example gets a tag by ID.\n\nThis example gets a tag by ID and includes its nested tags one level deep.', 2)
("PATCH /hub/v1/nestedtags/{tagId}\n\nUpdates an existing tag. Provide only the tag fields to be changed.\n\nName\tType\t\tDescription\ntagId\tnumber\tRequired\tID of the tag to patch.\nName\tType\t\tDescription\nid\tnumber\tRequired\tTagId of the tag to update.\nname\tstring\t\tName of the tag, up to 120 characters. The only special characters allowed are period (.) and apostrophe (').\ndescription\tstring\t\tDescription of the tag, up to 256 characters. The only special characters allowed are period (.), apostrophe ('), comma (,), and forward slash (/). If you don’t provide a description, the existing description is not changed.\nparentId\tnumber\t\tTagId that you want to be the parent of this tag. If you don’t provide a parentId, the parentId is not changed.\ntags\tobject\t\tA list of tags to create as nested tags. If you don’t provide a list of tags, the existing nested tags are not changed.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse includes the updated tag and all of its properties, including nested tags at the level specified by the depth parameter.\n\xa0\tid\tinteger\tTagId of the tag.\n\xa0\tname\tstring\tName of the tag.\n\xa0\tdescription\tstring\tDescription of the tag.\n\xa0\tparentId\tstring\tTagId of the parent tag. This field is null or zero if no parent tag exists.\n\xa0\ttags\tobject\tA list of the tag’s nested tags.\n\nThis example patches a nested tag to update its description field.\n\nThis example changes a nested tag into a root tag with no parent.", 2)
("PUT /hub/v1/nestedtags/{tagId}\n\nUpdates an existing tag. You must provide the entire tag payload because this request modifies the entire tag. To provide only the fields to modify, use the Patch Nested Tags request instead.\n\nName\tType\t\tDescription\ntagId\tnumber\tRequired\tID of the tag to update.\nName\tType\t\tDescription\nid\tnumber\tRequired\tTagId of the tag to update.\nname\tstring\tRequired\tName of the tag, up to 120 characters. The only special characters allowed are period (.) and apostrophe (').\ndescription\tstring\t\tDescription of the tag, up to 256 characters. The only special characters allowed are period (.), apostrophe ('), comma (,), and forward slash (/). If you don’t provide a description, any existing description is erased.\nparentId\tnumber\t\tTagId that you want to be the parent of this tag. If you don’t provide a parentId, the parentId (if non-zero) is replaced by zero, meaning no parent tag.\ntags\tobject\t\tA list of tags to create as nested tags. If you don’t provide a list of tags, any existing tags are removed.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse includes the updated tag and all of its properties, including nested tags at the level specified by the depth parameter.\n\xa0\tid\tinteger\tTagId of the tag.\n\xa0\tname\tstring\tName of the tag.\n\xa0\tdescription\tstring\tDescription of the tag.\n\xa0\tparentId\tstring\tTagId of the parent tag. This field is null or zero if no parent tag exists.\n\xa0\ttags\tobject\tA list of the tag’s nested tags.\n\nThis example renames descriptions of all tags nested under a parent tag ID.", 2)
('POST /hub/v1/objects/{objectTypeName}/tags/\n\nAdd tags to objects to help identify and categorize them. An object can have multiple tags, and a tag can be associated with multiple objects. This resource creates an association for each tag-object pair. For example, if the payload includes 10 tags and 20 object IDs, the API call creates 200 associations.\n\nName\tType\tDescription\nobjectTypeName\tstring\tRequired. Designates the type of object to assign tags to. Possible values include:\ncampaign - adds tags to a campaign\nInteractionStudio.DefinitionInfo - adds tags to a journey\nmedia - adds tags to a media asset\nName\tType\tDescription\nObjectIds\tstring\tRequired. The ObjectIds are the unique IDs for the objects. Each ObjectId is associated with each tag specified in the payload. For Journey Builder, the ObjectIds are the are the OriginalDefinitionId of the journeys.\nTagNames\tstring\tRequired. Name of the tag to delete. If a tag name is specified that does not exist, the tag will be created. Tag names for journeys are limited to 128 characters.\n\nThis example adds tags to two objects.\n\nTag your Journeys', 2)
('DELETE /hub/v1/nestedtags/{tagId}\n\nDeletes an existing tag and all of its nested tags.\n\nName\tType\t\tDescription\ntagId\tnumber\tRequired\tID of the tag to delete.', 2)
('POST /hub/v1/objects/{objectTypeName}/tags/delete\n\nUse this resource to delete multiple tag associations at one time.\n\nName\tType\t\tDescription\nobjectTypeName\tstring\tRequired\tDesignates the type of object to delete tags from. Possible values include:\ncampaign - deletes tags from a campaign\nInteractionStudio.DefinitionInfo - deletes tags from a journey\nmedia - deletes tags from a media asset\nName\tType\t\tDescription\nObjectIds\tstring\tRequired\tThe ObjectIds are the unique IDs for the objects. Each tag is deleted from the ObjectId specified in the payload. For Journey Builder, the ObjectIds are the are the OriginalDefinitionId of the journeys.\nTagNames\tstring\tRequired\tName of the tag to delete. For each tag/object pair, the association is deleted only if the association exists. If a tag name is specified that does not exist, it is ignored.\n\nExample Request\n\nTag your Journeys', 2)
('GET /platform/v1/tokenContext\n\nReturns information about the authenticated token.\n\nExample Request\n\nExample Response', 2)
('GET /platform/v1/endpoints/{endpointType}\n\nGets endpoint data.\n\nName\tType\t\tDescription\nendpointType\tenum\tRequired\tValue of endpointType. Valid endpoints are ftp, soap, and rest.\n\nExample Request\n\nExample Response\n\nError Response', 2)
('GET /platform/v1/key\n\nRetrieves metadata for all keys that belong to a given MID. Data at Rest Encryption is a prerequisite for this feature.\n\nName\tType\t\tDescription\nx-request-id\tstring\t\tHeader parameter: Request ID for the request. Default Format: 11ee9b17-5734-4948-98d3-cb4b64e0171c\nx-mccs-user-context\tstring\t\tHeader parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.\nx-mccs-keystore-provider\tstring\t\tHeader parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.\nx-mccs-mac\tstring\t\tHeader parameter: Specify message authentication code for the request.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccessfully retrieved meta data for all keys for the current account\n\xa0\tkey\tstring\tkey Data\n\xa0\tvalue\tinteger\tFormat: int32.\n\xa0\t\xa0\t\xa0\t\xa0\n500\t\xa0\t\xa0\tUnable to process the request\n\xa0\tstatusCode\tinteger\tFormat: int32.\n\xa0\trequestId\tstring\tundefined\n\xa0\tmessage\tstring\tundefined\n\xa0\tmessageCode\tstring\tundefined\n\xa0\t\xa0\t\xa0\t\xa0\n503\t\xa0\t\xa0\tDatabase unavailable\n\xa0\tstatusCode\tinteger\tFormat: int32.\n\xa0\trequestId\tstring\tundefined\n\xa0\tmessage\tstring\tundefined\n\xa0\tmessageCode\tstring\tundefined\n\nExample Request\n\nExample Response', 2)
('GET /platform/v1/key/type\n\nRetrieves supported key algorithms and appropriate key lengths. Data at Rest Encryption is a prerequisite for this feature.\n\nName\tType\t\tDescription\nx-request-id\tstring\t\tHeader parameter: Request ID for the request. Default Format: d0b531e1-9e61-43e4-bf1b-4b8dc49a16c2\nx-mccs-user-context\tstring\t\tHeader parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.\nx-mccs-keystore-provider\tstring\t\tHeader parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.\nx-mccs-mac\tstring\t\tHeader parameter: Specify the message authentication code for the request.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccessfully retrieved LOVs\n\xa0\tkey\tstring\tkey Data\n\xa0\tvalue\tinteger\tFormat: int32.\n\xa0\t\xa0\t\xa0\t\xa0\n500\t\xa0\t\xa0\tUnable to process request\n\xa0\tstatusCode\tinteger\tFormat: int32.\n\xa0\trequestId\tstring\tundefined\n\xa0\tmessage\tstring\tundefined\n\xa0\tmessageCode\tstring\tundefined\n\nExample Request\n\nExample Response', 2)
("GET /platform/v1/wrappingKey\n\nRetrieve and create a RSA 4096 wrapping key. This feature isn't enabled by default. Contact your Account Executive for more information about enabling this feature. Data at Rest Encryption must be enabled in your account in order to use this feature.\n\nName\tType\tDescription\nx-request-id\tstring\tRequest ID for the request. Default Format: c39516e2-55e0-426d-8717-b2efed6d9841.\nx-mccs-user-context\tstring\tIndicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.\nx-mccs-keystore-provider\tstring\tA key store provider to use for an ImportKey or WrappingKey request, such as kms, keysecure, database. The default value is keysecure.\nx-mccs-mac\tstring\tThe message authentication code for the request.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccessfully retrieved public wrapping key bytes\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tInvalid keystore provider name in the request header\n\xa0\ttype\tstring\tundefined\n\xa0\ttitle\tstring\tundefined\n\xa0\tstatus\tinteger\tFormat: int32.\n\xa0\tdetail\tstring\tundefined\n\xa0\tinstance\tstring\tundefined\n\xa0\tadditionalProperties\tobject\tundefined\n\xa0\t\xa0\t\xa0\t\xa0\n500\t\xa0\t\xa0\tUnable to process request\n\xa0\tstatusCode\tinteger\tFormat: int32.\n\xa0\trequestId\tstring\tundefined\n\xa0\tmessage\tstring\tundefined\n\xa0\tmessageCode\tstring\tundefined\n\nTo use this action, issue a GET request to the /platform/v1/wrappingKey endpoint.\n\nThe response includes the wrapping key.", 2)
('GET /platform/v1/key/{keyId}\n\nFetches metadata for a specific key. Data at Rest Encryption is a prerequisite for this feature.\n\nName\tType\t\tDescription\nkeyId\tstring\tRequired\tID for the key to retrieve the metadata for.\nx-request-id\tstring\t\tHeader parameter: Request ID for the request. Default Format: 06ef8c36-4a7a-4139-bdbd-c6715be06364.\nx-mccs-user-context\tstring\t\tHeader parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.\nx-mccs-keystore-provider\tstring\t\tHeader parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.\nx-mccs-mac\tstring\t\tHeader parameter: Specify the message authentication code for the request.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tKey metadata successfully retrieved\n\xa0\tkeyName\tstring\tundefined\n\xa0\tkeyId\tstring\tformat: uuid\n\xa0\tkeyVersion\tinteger\tFormat: int32.\n\xa0\tkeyType\tstring\tundefined\n\xa0\teid\tinteger\tformat: int64\n\xa0\tmid\tinteger\tformat: int64\n\xa0\tkeySize\tinteger\tFormat: int32.\n\xa0\tkeyState\tstring\tundefined\n\xa0\tsecurityHash\tstring\tformat: byte\n\xa0\tkeySignature\tstring\tundefined\n\xa0\tkeyStorageRepository\tstring\tundefined\n\xa0\tcreatedDate\tstring\tformat: date-time\n\xa0\tcreatedBy\tinteger\tFormat: int32.\n\xa0\tmodifiedDate\tstring\tformat: date-time\n\xa0\tmodifiedBy\tinteger\tFormat: int32.\n\xa0\tkeyData\tstring\tundefined\n\xa0\tpublicKeyData\tstring\tundefined\n\xa0\tinitializationVector\tstring\tundefined\n\xa0\tkeyDataWrappingKey\tstring\tundefined\n\xa0\tisKeyDataWrapped\tboolean\tundefined\n\xa0\texportable\tboolean\tundefined\n\xa0\timported\tboolean\tundefined\n\xa0\tkeyProviderIdentifier\tstring\tundefined\n\xa0\tuseCase\tstring\tundefined\n\xa0\tkeyOwnerId\tinteger\tFormat: int32.\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tBad request, please see error details\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\tGiven Key Id is not found in metadata table (MemberKeyManagement)\n\xa0\t\xa0\t\xa0\t\xa0\n500\t\xa0\t\xa0\tServer error, unable to retrieve key metadata. Validate error logs in splunk\n\nExample Request\n\nExample Response', 2)
("GET /push/v1/location\n\nGets a list of all locations.\n\nName\tType\t\tDescription\n$page\tnumber\t\tPage number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter.\n$pagesize\tnumber\t\tNumber of results per page to return. Typically provided along with the $page parameter.\n$filter\tstring\t\tFilter by a location's property using a simple operator and value. Valid filter properties are Name and LocationType of 1 = Geofence or 3 = Beacon.\n$orderBy\tstring\t\tDetermines which property to use for sorting, and also determines the direction in which to sort the data.\n\nThe sort syntax is the location property name followed by the order direction, either asc or desc, with a space in between. Sort by multiple property names by separating each sequence with a comma. Valid sort properties are:\n\nlocationType\nname\ngeofenceId\ncreatedDate\nmodifiedDate\n\nThis example sorts by name in descending order: /push/v1/message?$orderBy=name asc.\n\nEach filter is separated by %20. Any other special characters need to be url encoded.\n\nOperator\tDescription\neq\tEquals. Compares numbers and strings.\nneq\tIs not equal to. Compares numbers and strings.\nlt\tIs less than. Compares numbers only.\nlte\tIs less than or equal to. Compares numbers only.\ngt\tIs greater than. Compares numbers only.\ngte\tIs greater than or equal to. Compares numbers only.\nlike\tIs similar to. Compares strings only.\n\nExample Request\n\nExample Response", 2)
('POST /push/v1/location\n\nCreates a new location.\n\nName\tType\t\tDescription\nname\tstring\tRequired\tName of the location\nlocation\tstring\t\tText defining the location; usually a physical or mailing address\ndescription\tstring\t\tDescription or notes for the location\ncenter\tobject\t\tCenter point of the location circle\ncenter.latitude\tdecimal\t\tGeographic latitude of the location center\ncenter.longitude\tdecimal\t\tGeographic longitude of the location center\nradius\tinteger\t\tRadius of the location circle in meters\nattributes\tarray\t\tList of attributes for the location\nattributes.attribute\tstring\t\tName of the attribute\nattributes.value\tstring\t\tValue for the attribute\nlocationType\tinteger\t\tIndicates whether this is a geofence or beacon location. If not specified, it defaults to geofence. To specify, use 1 for geofence or 3 for beacon.\nproximityUuid\tstring\t\tUnique identifier used to distinguish one beacon from another. Required if creating a beacon location. This number is found on the beacon hardware. Enter the UUID exactly as listed.\nmajor\tinteger\t\tSpecifies a particular beacon within a group. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.\nminor\tinteger\t\tGroups a related set of beacons. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.\n\nExample Request\n\nExample Response', 2)
('PUT /platform/v1/dataencryption/rotateasync\n\nQueue the rotation of a key.\n\nName\tType\tDescription\neid\tinteger\tRequired. The enterprise id.\nmid\tinteger\tRequired. The member id.\nkeyId\tstring\tRequired. Identifier of the key to rotate to. The length for this field is 36, allowing the maximum length of a hyphenated GUID.\nStatus\tKey\tType\tDescription\n202\t\t\tRequest for rotating TDE key has been received but not acted upon.\n\ttrackingCode\tstring\tRequired. Identifier to track the KeyRotate request.\n\tretryAfter\tinteger\tThe estimated time to complete the KeyRotate request.\n\trequestPayload\tobject\tThis object restates the JSON parameters in the last section.\n400\t\t\tInvalid request payload.\n429\t\t\tUnable to rotate key because only two TDE rotates are allowed within a predefined window.\n500\t\t\tInternal server error.\nGet Keys\nGet Key By Key ID\nDelete Key By Key ID', 2)
('GET /push/v1/application/{appId}\n\nRetrieves a single app associated with an account.\n\nName\tType\t\tDescription\nappId\tstring\tRequired\tString value identifying the app\n\nExample Request\n\nExample Response\n\nIf the request passes successfully, the API returns this response.\n\nIf the request includes invalid information, the API returns a 400 response with details on the error.', 2)
("DELETE /platform/v1/key/{keyId}\n\nDeletes a key based on the keyId for the current MID. This feature isn't enabled by default for most accounts. Contact your Account Executive for more information about enabling this feature. To use this feature, Data at Rest Encryption must be enabled for your account.\n\nName\tType\t\tDescription\nkeyId\tstring\tRequired\tID of the key. Format: UUID.\nx-request-id\tstring\t\tHeader parameter: Request ID for the request. Default Format: 4586c4c7-8504-4cf4-942d-19f99a57c4d9.\nx-mccs-user-context\tstring\t\tHeader parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.\nx-mccs-keystore-provider\tstring\t\tHeader parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.\nx-mccs-mac\tstring\t\tHeader parameter: Specify the message authentication code for the request.\nStatus\tName\tType\tDescription\n204\t\xa0\t\xa0\tSuccessfully soft deleted meta data and hard deleted key from keystore\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\tTde keys used by encrypted backups can’t be deleted, must wait 90 days from rotate or restore\n\xa0\ttype\tstring\tundefined\n\xa0\ttitle\tstring\tundefined\n\xa0\tstatus\tinteger\tFormat: int32.\n\xa0\tdetail\tstring\tundefined\n\xa0\tinstance\tstring\tundefined\n\xa0\tadditionalProperties\tobject\tundefined\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\tKey not found\n\xa0\ttype\tstring\tundefined\n\xa0\ttitle\tstring\tundefined\n\xa0\tstatus\tinteger\tFormat: int32.\n\xa0\tdetail\tstring\tundefined\n\xa0\tinstance\tstring\tundefined\n\xa0\tadditionalProperties\tobject\tundefined\n\xa0\t\xa0\t\xa0\t\xa0\n500\t\xa0\t\xa0\tUnable to process request\n\xa0\tstatusCode\tinteger\tFormat: int32.\n\xa0\trequestId\tstring\tundefined\n\xa0\tmessage\tstring\tundefined\n\xa0\tmessageCode\tstring\tundefined\n\nTo delete a key, send a DELETE request to the /platform/v1/key/{keyID}\n\nWhen the key is deleted, the system responds with an HTTP 204 code.", 2)
('DELETE /push/v1/message/{messageId}\n\nDeletes an existing message\n\nName\tType\t\tDescription\nmessageId\tstring\tRequired\tId of the message to delete\n\nExample Request\n\nExample Response\n\nIf the request includes a valid messageID value, the API returns the following response.\n\nIf the request includes an invalid value, the API returns a 400 response with details on the error.', 2)
("GET /push/v1/message\n\nRetrieves all messages currently defined within an account.\n\nName\tType\t\tDescription\n$page\tnumber\t\tPage number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter.\n$pagesize\tnumber\t\tNumber of results per page to return. Typically provided along with the $page parameter.\n$filter\tstring\t\tFilter by a message's property using a simple operator and value. Valid filter properties are Message Type, Content Type, and Status.\n$orderBy\tstring\t\tDetermines which property to use for sorting, and also determines the direction in which to sort the data.\n\nThe sort syntax is the message property name followed by the order direction, either asc or desc, with a space in between. Sort by multiple property names by separating each sequence with a comma. Valid sort properties are:\n\nid\nname\nstatusid\nstatus\nscheduledDate\napplicationId\napplication\napp\ncampaign\nsendMethodId\nsubject\ngeofenceId\ncreatedDate\nlastUpdated\n\nThis example sorts by name in descending order: /push/v1/message?$orderBy=name asc.\n\nEach filter is separated by %20. Any other special characters need to be url encoded.\n\nOperator\tDescription\neq\tEquals. Compares numbers and strings.\nneq\tIs not equal to. Compares numbers and strings.\nlt\tIs less than. Compares numbers only.\nlte\tIs less than or equal to. Compares numbers only.\ngt\tIs greater than. Compares numbers only.\ngte\tIs greater than or equal to. Compares numbers only.\nlike\tIs similar to. Compares strings only.\n\nExample Request\n\nExample Response\n\nIf the request includes invalid values, the API returns a 400 response with details on the error.", 2)
('GET /push/v1/message/{messageID}\n\nRetrieves a single message currently defined within an account.\n\nName\tType\t\tDescription\nmessageId\tstring\tRequired\tId of the message to retrieve.\n\nExample Request\n\nExample Response\n\nIf the request includes invalid values, the API returns a 400 response with details on the error.', 2)
('GET /push/v1/location/{locationId}\n\nGets a specific location.\n\nName\tType\t\tDescription\nlocationId\tstring\tRequired\tID of the location\n\nExample Request\n\nExample Response', 2)
('PUT /push/v1/location/{locationId}\n\nUpdates an existing location.\n\nName\tType\t\tDescription\nlocationId\tstring\tRequired\tID of the location to update\nName\tType\t\tDescription\nname\tstring\tRequired\tName of the location\nlocation\tstring\t\tText defining the location; usually a phyiscal or mailing address\ndescription\tstring\t\tDescription or notes for the location\ncenter\tobject\t\tCenter point of the location circle\ncenter.latitude\tdecimal\t\tGeographic latitude of the location center\ncenter.longitude\tdecimal\t\tGeographic longitude of the location center\nradius\tinteger\t\tRadius of the location circle in meters\nattributes\tarray\t\tList of attributes for the location\nattributes.attribute\tstring\t\tName of the attribute\nattributes.value\tstring\t\tValue for the attribute\nlocationType\tinteger\t\tIndicates whether this is a geofence or beacon location. If not specified, it defaults to geofence. To specify, use 1 for geofence or 3 for beacon.\nproximityUuid\tstring\t\tUnique identifier used to distinguish one beacon from another. Required if creating a beacon location. This number is found on the beacon hardware. Enter the UUID exactly as listed.\nmajor\tinteger\t\tSpecifies a particular beacon within a group. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.\nminor\tinteger\t\tGroups a related set of beacons. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.\n\nExample Request\n\nExample Response', 2)
('DELETE /push/v1/application/{appId}/key\n\nDeletes all custom key values associated with an app.\n\nName\tType\t\tDescription\nappId\tstring\tRequired\tString value identifying the app\n\nExample Request\n\nExample Response\n\nIf the request passes successfully, the API returns the following response.\n\nIf the request includes invalid information, the API returns a 400 response with details on the error.', 2)
('PUT /push/v1/application/{appId}/key\n\nUpdates information on all custom key values associated with an app.\n\nName\tType\t\tDescription\nappId\tstring\tRequired\tString value identifying the app\n\nExample Request\n\nExample Response\n\nIf the request passes successfully, the API returns the following response.\n\nIf the request includes invalid information, the API returns a 400 response with details on the error.', 2)
("POST /push/v1/messageApp/{messageId}/send\n\nWhere possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nBroadcasts a message to all users of a push-enabled app.\n\nName\tType\t\tDescription\nmessageID\tstring\tRequired\tThe ID of the triggered send definition configured for MessageSend sending used for the send\nName\tType\t\tDescription\noverride\tboolean\t\tA flag indicating the contact is to receive the messageText as provided instead of the message's original text.\nmessageText\tstring\t\tThe text value to be used in place of the message's original text. This field is required when override is true.\ntitle\tstring\t\tThe title to be used in place of the message's original title.\nsubtitle\tstring\t\tThe subtitle to be used in place of the message's original subtitle.\nmutable-content\tboolean\t\tIf true, rich push functionality is enabled for the message.\nsendTime\tdate\t\tDate formatted yyyy-MM-dd HH specifying a time in the future to send the message.\nblackoutWindow\tstring\t\tThe blockoutWindow definition used to delay message sending outside a given windowStart and windowEnd and utcOffset.\nsound\tstring\t\tSound filename to be played on the device.\nbadge\tstring\t\tFor iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.\nopenDirect\tstring\t\tValue used as the open direct destination\ncustomPayload\tstring\t\tCustom definition in escaped JSON.\ncustomKeys\tarray\t\tAn array of key/value pairs used as custom keys to be sent with the message request body.\n\nExample Request\n\nExample Response", 2)
('DELETE /push/v1/location/{locationId}\n\nDeletes an existing location.\n\nName\tType\t\tDescription\nlocationId\tstring\tRequired\tID of the location to delete\n\nExample Request\n\nExample Response', 2)
('POST /push/v1/contacts/refreshList/{id}\n\nRefreshes a list.\n\nName\tType\t\tDescription\nlistId\tstring\tRequired\tThe Id of the list to refresh\n\nExample Request\n\nExample Response', 2)
('GET /push/v1/application/{appId}/key\n\nRetrieves all custom key values associated with an app.\n\nName\tType\t\tDescription\nappId\tstring\tRequired\tString value identifying the app\n\nExample Request\n\nExample Response\n\nIf the request passes successfully, the API returns the following response.\n\nIf the request includes invalid information, the API returns a 400 response with details on the error.', 2)
('DELETE /push/v1/application/{appId}/key/{key}\n\nDeletes a single custom key value associated with an app.\n\nName\tType\t\tDescription\nappId\tstring\tRequired\tString value identifying the app\nkey\tstring\tRequired\tString value identifying the key. The string must be less than or equal to 15 characters.\n\nExample Request\n\nExample Response\n\nIf the request passes successfully, the API returns the following response.\n\nIf the request includes invalid information, the API returns a 400 response with details on the error.', 2)
('PUT /push/v1/application/{appId}/key/{key}\n\nUpdates information on a single custom key value associated with an app.\n\nName\tType\t\tDescription\nappId\tstring\tRequired\tString value identifying the app\nkey\tstring\tRequired\tString value identifying the key (must be less than or equal to 15 characters)\n\nExample Request\n\nExample Response\n\nIf the request passes successfully, the API returns this response.\n\nIf the request includes invalid information, the API returns a 400 response with details on the error.', 2)
('GET /push/v1/contacts/refreshList/{id}/status/{tokenId}\n\nGets the refresh list status.\n\nName\tType\t\tDescription\nListID\tstring\tRequired\tThe ID of the list in MobileConnect\nTokenID\tstring\tRequired\tThe unique ID returned when using the RefreshList operation\n\nExample Request\n\nExample Response', 2)
('GET /push/v1/messageApp/{messageId}/deliveries/{tokenId}\n\nRetrieves delivery status of a previous messageApp send job.\n\nName\tType\t\tDescription\nmessageID\tstring\tRequired\tThe API key of the message definition. The key is configured in the MobilePush user interface.\ntokenID\tstring\tRequired\tThe value returned following the send of a push message\n\nExample Request\n\nExample Response', 2)
('GET /push/v1/messageTag/{messageId}/deliveries/{tokenId}\n\nRetrieves delivery status of a previous messageTag send job.\n\nName\tType\t\tDescription\nmessageID\tstring\tRequired\tThe API key of the message definition. This key is configured in the MobilePush user interface.\ntokenID\tstring\tRequired\tThe value returned following the send of a push message\n\nExample Request\n\nExample Response', 2)
('GET /push/v1/messageContact/{messageId}/deliveries/{tokenId}\n\nRetrieves delivery status of a previous messageContact send job.\n\nName\tType\t\tDescription\nmessageId\tstring\tRequired\tMessage Id provided for the messageContact\ntokenId\tstring\tRequired\tToken Id returned for the messageContact in the form of a GUID\n\nExample Request\n\nExample Response', 2)
('GET /push/v1/messageList/{messageId}/deliveries/{tokenId}\n\nWhen you send a push message from the API, you receive a token ID in response. Use the token in this API call to retrieve the number of contacts we attempted to send to, not including those who opted out, for a messageList send job.\n\nName\tType\t\tDescription\nmessageID\tstring\tRequired\tThe API key of the message definition. The key is configured in the MobilePush user interface.\ntokenID\tstring\tRequired\tThe value returned following the send of a push message.\n\nExample Request\n\nExample Response', 2)
("HTTP Security Headers API\n\nApply and manage HTTP security headers for SAP-branded view and click domains.\n\nThis API supports create, read, update, and delete (CRUD) operations. Image and CloudPage domains aren't supported.\n\nThe HTTP Security Headers API supports a discrete set of header and value pairs. Developers select which headers to apply from these nine options.\n\nHeader\tValue\nContent-Security-Policy\tdefault-src 'self'; frame-ancestors 'self'\nX-Frame-Options\tSAMEORIGIN\nX-Content-Type-Options\tnosniff\nReferrer-Policy\torigin-when-cross-origin\nStrict-Transport-Security\tmax-age=31536000; includeSubDomains\nCache-Control\tno-cache, must-revalidate, max-age=0, no-store, private\nX-XSS-Protection\t1; mode=block\nPermissions-Policy\tgeolocation=(self), microphone=()\nSet-Cookie\tstrict\n\nThe Content-Security-Policy sometimes breaks external content when applied to view domains. For example, it's possible to break an image that's hosted on another domain. Test your pages to ensure that your content renders as intended.\n\nIn this base URI example, the abbreviation {tse} is a placeholder that occupies the place of the tenant-specific-endpoint for the account.\n\nFunction\tMethod\tRoute\tPermissions\nGet All HTTP Security Headers\tGET\t/messaging/v1/securityHeaders/all\tSecurity > HTTP Headers > View\nGet HTTP Security Headers\tGET\t/messaging/v1/securityHeaders\tSecurity > HTTP Headers > View\nUpdate HTTP Security Headers\tPOST\t/messaging/v1/securityHeaders\tSecurity > HTTP Headers > Update\nDelete HTTP Security Headers\tDELETE\t/messaging/v1/securityHeaders/{PageType}\tSecurity > HTTP Headers > Delete\n\nThis API uses the standard error status codes outlined on the Handle Errors in REST API page.\n\nSender Authentication Package\nSet Up Your Development Environment for Enhanced Packages\nHTTP Headers\nHandle Errors in REST API page", 3)
("POST /messaging/v1/securityHeaders\n\nUpdate the security headers applied to a business unit's SAP-branded view and click domains.\n\nName\tType\tDescription\nsecurityHeaders\tarray\tAn array of objects described in the securityHeaders object.\npageType\tstring\tThe string value is view or click.\nName\tType\tDescription\nid\tinteger\tThe security header id.\nname\tstring\tThe security header name.\nHTTP Security Headers Overview\nGet All HTTP Security Headers\nGet HTTP Security Headers\nDelete HTTP Security Headers", 2)
("GET /messaging/v1/securityHeaders\n\nGet a list of the security headers applied to a business unit's SAP-branded view and click domains.\n\nName\tType\tDescription\ndata\tarray\tAn array of objects described in the data object.\nrequestId\tstring\tA string formatted as a GUID.\nName\tType\tDescription\nsecurityHeaders\tarray\tAn array of objects described in the securityHeaders object.\npageType\tstring\tThe string value is view or click.\nName\tType\tDescription\nid\tinteger\tThe security header id.\nname\tstring\tThe security header name.\nHTTP Security Headers Overview\nGet All HTTP Security Headers\nUpdate HTTP Security Headers\nDelete HTTP Security Headers", 2)
('GET /messaging/v1/securityHeaders/all\n\nGet the list of all available security headers with their default values.\n\nHTTP Security Headers Overview\nGet HTTP Security Headers\nUpdate HTTP Security Headers\nDelete HTTP Security Headers', 2)
("POST /messaging/v1/email/seed-lists/\n\nCreates a seed-list for an account. The MID and Partner AppId is used from authentication. There's a retention period of 60 days for the seed-list. To stay active, update seed lists every 30 days, even when they're unchanged. An account can have 20 seed-lists, and each seed-list is allowed 500 seeds.\n\nName\tType\t\xa0\t\xa0\t\xa0\tDescription\nname\tstring\t\xa0\t\xa0\tRequired\tNames the seed-list to be created.\ndescription\tstring\t\xa0\t\xa0\t\xa0\tIf the name doesn't fully describe the seed-list, a description is provided.\nseeds\tarray of objects\t\xa0\t\xa0\tRequired\tHolds a list of objects, each containing a single name:value pair.\n\xa0\t\xa0\tName\tType\t\xa0\t\xa0\n\xa0\t\xa0\temail\tstring\tRequired\tEach record, up to and including 500, contains a valid email address of the seed.\nStatus\tName\tType\tDescription\n201\t\xa0\t\xa0\tSuccessful creation of a seed list\n\xa0\tid\tstring\tA globally unique identifier (GUID)\nHTTP Status\tDescription\n400\tThe proposed seed-list name exists already.\n400\tPartner App has 20 active seed-lists.\n400\tThe request has more than 500 seeds\n400\tThe seed-list name is longer than 128 characters.\n400\tAn email address under seeds is incorrect in format.\n401\tThe request comes from an invalid partner app.\n429\tAPI rate limit throttling is preventing success.\nSeed-List in Rest Reference\nSeed-List Management API", 2)
("DELETE /messaging/v1/securityHeaders/{pageType}\n\nDelete all the security headers applied to either a business unit's SAP-branded view or click domain.\n\nName\tType\tDescription\npageType\tstring\tThe type of the page, either click or view.\nHTTP Security Headers Overview\nGet All HTTP Security Headers\nGet HTTP Security Headers\nUpdate HTTP Security Headers", 2)
('GET /messaging/v1/email/seed-lists\n\nRead all seed lists for an account. The MID and partner appId are used from authentication. The View user permission is required.\n\nStatus\tName\tType\t\xa0\t\xa0\t\xa0\t\xa0\tDescription\n200\t\xa0\t\xa0\t\xa0\t\xa0\t\xa0\t\xa0\tSuccessful response indicating the request passed validations.\n\xa0\tcount\tinteger\t\xa0\t\xa0\t\xa0\t\xa0\tThe count of seed-lists.\n\xa0\tpage\tinteger\t\xa0\t\xa0\t\xa0\t\xa0\tThe page number.\n\xa0\tpageSize\tinteger\t\xa0\t\xa0\t\xa0\t\xa0\tThe maximum of seed-lists allowed on a page under the current pagination settings.\n\xa0\tlinks\tobject\t\xa0\t\xa0\t\xa0\t\xa0\tAn object containing relevant links as name:value pairs, the values are objects.\n\xa0\t\xa0\t\xa0\tName\tType\t\xa0\t\xa0\t\xa0\n\xa0\t\xa0\t\xa0\tself\tobject\t\xa0\t\xa0\tThe name self is a default object name, with the nested object.\n\xa0\t\xa0\t\xa0\t\xa0\t\xa0\tName\tType\t\xa0\n\xa0\t\xa0\t\xa0\t\xa0\t\xa0\thref\tstring\tThe string value is the path of the calling url.\n\xa0\titems\tlist of objects\t\xa0\t\xa0\t\xa0\t\xa0\tThe container for the items.\n\xa0\t\xa0\t\xa0\tName\tType\t\xa0\t\xa0\t\xa0\n\xa0\t\xa0\t\xa0\tid\tstring\t\xa0\t\xa0\tA globally unique identifier (GUID).\n\xa0\t\xa0\t\xa0\tname\tstring\t\xa0\t\xa0\tThe name of a seed-list, assigned at creation or update.\n\xa0\t\xa0\t\xa0\tdescription\tstring\t\xa0\t\xa0\tThe description of a seed-list, assigned at creation or update.\n\xa0\t\xa0\t\xa0\tactiveSeedCount\tinteger\t\xa0\t\xa0\tThe count of seeds (email addresses) in the seed-list.\n200\t\xa0\t\xa0\t\xa0\t\xa0\t\xa0\t\xa0\tSuccessful response but with an empty object, indicating no seed-lists for the partner appID.\nHTTP Status\tDescription\n429\tAPI rate limit throttling is preventing success.\n\nData exists:\n\nNo data exists:\n\nSeed-List in Rest Reference\nSeed-List Management API', 2)
("GET /messaging/v1/email/seed-lists/{id}\n\nRead a single seed list for an account. The MID and partner appId is used from authentication. Ensure the MID is activated for MCSeedList. This query verifies that the seed-list GUID given as the value for id belongs to the appID. If so, it returns the active seed-list for the id.\n\nStatus\tName\tType\t\xa0\t\xa0\tDescription\n200\t\xa0\t\xa0\t\xa0\t\xa0\tSuccessful response indicating the request passed validations\n\xa0\tid\tstring\t\xa0\t\xa0\tThe globally unique id (GUID) assigned inception.\n\xa0\tname\tstring\t\xa0\t\xa0\tThe description given at creation or update.\n\xa0\tdescription\tstring\t\xa0\t\xa0\tThe description of the seed-list given at creation or update.\n\xa0\tseeds\tlist of objects\t\xa0\t\xa0\tThe objects in the list each consist of a single name:value pair.\n\xa0\t\xa0\t\xa0\tName\tType\t\xa0\n\xa0\t\xa0\t\xa0\temail\tstring\tAn email address.\n200\t\xa0\t\xa0\t\xa0\t\xa0\tSuccessful response but with an empty object, indicating no active seed-lists for the partner appID.\nHTTP Status\tDescription\n401\tSeed-list doesn't belong to the partner appID.\n429\tAPI rate limit throttling is preventing success.\n\nData exists:\n\nNo data exists:\n\nSeed-List in Rest Reference\nSeed-List Management API", 2)
("PUT /messaging/v1/email/seed-lists/{id}\n\nUpdate a single seed list for an account. The MID and partner appId are used from authentication. The {id} in the URL path is the globally unique ID assigned by the system at creation.\n\nA seed-list is retained for 60 days. To keep them active, update seed lists every 30 days, even when they're unchanged. Any seed-lists existing before this call are replaced by the ones provided in the JSON payload. An account can have 20 seed-lists, and each seed-list is allowed 500 seeds.\n\nName\tType\t\xa0\t\xa0\tDescription\nname\tstring\t\xa0\t\xa0\tThe name given at creation or update.\ndescription\tstring\t\xa0\t\xa0\tA description of the seed-list.\nseeds\tlist of objects\t\xa0\t\xa0\tThe objects in the list each consist of a single name:value pair.\n\xa0\t\xa0\tName\tType\t\xa0\n\xa0\t\xa0\temail\tstring\tan email address.\nStatus\tName\tType\t\xa0\t\xa0\tDescription\n200\t\xa0\t\xa0\t\xa0\t\xa0\tSuccessful response indicating the request passed validations.\n\xa0\tname\tstring\t\xa0\t\xa0\tThe name given at creation or update.\n\xa0\tdescription\tstring\t\xa0\t\xa0\tA description of the seed-list.\n\xa0\tseeds\tlist of objects\t\xa0\t\xa0\tThe objects in the list each consist of a single name:value pair.\n\xa0\t\xa0\t\xa0\tName\tType\t\xa0\n\xa0\t\xa0\t\xa0\temail\tstring\tan email address.\n200\t\xa0\t\xa0\t\xa0\t\xa0\tSuccessful response but with an empty object, indicating no active seed-lists for the partner appID.\nHTTP Status\tDescription\n401\tSeed-list doesn't belong to the partner ID.\n429\tAPI rate limit throttling is preventing success.\nSeed-List in Rest Reference\nSeed-List Management API", 2)
("GET /messaging/v1/email/seed-list-account\n\nReads account data for a seed-list. The MID is used from authentication. Returns the partner list and auto-seed options that are in place for the MID.\n\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccessful read of account data.\n\xa0\tautoSeedListID\tstring\tA globally unique identifier (GUID).\n\xa0\tautoSeedListThreshold\tinteger\tThe threshold for auto-seeding.\n\xa0\tautoSeedEnabled\tboolean\tA true or false value indicating if auto-seed is enabled.\n\xa0\tautoSeedListName\tstring\tThe name of the seed-list.\n200\t\xa0\t\xa0\tSuccessful read but an empty response when there's no SeedListAccount entry.\nHTTP Status\tDescription\tNotes\n400\tNo active auto-seed-list mapping for the given MID.\tError code: 10000\n429\tAPI rate limit throttling is preventing success.\tYet to be added.\n\nData exists:\n\nNo data exists:\n\nSeed-List in Rest Reference\nSeed-List Management API", 2)
('DELETE /messaging/v1/email/seed-lists/{id}\n\nDeletes a seed list from an account. The MID is used from authentication. Ensure that:\n\nThe MID is activated for MCSeedList.\nThe Principal has AppId associated with it to validate that a partner is calling in.\nThe AppId is associated with the seed-list guid (one partner can\'t update the seed-list of another partner).\n\nIf a seed-list GUID exists, this method inactivates all seeds in it.\n\nStatus\tDescription\n204\tNo content.\nHTTP Status\tDescription\n400\t"\'<invalid guid - {id}>\' is not a valid SeedList ID."\n400\tCannot find seed-list with this id: {id}.\n404\tThe seed-list id (GUID) doesn\'t belong to the PartnerId.\n429\tAPI rate limit throttling is preventing success.\nSeed-List in Rest Reference\nSeed-List Management API', 2)
('POST /sms/v1/keyword\n\nCreates a keyword on an account.\n\nName\tType\t\tDescription\nlongCode\tstring\t\tThe long code that the keyword will be created on\nshortCode\tstring\t\tThe short code that the keyword will be created on\nkeyword\tstring\t\tThe keyword that will be created\ncountryCode\tstring\t\tThe two letter country code specifying the country that short code belongs to\n\nExample Request\n\nExample Response', 2)
('DELETE /sms/v1/keyword/{keywordId}\n\nDeletes a keyword on an account given a keyword Id.\n\nName\tType\t\tDescription\nkeywordId\tstring\tRequired\tEncoded Id of keyword that will be deleted\n\nExample Request\n\nExample Response', 2)
('POST /sms/v1/contacts/subscriptions\n\nReturns subscription status for a mobile number or subscriber key.\n\nName\tType\t\tDescription\nmobileNumber\tstring\t\tAn array of mobile numbers\nsubscriberKey\tstring\t\tAn array of subscriber keys\n\nThe phone number must use the correct format for the designated country code. For example, a mobile number from the United States must include the numerical country code 1 and the applicable area code as displayed in the sample CSV file. Note that the numerical country code mentioned here applies only to the phone number itself, and that any separate field containing country code information must conform to ISO-3306-1 alpha-2 standards.\n\nExample Request\n\nExample Response', 2)
('POST /sms/v1/automation/importSend\n\nImports and sends.\n\nName\tType\t\tDescription\nmessageId\tstring\tRequired\tEncoded message Id\nkeyword\tstring\tRequired\tA valid keyword on the shortcode for the message to opt the numbers on to\nnotificationEmail\tstring\t\tIf specified, email notifications will be sent on import and program completion\noverride\tboolean\t\tFlag to indicate whether the override text should be used\noverrideText\tstring\t\tText to override the existing message.\nisDuplicationAllowed\tboolean\t\tIf true, duplicate messages may be sent\nisVisible\tboolean\t\tIf specified true, the import definition and list created will be visible\nimportDefinition\tstring\tRequired\tList of Import Definitions to be created (currently limited to 1)\n\nExample Request for FILE ImportType\n\nExample Request for DATA_EXTENSION ImportType\n\nExample Response', 2)
('POST /sms/v1/contacts/refreshList/{id}\n\nRefreshes a list.\n\nName\tType\t\tDescription\nlistId\tstring\tRequired\tThe Id of the list to refresh\n\nExample Request\n\nExample Response If all values in the request are valid, the API returns a token that can be used to make a follow-up call to check the status of the request.', 2)
('DELETE /sms/v1/keyword/{keyword}/{longCode}\n\nDeletes a keyword on an account given a keyword and long code.\n\nName\tType\t\tDescription\nkeyword\tstring\t\tThe keyword that will be deleted\nlongCode\tstring\t\tThe long code of the keyword that will be deleted\n\nExample Request\n\nExample Response', 2)
('GET /sms/v1/queueMO/deliveries/{tokenId}\n\nRetrieves the delivery status of a queued MO.\n\nName\tType\t\tDescription\ntokenId\tstring\tRequired\tToken Id returned for the queued MO\n\nExample Request\n\nExample Response', 2)
('GET /sms/v1/queueMO/history/{tokenId}\n\nRetrieves the tracking history of a queued MO.\n\nName\tType\t\tDescription\ntokenId\tstring\tRequired\tToken Id returned for the queued MO\n\nExample Request\n\nExample Response', 2)
('POST /sms/v1/contacts/queueImport/{id}\n\nQueues a contact import.\n\nName\tType\t\tDescription\nlistId\tstring\tRequired\tthe list id\nName\tType\t\tDescription\nshortCode\tstring\t\tThe short code\nkeyword\tstring\t\tThe keyword\nsendEmailNotification\tboolean\t\tSend email notification\nemailAddress\tstring\t\tEmail address the notification goes to\nimportMappingType\tstring\t\tField mapping type\nfileName\tstring\t\tThe name of the file, including extensions\nfileType\tstring\t\tThe only type supported is csv\nisFirstRowHeader\tboolean\t\tFlag indicating whether or not the first row is the header\nfieldMaps\tarray\t\tList of field maps includes destination, ordinal, and source\n\nExample Request\n\nExample Response', 2)
('GET /sms/v1/automation/importSend/{tokenid}/status\n\nRetrieves the status of a ImportSend automation.\n\nName\tType\t\tDescription\ntokenID\tstring\tRequired\tThe ID provided in the ImportSend REST response.\n\nExample Request\n\nExample Response', 2)
("POST /sms/v1/automation/importSend/{id}/deliveryReport\n\nGenerates a .csv file that contains information regarding SMS message delivery for a specific MessageList. The resulting report is stored in the account's Enhanced FTP site.\n\nName\tType\tDescription\ntokenid\tstring\tRequired. The ID provided in the MessageList REST response\nName\tType\tDescription\nfileName\tstring\tRequired. The name of the report file in your FTP/reports folder\n\nSent a POST request to the /sms/v1/automation/importSend/{tokenid}/deliveryReport/ endpoint.", 2)
('GET /sms/v1/messageList/{id}/deliveries/{tokenId}\n\nReturns status for a message sent to a group of mobile numbers.\n\nName\tType\t\tDescription\nmessageId\tstring\t\tMessage Id provided for the messageList\ntokenId\tstring\t\tToken Id returned for the messageList\n\nExample Request\n\nExample Response\n\nStatus values:\n\nmessage - The message text sent in the SMS message\n\ncount - The total of mobile numbers included in the send request subtracting the number of unsubscribed recipients\n\ncreatedDate - Date when the MessageContact send was submitted, returned in CST\n\ncreatedDate - Date when the send completed, returned in CST\n\nStatus\n\nFinished\nError\nNew\nQueuing\nStarted\n\nError Response\n\nIf the request included an invalid messageId or tokenId, the API returns the appropriate error.\n\nMessage\tDetails\nMessage id {0} is not valid.\tThe messageID value provided in the URL was not in a valid format.\n"Token id {0} is not valid."\tThe tokenId value provided in the URL was not in a valid format.\nToken id {0} is not valid for this client.\tThe tokenId value provided is valid but was created for another client.\nTokenId {0} is not valid for MessageId {1}.\tThe tokenId value provided is valid for your account but not for the MessageId provided.\nAn unexpected error occurred, please contact Customer Support with reference id {0}.\tIf this unexpected error is presented when making a call, please take note of the reference id value returned in the error and contact ExactTarget Global Support for more information.', 2)
('GET /sms/v1/contacts/queueImport/{id}/status/{tokenId}\n\nRetrieves the status of an import job.\n\nName\tType\t\tDescription\nListID\tstring\tRequired\tThe ID of the List found in the MobileConnect interface\nTokenID\tstring\tRequired\tThe unique ID returned when using the ImportQueue operation\n\nExample Request\n\nExample Response', 2)
('GET /sms/v1/contacts/refreshList/{id}/status/{tokenId}\n\nRetrieves the refresh list status.\n\nName\tType\t\tDescription\nListID\tstring\tRequired\tThe ID of the list found in the MobileConnect interface\nTokenID\tstring\tRequired\tThe unique ID returned when using the RefreshList operation\n\nExample Request\n\nExample Response\n\nIf the request was not valid, the API returns a 400 response with details on the error.', 2)
('POST /sms/v1/messageList/{id}/deliveryReport/{tokenId}\n\nTriggers a delivery report for messageList API.\n\nName\tType\t\tDescription\ntokenid\tstring\tRequired\tThe ID provided in the MessageList REST response\nmessageID\tstring\tRequired\tThe API key of the message definition (configured in the MobileConnect user interface)\nName\tType\t\tDescription\nfileName\tstring\tRequired\tThe name of the report file in your FTP/reports folder', 2)
('DELETE /sms/v1/keyword/{keyword}/{shortCode}/{countryCode}\n\nDeletes a keyword on an account given a keyword, short code, and country code.\n\nName\tType\t\tDescription\nkeyword\tstring\t\tThe keyword that will be deleted\nshortCode\tstring\t\tThe short code of the keyword that will be deleted\ncountryCode\tstring\t\tThe two letter country code specifying the country that short code belongs to\n\nExample Request\n\nExample Response', 2)
('GET /sms/v1/messageContact/{messageId}/deliveries/{tokenId}\n\nRetrieves the overall delivery status of a message to a contact and the standard SMS status codes and descriptions. Standard SMS status codes are universal regardless of where messages are sent. This API returns status codes in the order received from carriers. It\'s possible for Marketing Cloud Engagement to receive codes after the delivered or undelivered status has been returned. Infer the final message status from the status code with the highest numerical value.\n\nName\tType\tDescription\nmessageId\tstring\tRequired. The message ID provided for the messageContact.\ntokenId\tstring\tRequired. The token ID for the messageContact.\n\nExample Request\n\nExample Response\n\nStatus values:\n\nmessage - The message text sent in the SMS message\n\ncount - The total of mobile numbers included in the send request subtracting the number of unsubscribed recipients\n\ncreatedDate - Date when the MessageContact send was submitted, returned in CST\n\ncreatedDate - Date when the send completed, returned in CST\n\nStatus\n\nFinished\nError\nNew\nQueuing\nStarted\n\nError Response\n\nIf the request included an invalid messageId or tokenId, the API returns an appropriate error.\n\nMessage\tDetails\nMessage id {0} is not valid.\tThe messageID value provided in the URL was not in a valid format.\n"Token id {0} is not valid."\tThe tokenId value provided in the URL was not in a valid format.\nToken id {0} is not valid for this client.\tThe tokenId value provided is valid but was created for another client.\nTokenId {0} is not valid for MessageId {1}.\tThe tokenId value provided is valid for your account but not for the MessageId provided.\nAn unexpected error occurred, please contact Customer Support with reference id {0}.\tIf this unexpected error is presented when making a call, please take note of the reference id value returned in the error and contact ExactTarget Global Support for more information.', 2)
('GET /sms/v1/messageContact/{messageId}/history/{tokenId}/mobileNumber/{mobileNumber}\n\nRetrieves the last message sent to a mobile number.\n\nName\tType\t\tDescription\nmessageId\tstring\tRequired\tMessage Id provided for the messageContact\ntokenId\tstring\tRequired\tToken Id returned for the messageContact\nmobileNumber\tstring\tRequired\tMobile number for the messageContact\n\nExample Request\n\nExample Response', 2)
('POST /contacts/v1/contacts/actions/delete/options\n\nRetrieves delete options based on the specified parameters. You must provide a context request body for this resource, but all listed parameters are optional.\n\nName\tType\t\tDescription\nListType\tstring\t\tType of list referenced. Specify either Audience or List.\nDeleteOperationType\tstring\t\tType of delete operation referenced. Specify either ContactAndAttributes or AttributesOnly.\nApplicationContext\tstring\t\tThe application ID or application key value used to retrieve options available for that application.\n\nExample Request\n\nExample Response The response contains all the registered options from each adapter.', 2)
("DELETE /messaging/v1/email/definitions/{definitionKey}\n\nDeletes a message definition. You can't restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.\n\nName\tType\t\tDescription\ndefinitionKey\tstring\tRequired\tUnique identifier of the definition.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSend definition is updated on server. Review example response.\n\xa0\trequestId\tstring\tThe unique identifier of this request.\n\xa0\tmessage\tstring\tSuccess\n\xa0\tdeletedDefinitionKey\tstring\tNew value of the definition key for referencing the deleted definition.\nResponse\tReason\n200 OK\tSend definition is updated on server. Review example response.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tSend definition doesn’t exist.\n500 Server Error\tInternal error", 2)
('DELETE /messaging/v1/email/definitions/{definitionKey}/queue\n\nDeletes the queue for a send definition. The send definition must be in inactive status.\n\nName\tType\t\tDescription\ndefinitionKey\tstring\tRequired\tUnique identifier of the definition.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK. Review example response.\n\xa0\trequestId\tstring\tThe unique identifier of this request.\n\xa0\tmessage\tstring\tStatus of the request.', 2)
("POST /messaging/v1/email/messages/{messageKey}\n\nSends an email to a single recipient using a send definition.\n\nName\tType\tDescription\nmessageKey\tstring\tRequired. A unique identifier that you can use to track the status of the message. The key can contain up to 100 characters. There are no character restrictions. The message key that you provide must be unique among all of the keys that have been used in your business unit over the prior 72 hours.\nName\tType\tDescription\ndefinitionKey\tstring\tRequired. The ID of the send definition.\nrecipient\tobject\tRequired. An object that contains parameters and metadata for the recipient, such as send tracking and personalization attributes. Use this parameter to send to one recipient. If this object is present in the request, the recipients array (which is used to send messages to multiple recipients) can't be included in the request.\nrecipient.contactKey\tstring\tRequired. A unique identifier for the subscriber. You can create a contact key at send time if the contact isn’t already in Marketing Cloud Engagement.\nrecipient.to\tstring\tRequired. The recipient's email address.\nrecipient.attributes\tobject\tPersonalization information for the message, provided as key-value pairs. The attributes must match existing profile attributes, content attributes, or triggered send data extension attributes.\n\nThe response includes a request ID. The responses array contains a messageKey value for the message. If a message was sent successfully, the object doesn’t contain any additional information. If a message failed to send, the response includes an errorcode that describes the reasons that the message failed.", 2)
('GET /messaging/v1/email/definitions/{definitionKey}/queue\n\nGets metrics for the messages of a send definition. Applies to messages that are accepted but not yet processed.\n\nName\tType\t\tDescription\ndefinitionKey\tstring\tRequired\tUnique identifier of the definition.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK. Review example response.\n\xa0\trequestId\tstring\tThe unique identifier of this request.\n\xa0\tageSeconds\tinteger\tAge of the oldest unprocessed record in the queue.\n\xa0\tcount\tinteger\tTotal number of records waiting to be processed in the queue.\n\nCheck the queue depth and age of the oldest record not yet processed. If you set a definition to inactive and continue to send message requests to it, the count and age increase.', 2)
("GET /messaging/v1/email/definitions\n\nThe number of records returned by this function is based on the $pageSize and $page parameters. It doesn't necessarily return all the records in one call.\n\nGet a list of email send definitions.\n\nName\tType\t\tDescription\n$filter\tstring\t\tFilter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq.\n$pageSize\tinteger\t\tIn the array called definitions, each element is an object representing a send definition. This parameter controls the number of such objects that are returned per page.\n$page\tinteger\t\tPage number to return.\n$orderBy\tstring\t\tSort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccess\n\xa0\trequestId\tstring\tThe unique identifier of this request.\n\xa0\tname\tstring\tName of the definition.\n\xa0\tdefinitionKey\tstring\tUnique, user-generated key to access the definition object.\n\xa0\tstatus\tstring\tOperational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.\n\xa0\tcreatedDate\tstring\tDate the definition was created.\n\xa0\tmodifiedDate\tstring\tDate and time of the most recent definition change.\nResponse\tReason\n200 OK\tSuccess. Review example response.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n500 Server Error\tInternal error", 2)
("GET /messaging/v1/email/messages/?type=notSent\n\nGets a paginated list of messages that were not sent, ordered from oldest to newest.\n\nName\tType\t\tDescription\ntype\tstring\tRequired\tOnly notSent is supported.\n$pageSize\tinteger\t\tNumber of messageKeys (array elements) to return per response page.\nlastEventId\tinteger\t\tEvent ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccess. Review example response.\n\xa0\tlastEventID\tinteger\tEvent ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.\n\xa0\tstatusCode\tinteger\tInteger value of the reason the send did not complete. Review Email Send Error Codes for more information.\n\xa0\tstatusMessage\tstring\tThe reason the send did not complete. Review Email Send Error Codes for more information.\n\xa0\teventCategoryType\tstring\tTransactionalSendEvent event type. EmailSent indicates that the email was sent to the email provider. EmailNotSent indicates that the email was not sent and includes the reason. EmailQueued indicates that the email has not yet been processed for sending.\n\xa0\ttimestamp\tstring\tTime the event occured in Central Standard Time (no daylight savings)\n\xa0\tdefinitionKey\tstring\tUnique identifier of the definition.\n\xa0\teventID\tinteger\tNumeric identifier of the event.\n\xa0\tmessageKey\tstring\tUnique identifier to track message send status.\n\xa0\tcontactKey\tstring\tUnique identifier for a subscriber.\n\xa0\tto\tstring\tChannel address of the recipient. For email, it’s the recipient's email address. For SMS, it’s the recipient's mobile number.\nResponse\tReason\n200 OK\tSuccess. Review example response.\n400 Bad Request\tInvalid request\n401 Unauthorized\tFailed to pass authorization.\n500 Server Error\tInternal error", 2)
('GET /messaging/v1/push/definitions/{definitionKey}\n\nGET /messaging/v1/push/definitions/{definitionKey}\n\nGet the send definition by definitionKey\n\nName\tType\tDescription\ndefinitionKey\tstring\tRequired.\nUnique identifier of the definition.', 3)
('POST /messaging/v1/push/definitions\n\nCreate a push send definition using existing content.\n\nName\tType\tDescription\tAttribute Requirements\ndefinitionKey\tstring\tRequired. A unique, user-generated key to access the definition object.\t\nname\tstring\tRequired. The name of the definition. The value must be unique.\t\napplicationId\tGUID\tRequired. The ID of the application used to send the message.\t\ncontent.customerKey\tstring\tRequired. The unique identifier of the content asset.\tThe customerKey obtained from content builder\nstatus\tstring\tOperational state of the definition:\nactive\ninactive\ndeleted\nMessages sent to an active definition are processed and delivered. A message sent to an inactive definition is queued for processing for up to three days.\tTransactional API - Operational Status\ndescription\tstring\tThe user-provided description of the send definition.\t\noptions.sound\tstring\tThis parameter names the sound file to play when the push message arrives on the mobile device. It overrides the value on the push message definition. The name is 100 characters or less.\t\noptions.badge\tstring\tThis parameter supports iOS and Android.\n\nFor iOS, the value overrides the push message definition. For iOS SDK version 4.9.5 and newer, the badge on the app displays this number and raises by one for each new unread message.\n\nFor older iOS SDK versions, the badge count doesn\'t increment.\tThe string value must resolve to an integer. Values such as "1", "+1", "2", and "+2" are acceptable.\noptions.customKeys\tarray\tAn array of custom key/value pairs.\t', 2)
("GET /messaging/v1/push/definitions\n\nThe number of records returned by this function is based on the $pageSize and $page parameters. It doesn't necessarily return all the records in one call.\n\nGet a list of push send definitions.", 2)
('PATCH /messaging/v1/push/definitions/{definitionKey}\n\nUpdate a push send definition, selected by key.\n\nName\tType\tDescription\ndefinitionKey\tstring\tRequired. The unique, user-generated key to access the definition object.\nName\tType\tDescription\tAttribute Requirements\nname\tstring\tThe name of the definition. The value must be unique.\t\napplicationId\tGUID\tThe ID of the application used to send the message.\t\ncontent.customerKey\tstring\tThe unique identifier of the content asset.\tThe customerKey received from content builder.\nstatus\tstring\tOperational state of the definition:\nactive\ninactive\ndeleted\nMessages sent to an active definition are processed and delivered. A message sent to an inactive definition is queued for processing for up to three days.\tTransactional API - Operational Status\ndescription\tstring\tThe user-provided description of the send definition.\t\noptions.sound\tstring\tThis parameter names the sound file to play when the push message arrives on the mobile device. It overrides the value on the push message definition. The name is 100 characters or less.\t\noptions.badge\tstring\tThis parameter supports iOS and Android.\n\nFor iOS, the value overrides the push message definition.\n\nFor iOS SDK version 4.9.5 and newer, the badge on the app displays this number and raises by one for each new unread message.\n\nFor older iOS SDK versions, the badge count doesn\'t increment.\tThe string value must resolve to an integer. Values such as "1", "+1", "2", and "+2" are acceptable.\noptions.customKeys\tarray\tAn array of custom key-value pairs.\t', 2)
("GET /messaging/v1/sms/definitions/{definitionKey}\n\nRetrieves the send definition configuration details for a definition key.\n\nName\tType\tDescription\ndefinitionKey\tstring\tRequired. The unique identifier of the send definition.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tOK\n\xa0\trequestId\tstring\tThe unique identifier of this request.\n\xa0\tname\tstring\tName of the definition.\n\xa0\tdefinitionKey\tstring\tA unique, user-generated key to access the definition object.\n\xa0\tdefinitionId\tstring\tA unique Marketing Cloud Engagement object identifier.\n\xa0\tdescription\tstring\tA user-provided description of the send definition.\n\xa0\tstatus\tstring\tThe status of the definition. Possible values include active, inactive, or deleted. Messages that you send to an active definition are processed for delivery. Messages that you send to an inactive definition aren’t processed or delivered. Instead, the message is queued for later processing for up to three days.\n\xa0\tcreatedDate\tstring\tThe date the definition was created.\n\xa0\tmodifiedDate\tstring\tThe date and time the definition was most recently changed.\n\xa0\tcontent.message\tstring\tThe message content to send with each message. Use substitution strings and AMPscript to personalize the message.\n\xa0\tsubscriptions.shortCode\tstring\tThe short or long code to use to send messages with this send definition.\n\xa0\tsubscriptions.countryCode\tstring\tThe country code associated with the short code. Don't specify this value for long codes unless your account configuration requires it.\n\xa0\tsubscriptions.keyword\tstring\tAn SMS keyword that is used to track messages.\n\xa0\tsubscriptions.autoAddSubscriber\tboolean\tIf you set this value to true, recipients are added as subscribers to the short code. If you set the value to false, the message is rejected if the contact doesn’t exist as a subscriber. The default value is true.\n\xa0\tsubscriptions.updateSubscriber\tboolean\tIf you set this value to true, the system updates the subscriber data to include the mobile number. Default is true.", 3)
('DELETE /messaging/v1/push/definitions/{definitionKey}\n\nDelete a definition by its key.\n\nName\tType\tDescription\ndefinitionKey\tstring\tRequired.\nThe unique identifier of the definition.', 2)
('GET /messaging/v1/push/messages/{messageKey}\n\nGet the send status for a message. This route is rate-limited, so use it for infrequent verification of a messageKey.\n\nName\tType\tDescription\nmessageKey\tstring\tRequired.\nThe unique identifier of the definition.\n\nEach device receives a status separately.', 2)
("DELETE /messaging/v1/sms/definitions/{definitionKey}\n\nDeletes a message definition. You can't restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.\n\nName\tType\t\tDescription\ndefinitionKey\tstring\tRequired\tUnique identifier of the definition.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSend definition is updated on server. Review example response.\n\xa0\trequestId\tstring\tThe unique identifier of this request.\n\xa0\tmessage\tstring\tSuccess\n\xa0\tdeletedDefinitionKey\tstring\tNew value of the definition key for referencing the deleted definition.\nResponse\tReason\n200 OK\tSend definition is updated on server. Review example response.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n404 Not Found\tSend definition doesn’t exist.\n500 Server Error\tInternal error", 2)
("GET /messaging/v1/sms/definitions\n\nThe number of records returned by this function is based on the $pageSize and $page parameters. It doesn't necessarily return all the records in one call.\n\nGet a list of SMS send definitions.\n\nName\tType\tDescription\n$filter\tstring\tFilter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq.\n$pageSize\tinteger\tIn the array called definitions, each element is an object representing a send definition. This parameter controls the number of such objects that are returned per page.\n$page\tinteger\tPage number to return.\n$orderBy\tstring\tSort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccess\n\xa0\trequestId\tstring\tThe unique identifier of this request.\n\xa0\tname\tstring\tName of the definition.\n\xa0\tdefinitionKey\tstring\tUnique, user-generated key to access the definition object.\n\xa0\tstatus\tstring\tOperational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.\n\xa0\tcreatedDate\tstring\tDate the definition was created.\n\xa0\tmodifiedDate\tstring\tDate and time of the most recent definition change.\nResponse\tReason\n200 OK\tSuccess. Review example response.\n400 Bad Request\tInvalid request\n403 Forbidden\tFailed to pass authorization.\n500 Server Error\tInternal error", 2)
("GET /messaging/v1/sms/definitions/{definitionKey}/queue\n\nRetrieves metrics for the messages associated with a send definition, including messages that haven't been processed yet.\n\nName\tType\tDescription\ndefinitionKey\tstring\tRequired. The unique identifier of the definition.\n\nThis example checks the queue depth and age of the oldest record that hasn't been processed. If you set a definition to inactive and continue to send message requests to it, the count and age increase.\n\nIf the request is successful, the response includes a unique ID for the request. It also includes the number of records that are waiting to be processed in the queue and the age of the oldest unprocessed record in the queue.", 2)
('DELETE /messaging/v1/sms/definitions/{definitionKey}/queue\n\nDeletes the queue for a send definition. The send definition must be inactive.\n\nName\tType\tDescription\ndefinitionKey\tstring\tRequired. Unique identifier of the definition.\n\nIn your DELETE request, include the definition key in the URL path.\n\nIf the request is successful, the API returns a request ID and the status of the request.', 2)
("GET /messaging/v1/sms/messages/?type=notSent\n\nGets a paginated list of messages that were not sent, ordered from oldest to newest.\n\nName\tType\t\tDescription\ntype\tstring\tRequired\tOnly notSent is supported.\n$pageSize\tinteger\t\tNumber of messageKeys (array elements) to return per response page.\nlastEventId\tinteger\t\tEvent ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tSuccess. Review example response.\n\xa0\tlastEventID\tinteger\tEvent ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.\n\xa0\tstatusCode\tinteger\tInteger value of the reason the send did not complete. Review Send Error Codes for more information.\n\xa0\tstatusMessage\tstring\tThe reason the send did not complete. Review Send Error Codes for more information.\n\xa0\teventCategoryType\tstring\tTransactionalSendEvent event type. SMSSent indicates that the message was sent for delivery. SMSNotSent indicates that the message was not sent and includes the reason. SMSQueued indicates that the SMS has not yet been processed for sending.\n\xa0\ttimestamp\tstring\tTime the event occured in Central Standard Time (no daylight savings)\n\xa0\tdefinitionKey\tstring\tUnique identifier of the definition.\n\xa0\teventID\tinteger\tNumeric identifier of the event.\n\xa0\tmessageKey\tstring\tUnique identifier to track message send status.\n\xa0\tcontactKey\tstring\tUnique identifier for a subscriber.\n\xa0\tto\tstring\tChannel address of the recipient. For SMS, it’s the recipient's mobile address.\nResponse\tReason\n200 OK\tSuccess. Review example response.\n400 Bad Request\tInvalid request\n401 Unauthorized\tFailed to pass authorization.\n500 Server Error\tInternal error", 2)
('POST /messaging/v1/sms/messages/{messageKey}\n\nSends a message to a single recipient using a send definition.\n\nName\tType\tDescription\nmessageKey\tstring\tA unique identifier that you can use to track the status of the message. The key can contain up to 100 characters. There are no character restrictions. The message key that you provide must be unique among all of the keys that have been used in your Business Unit over the prior 72 hours.\nName\tType\tDescription\ndefinitionKey\tstring\tRequired. The ID of the send definition.\nrecipient\tobject\tRequired. An object that contains parameters and metadata for the recipient, such as send tracking and personalization attributes. If this object is present in the request, the recipients array (which is used to send messages to multiple recipients) can’t be included in the request.\nrecipient.contactKey\tstring\tRequired. A unique identifier for the subscriber. You can create a contact key at send time if the contact isn’t already in Marketing Cloud Engagement.\nrecipient.to\tstring\tRequired. The phone number of the recipient.\nrecipient.attributes\tobject\tPersonalization information for the recipient, written as key-value pairs. The attributes must match existing profile attributes, content attributes, or triggered send data extension attributes.\ncontent.message\tstring\tAn override for the message content in the send definition. Use substitution strings to personalize the content.\n\nThe response includes a request ID. The responses array contains a messageKey value for the message. If a message was sent successfully, the array object doesn’t contain any additional information. If a message failed to send, the response includes an errorcode that describes the reason that the message failed.', 2)
('GET /hub/v1/workflowteams/{objecttype}\n\nRetrieves a list of active workflow teams. Depending on the query string parameters, the result includes one or both filtered results: role user information for each workflow item or workflow items to which the current user is assigned.\n\nName\tType\t\tDescription\nobjecttype\tstring\tRequired\tSpecify the workflow object type to retrieve or use (@all to retrieve all workflow object types.\nassignee\tstring\t\tIf assignee=@current, this resource retrieves workflow teams that the current user is assigned to.\nextra\tstring\t\tIf extra=roleusers, then each item in the response includes role user information as a collection.\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse contains a list of workflow teams.\n\xa0\tcount\tstring\tNumber of records retrieved\n\xa0\tpage\tstring\tCurrent page number\n\xa0\tpageSize\tstring\tNumber of records on each page\n\xa0\tobjectType\tstring\tWorkflow type\n\xa0\tItems\tarray\tList of workflow items\n\xa0\tItems.id\tstring\tWorkflow Id\n\xa0\tItems.objectType\tstring\tWorkflow object type\n\xa0\tItems.name\tstring\tWorkflow name\n\xa0\tItems.description\tstring\tDescription of the workflow\n\xa0\tItems.roleUsers\tarray\tList of role users\n\xa0\tItems.roleUsers.id\tstring\tUnique Id for the association between role and users\n\xa0\tItems.roleUsers.TeamId\tstring\tTeam Id the role user is associated with\n\xa0\tItems.roleUsers.roleDefinitionId\tstring\tRole definition Id\n\xa0\tItems.roleUsers.roleDefinitionName\tstring\tRole definition name\n\xa0\tItems.roleUsers.employeeId\tstring\tId of the user assigned to the role\n\xa0\tItems.roleUsers.employeeName\tstring\tName of the user assigned to the role\n\xa0\tItems.roleUsers.roleId\tstring\tId of the role\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\t404 Not Found\n\xa0\tmessage\tstring\tNo workflow teams found for workflow object type: [workflowObjectType]\n\xa0\terrorcode\tstring\tError code for the exception (30003)', 3)
('DELETE /hub/v1/workflowitems/{workflowItemId}/roles/{workflowRoleInstanceId}/Users/{userId}\n\nRemoves a user assigned to a workflow role.\n\nName\tType\t\tDescription\nworkflowRoleInstanceId\tstring\tRequired\tId of the workflow role instance record\nworkflowItemId\tstring\tRequired\tId of the workflow item\nuserId\tstring\tRequired\tId of the user to be removed\nStatus\tName\tType\tDescription\n204\t\xa0\t\xa0\t204 No Content\n\xa0\tmessage\tstring\tValue is a required field.\n\xa0\terrorcode\tstring\tError code for the exception (10002)\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\t404 Not Found\n\xa0\tmessage\tstring\tThe WorkflowRoleInstanceUser isn’t active, so it can’t be deleted.\n\xa0\terrorcode\tstring\tError code for the exception (30003)\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\t403 Unauthorized\n\xa0\tmessage\tstring\tInsufficient Privileges.\n\xa0\terrorcode\tstring\tError code for the exception (20002)', 2)
('POST /hub/v1/workflowitems/{workflowItemId}/roles/{workflowRoleI...\n\nCreates a user role to assign to a workflow role.\n\nName\tType\t\tDescription\nworkflowRoleInstanceId\tstring\tRequired\tId of the workflow role instance.\nworkflowItemId\tstring\tRequired\tId of the workflow item\nName\tType\t\tDescription\nuserId\tstring\tRequired\tId of the user to be added\nuserName\tstring\tRequired\tUsername of the user to be added\nStatus\tName\tType\tDescription\n200\t\xa0\t\xa0\tResponse contains a list of workflow teams just created.\n\xa0\tworkflowRoleInstanceUserId\tstring\tId of the newly created record in WorkflowRoleInstanceUser table\n\xa0\tworkflowItemId\tstring\tId of the workflow item\n\xa0\tworkflowRoleInstanceId\tstring\tId of the WorkflowRoleInstance record\n\xa0\tuserId\tstring\tId of the user\n\xa0\tmemberId\tstring\tMID the user belongs to\n\xa0\tenterpriseId\tstring\tEID the user’s MID belongs to\n\xa0\tmodifiedBy\tstring\tMemberId that created the record\n\xa0\t\xa0\t\xa0\t\xa0\n400\t\xa0\t\xa0\t400 Bad Request\n\xa0\tmessage\tstring\tUserId is required.\n\xa0\terrorcode\tstring\tError code for the exception (10002)\n\xa0\t\xa0\t\xa0\t\xa0\n403\t\xa0\t\xa0\t403 Unauthorized\n\xa0\tmessage\tstring\tInsufficient Privileges.\n\xa0\terrorcode\tstring\tError code for the exception (20002)\n\xa0\t\xa0\t\xa0\t\xa0\n404\t\xa0\t\xa0\t404 Not Found\n\xa0\tmessage\tstring\tThe UserId doesn’t exist, so the role user can’t be added.\n\xa0\terrorcode\tstring\tError code for the exception (30003)', 2)
('POST /hub/v1/workflowitems/{workflowItemid}/transitions\n\nTransitions the workflow item associated to an approval item from one state to another. For example, a workflow item in Draft state moves to Submitted via the Submit transition.\n\nName\tType\t\tDescription\nworkflowItemId\tstring\tRequired\tId of the workflow item\nName\tType\t\tDescription\ntransitionid\tstring\tRequired\tId for the transition\noverrideNotificationId\tstring\t\tAn override notification of 9 sends workflow notifications upon transition. Currently, the only possible value is 9.\nStatus\tName\tType\tDescription\n400\t\xa0\t\xa0\t400 Bad Request\n\xa0\tmessage\tstring\tWorkflowItemId must be a number greater than zero.\n\xa0\terrorcode\tstring\tError code for the exception (10003)', 2)
('ContainerID\nName\tData Type\tDescription\nAPIObject\tAPIObject\tCommon base type that other types within the API are inherited from.', 2)
('Rate Limiting\n\nIf API calls from an account negatively impact system performance, Marketing Cloud Engagement temporarily throttles subsequent SOAP API calls from that account. The throttling rate is variable depending on the severity of the impact.\n\nIf your account is throttled, API requests produce HTTP 500 error messages until the issue is resolved. You can contact your Account Executive for more information about the issues that are causing your requests to be throttled.', 2)
('Getting Started\n\nAMPscript is an interpreted scripting language for Marketing Cloud Engagement. With AMPscript, you can integrate the data in your customer database with your marketing content. This tight integration enables your Marketing team to send highly personalized messages using all of the communication channels that Marketing Cloud Engagement supports, including email, SMS, and mobile. You can also use it to create customized landing pages and microsites. When you send messages or deploy CloudPages that contain AMPscript, the AMPscript code is executed on the Marketing Cloud Engagement server when the message is sent or when the landing page loads.\n\nThis guide contains basic usage information for AMPscript. To see reference content for AMPscript functions, click the Reference tab.', 3)
("Get Started with Einstein Content Selection REST API\n\nUse this API to manage Einstein Content Selection assets, profiles, and configuration.\n\nUse the API for use cases that aren't possible using the Einstein Content Selection user interface or the CSV file batch import option.\n\nA sports news service now can add content to Einstein Content Selection every time a new story is posted to its site.\nA marketer can push assets from a digital asset management platform to Einstein Content Selection using the API.\nUsers can update subscriber profiles in Einstein Content Selection at the moment they change their attribute values, such as a location change or a preferred product category change.\n\nSee Also\n\nSalesforce Help: Einstein Content Selection\n\nRights of ALBERT EINSTEIN are used with permission of The Hebrew University of Jerusalem. Represented exclusively by Greenlight.", 2)
("Get Started with Engagement Mobile SDK\n\nEngagement Mobile SDK is a framework designed to allow future enhancements to performance, developer experience, functionality, and troubleshooting. Formerly known as Mobile SDK, it now unites two modules, MobilePush and Salesforce Data Cloud. This evolutionary step is more modular and extensible, allowing you to choose the specific functionality that you need.\n\nBy using a single set of SDK methods and sharing Analytics and Identity, your implementation is streamlined across Salesforce. Events tracked within MobilePush can be used in Salesforce Data Cloud, and vice versa. The SDK also supports Template events, which are predefined schemas that you can implement to track your customers’ actions in your app. Use them to trigger in-app messages, and enter a customer into a Journey based on their activity within your mobile app.\n\nAndroid requires a minimum API version of 21\niOS requires a minimum deployment target of 10.0\nFor the MobilePush Module, see:\nMarketing Cloud Engagement SDK Android\nMarketing Cloud Engagement SDK iOS\nFor the Salesforce Data Cloud Module, see Engagement Mobile SDK.\n\nIf implementing both the MobilePush and Data Cloud modules, there are a few considerations while implementing the SDK during the initialization, and device and contact registration.\n\nInitialization\n\nFrom MobilePush v8.0.0 onwards, if you're also implementing the Data Cloud module, add the cdpModuleConfig along with the pushModuleConfig in the configure method.\n\nAndroid code example\n\niOS code example\n\nDevice and Contact Registration\n\nFrom MobilePush v8.0.0 onwards, if you're also implementing the Data Cloud module, add the specific module information to the setProfileID and setProfileAttribute methods.\n\nAndroid code sample\n\niOS code sample\n\nSalesforce Help: Mobile Push", 2)
('AMPscript Function Reference\n\nAMPscript is a scripting language for Marketing Cloud Engagement. With AMPscript, you can integrate the data in your customer database with your marketing content. This integration helps you send highly personalized messages across the communication channels that Marketing Cloud Engagement supports, including email, SMS, and mobile. You can also use it to create customized landing pages and microsites.\n\nThis document contains reference information for AMPscript functions. For an overview of AMPscript syntax, click the Guides tab.', 3)
('AMPscript Contact Functions\n\nUse the AMPscript Contact functions to interact with contacts in Marketing Cloud Engagement.\n\nThere’s only one function related to managing contacts. You can use UpsertContacts() function to create or update contact records.', 2)
('AMPscript Data Extension Functions\n\nUse the AMPscript Data Extension functions to create data extensions, retrieve data from data extensions, and modify data in data extensions.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nClaimRow()\tReturns the first unclaimed row from a data extension.\nClaimRowValue()\tSearches a data extension for an unclaimed row and returns a value from that row.\nDataExtensionRowCount()\tReturns the number of rows in a data extension.\nDeleteData()\tDeletes rows from a data extension in CloudPages, microsites, landing pages, and SMS messages.\nDeleteDE()\tDeletes rows from a data extension in an email.\nExecuteFilter()\tExecutes a data filter and returns an unordered rowset that contains the results.\nExecuteFilterOrderedRows()\tExecutes a data filter and returns an ordered rowset that contains the results.\nInsertData()\tInserts rows into a data extension in CloudPages, microsites, landing pages, and SMS messages.\nInsertDE()\tInserts rows into a data extension in emails.\nField()\tReturns a specific field from a data row.\nLookup()\tReturns a value from a data extension.\nLookupOrderedRows()\tReturns rows from a data extension sorted in ascending or descending order (case-insensitive).\nLookupOrderedRowsCS()\tReturns rows from a data extension sorted in ascending or descending order (case-sensitive).\nLookupRows()\tReturns an unordered rowset from a data extension (case-insensitive).\nLookupRowsCS()\tReturns an unordered rowset from a data extension (case-sensitive).\nRow()\tReturns a row from a rowset or array.\nRowCount()\tReturns the number of rows in a rowset or array.\nUpdateData()\tUpdates data in a data extension in CloudPages, microsites, landing pages, and SMS messages.\nUpdateDE()\tUpdates data in a data extension in emails.\nUpsertData()\tUpserts data in a data extension in CloudPages, microsites, landing pages, and SMS messages.\nUpsertDE()\tUpserts data in a data extension in emails.', 2)
('AMPscript Date and Time Functions\n\nUse the AMPscript Date and Time functions to retrieve, transform, and display times and dates.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nDateAdd()\tAdds a specified time value to a date.\nDateDiff()\tReturns the difference between two dates or times.\nDateParse()\tReturns a DateTime object from a date string.\nDatePart()\tExtracts a date part from a date or timestamp string.\nFormatDate()\tFormats a string as a date value.\nGetSendTime()\tReturns a timestamp for the beginning or end of a send.\nLocalDateToSystemDate()\tConverts a local datetime string to the system time.\nNow()\tReturns the current system timestamp.\nStringToDate()\tConverts a date string to a .NET datetime object.\nSystemDateToLocalDate()\tConverts the system time to a local datetime string.', 2)
('AMPscript Encryption Functions\n\nUse the AMPscript encryption functions to encrypt or encode data.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nDecryptSymmetric()\tDecrypts encrypted data using the supplied algorithm and encryption values.\nEncryptSymmetric()\tEncrypts plain text data using the supplied algorithm and encryption values.\nGetJwt()\tCreates JSON Web Tokens.\nGetJwtByKeyName()\tCreates JSON Web Tokens.\nMD5()\tConverts a string to a 128-bit hexadecimal MD5 hash.\nSHA1()\tConverts a string to a 160-bit hexadecimal SHA-1 hash.\nSHA256()\tConverts a string to a 256-bit hexadecimal SHA-2 hash.\nSHA512()\tConverts a string to a 512-bit hexadecimal SHA-2 hash.', 2)
('AMPscript HTTP Functions\n\nUse the AMPscript HTTP functions to retrieve and transform web data.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nHttpGet()\tReturns the content from a specified URL.\nHttpPost()\tSends data to a URL using the POST method.\nHttpPost2()\tSends data to a URL using the POST method with additional error handling.\nIsChtmlBrowser()\tReturns a value that indicates if a device’s user agent is a CHTML browser.\nRedirectTo()\tCreates a link using data from an attribute, data extension field, or variable.\nRequestHeader()\tRetrieves the header from an HTTP request for a landing page.\nUrlEncode()\tModifies a string to only include characters that are safe to use in URLs.\nWrapLongURL()\tReturns a shortened URL when provided with a long URL.', 2)
('AMPscript Math Functions\n\nUse the math AMPscript functions to perform mathematical operations on numeric values.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nAdd()\tReturns the sum of two numbers.\nDivide()\tReturns the result of dividing the first parameter by the second parameter.\nMod()\tReturns the remainder after dividing the first parameter by the second parameter.\nMultiply()\tReturns the product of two numbers.\nSubtract()\tReturns the result of subtracting the second parameter from the first parameter.', 2)
('Microsoft Dynamics CRM Integration AMPscript Functions\n\nUse the Microsoft Dynamics CRM AMPscript functions to interact with data in a Microsoft Dynamics CRM instance that is integrated with Marketing Cloud Engagement.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nAddMscrmListMember()\tAdds a record to a Microsoft Dynamics CRM marketing list.\nCreateMscrmRecord()\tCreates a record in a Microsoft Dynamics CRM entity.\nDescribeMscrmEntities()\tReturns the logical and display names of all Microsoft Dynamics CRM entities.\nDescribeMscrmEntityAttributes()\tRetrieves information about the attributes of a Microsoft Dynamics CRM entity.\nRetrieveMscrmRecordsFetchXml()\tReturns the attributes specified in a Fetch XML query.\nRetrieveMscrmRecords()\tRetrieves data from Microsoft Dynamics CRM entities.\nSetStateMscrmRecord()\tSets the state and status of a Microsoft Dynamics CRM record.\nUpdateMscrmRecords()\tUpdates one or more records in a Microsoft Dynamics CRM entity.\nUpsertMscrmRecord()\tUpserts a Microsoft Dynamics CRM record.', 2)
('AMPscript Functions for Salesforce Sales Cloud and Service Cloud\n\nUse the Salesforce AMPscript functions to interact with data in Salesforce Sales Cloud and Service Cloud.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nCreateSalesforceObject()\tCreates a record in a Sales Cloud or Service Cloud object.\nLongSfid()\tReturns an 18-character Salesforce ID when provided with a 15-character ID.\nRetrieveSalesforceJobSources()\tReturns a rowset that contains information about a send.\nRetrieveSalesforceObjects()\tReturns a rowset with that contains data that matches the criteria you specify.\nUpdateSingleSalesforceObject()\tUpdates a record in a Salesforce object.', 2)
('AMPscript Site Functions\n\nUse the functions to interact with site content in Marketing Cloud Engagement, such as CloudPages and microsites.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nAuthenticatedEmployeeId()\tReturns the employee ID of the current Marketing Cloud Engagement user.\nAuthenticatedEmployeeNotificationAddress()\tReturns the email address of the current Marketing Cloud Engagement user.\nAuthenticatedEmployeeUserName()\tReturns the username of the current Marketing Cloud Engagement user.\nAuthenticatedEnterpriseID()\tReturns the enterprise ID of the current authenticated landing page user.\nAuthenticatedMemberID()\tReturns the member ID of the authenticated landing page user.\nAuthenticatedMemberName()\tReturns the member name of the authenticated landing page user.\nCloudPagesURL()\tReturns a CloudPages URL with an encrypted query string.\nIsNullDefault()\tLets you create default values for empty fields in Smart Capture forms.\nLiveContentMicrositeUrl()\tReturns a link to view live content on a microsite.\nMicrositeUrl()\tReturns a microsite URL with an encrypted query string.\nQueryParameter()\tRetrieves a value from a URL query string.\nRedirect()\tRedirects landing page visitors to a different URL.\nRequestParameter()\tReturns the value of a parameter from a form field or landing page URL parameter.', 2)
('AMPscript SMS Functions\n\nUse the SMS AMPscript functions to manage SMS conversations with your contacts.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nCreateSmsConversation()\tCreates an SMS conversation.\nEndSmsConversation()\tEnd an active SMS conversation.\nSetSmsConversationNextKeyword()\tSets the keyword in an SMS conversation.\nMsg()\tReturns the body of an incoming message.\nNoun()\tReturns a word from an incoming message based on its position.\nNouns\tReturns all of the message content after the keyword in an incoming message.\nVerb\tReturns the keyword from an incoming message.\nMMS_Content_URL()\tReturns the URL of a content item from an inbound MMS message.', 2)
('AMPscript API Functions\n\nUse the AMPscript API functions to interact with the Marketing Cloud Engagement SOAP API.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nAddObjectArrayItem()\tAdds an object to an array in a Marketing Cloud Engagement API object.\nCreateObject()\tCreates an API Object.\nInvokeCreate()\tInvokes the Create method on an API Object.\nInvokeDelete()\tInvokes the Delete method on an API Object.\nInvokeExecute()\tInvokes the Execute method on an API Object.\nInvokePerform()\tInvokes the Perform method on an API Object.\nInvokeRetrieve()\tInvokes the Retrieve method on an API Object.\nInvokeUpdate()\tInvokes the Update method on an API Object.\nSetObjectProperty()\tSets a value for an object created by the CreateObject() function.', 2)
('AMPscript Social Functions\n\nUse the AMPscript Social functions to interact with the Social Forward feature in Marketing Cloud Engagement.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nGetPublishedSocialContent()\tReturns content to share on a social media site.\nGetSocialPublishUrl()\tReturns HTML code for sharing a content region on a supported social network.\nGetSocialPublishUrlByName()\tReturns HTML code for sharing a content region on a supported social network.', 2)
('AMPscript String Functions\n\nUse the AMPscript string functions to display and manipulate strings.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nChar()\tReturns a character when passed an ASCII character code.\nConcat()\tConcatenates strings of text.\nFormat()\tFormats a string in the specified format.\nIndexOf()\tReturns the position at which a substring occurs within a string.\nLength()\tReturns the number of characters in a string.\nLowercase()\tReturns the provided string using only lowercase letters.\nProperCase()\tReturns specified string with the first letter of each word capitalized.\nRegExMatch()\tSearches for a pattern in a string using a regular expression.\nReplace()\tReplaces every occurrence of one substring with a different substring.\nReplaceList()\tReplaces one or more substrings with another string.\nStringToHex()\tConverts each character in a string to its hexadecimal equivalent.\nSubstring()\tReturns a portion of a string, beginning at a specified character position.\nTrim()\tRemoves white space from the beginning and end of a string.\nUppercase()\tReturns the provided string using only uppercase letters.', 2)
('AMPscript Utility Functions\n\nUse the AMPscript utility functions to perform several different types of tasks. The utility functions evaluate conditions, format numbers, output text, and more.\n\nThis section contains information about these AMPscript functions.\n\nFunction Name\tDescription\nAttributeValue()\tReturns the value of an attribute.\nDomain()\tReturns the domain part of an email address.\nEmpty()\tTests to see if a variable has a value.\nFormatCurrency()\tFormats a number as a currency value.\nFormatNumber()\tFormats a number as a numeric type.\nGuid()\tReturns a Globally Unique Identifier (GUID).\nIif()\tReturns one parameter if a condition is true, and a different parameter if it’s false.\nIsEmailAddress()\tTests whether an email address is well formed.\nIsNull()\tTests whether the value of a variable or function is null.\nIsPhoneNumber()\tTests whether the supplied parameter is a valid North American phone number.\nOutput()\tReturns the result of an AMPscript function.\nOutputLine()\tReturns the result of an AMPscript function followed by a newline character.\nRaiseError()\tRaises an error and stops the processing of an email job.\nRandom()\tReturns a random number within a defined range.\nv()\tOutputs the value of a variable.', 2)
('ContentBlockbyId\n\nContent Builder の指定された保存コンテンツブロックまたはコードスニペットに含まれているコンテンツ (画像ブロック種別を含む) を返します。これらの関数では、メールメッセージのみがサポートされています。メールまたはモバイルメッセージのテキストのみの部分 (送信者アドレス、送信者名、件名行など) では、コードスニペットブロックを参照します。\n\nContentBlockbyId(1, 2, 3, 4, 5)\n\n序数\t型\t\t説明\n1\tnumeric\t必須\t返すコンテンツブロックの ID\n2\tstring\t\t開始するインプレッション領域の名前\n3\tboolean\t\tシステムが指定のコンテンツ領域を特定できない場合や、無効なコンテンツ領域を返す場合に関数でエラーを返すかどうかを決定します。値が true の場合、エラーを返します。値が false の場合、エラーを返しません。デフォルトは true です。\n4\tstring\t\tエラーが発生した場合に返すデフォルトのコンテンツ。デフォルトは空の文字列です。\n5\tnumeric\t\t呼び出しのステータスを返す出力パラメーター。値が 0 の場合、関数でコンテンツ領域が見つかり、コンテンツが正常に表示されたことを示します。値が -1 の場合、コンテンツがないか、無効なコンテンツ領域であることを示します。\n\nシステムは、コンテンツ領域 384201 のコンテンツを返します。', 2)
('Command Line Interface\n\nUse the following commands to build or preview your static site.\n\nlwr build\nlwr dev\nlwr start|preview\n\nThese commands are available via the npm Registry.', 3)
('Community\n\nAt Salesforce Commerce Cloud, we want to encourage our developer community to connect, share, and collaborate—whether that’s through official or unofficial channels!\n\nThrough official channels, Salesforce employees can speak directly about Salesforce products, procedures, and policy. When Salesforce employees participate in the “unofficial” community, nothing they say or do can be endorsed by Salesforce. For example, product announcements or positioning statements can only be made through official channels.\n\nOur official channels include:\n\nTrailblazer Community\nIdea Exchange for Commerce\nPartner Community\n\nAlongside official channels, there’s also the Salesforce B2C Commerce Cloud “Unofficial” Slack community. It was created by Commerce Cloud users a few years ago and has steadily grown over the years.\n\nThe “Unofficial” Slack is a place for developers to work together to solve the problems they encounter on a daily basis. It also gives members a place to discuss Salesforce B2C Commerce in a free and open environment. It’s run independently from Salesforce, with its own administrators and Terms of Use.\n\nWith the acquisition of Slack, Salesforce provides sponsored access to features like expanded history. Beyond this sponsorship arrangement, Salesforce has no other involvement in how the community is run. The community maintains full independence from Salesforce.\n\nJoin the community today! Anyone can join in one of two ways:\n\nSomeone who is already in the community can extend an invitation to you.\nComplete this Google Form to request access.\n\nYou don’t have to be affiliated with a Commerce Cloud customer or partner to join.\n\nSee more details on joining and getting started on GitHub.\n\nFor urgent issues that require timely resolution, contact Salesforce Support.', 5)
('Script Programming\n\nUse B2C Commerce JavaScript to customize your ecommerce storefront application.\n\nFor details on specific B2C Commerce Script API, see the B2C Commerce API documentation.\n\nUse B2C Commerce JavaScript to:\n\nAdd new calculations and logic to business processes\nCreate business objects (data)\nCall web services\nIntegrate back-end systems\nProcess XML data\nShare information across users\n\nUse client-side processing to:\n\nValidate user input (for example, checking values entered in forms)\nPrompt users for confirmation and showing error or informational boxes\nConditionalize HTML\nPerform other functions not requiring information from the server\n\nB2C Commerce JavaScript is based on Rhino JavaScript. Multiple language versions are supported. The active compatibility mode determines the language version. Compatibility modes earlier than 21.2 use the ECMAScript 5 language version. Compatibility modes 21.2 or later enable the latest language version that includes some ECMAScript 6 constructs. See Compatibility Mode Changes for details.\n\nB2C Commerce supports the following:\n\nMozilla extensions up to JavaScript 1.8\nECMAScript for XML (E4X)\nOptional type specification support from JavaScript 2.0/ECMA 4th edition proposal and ActionScript, as in the following examples:\nlet a: String;\nlet p: dw.catalog.Product;\nNonstandard behavior for older compatibility modes.', 2)
("Automate Feed Import of Active Data\n\nYou can use the ImportActiveData pipelet to automate the import of active data feeds into an instance, either via a job or a pipeline.\n\nIf you are testing data on a Staging instance, sometimes you must import extra custom attributes not included in the Production instance for testing purposes. In this case, you must rebuild the product index after import. Incremental indexing doesn't automatically rebuild based on imported feed data.\n\nIf you are implementing feed import in an existing system, you can easily edit a copy of your existing product import pipelines to automate feed import. If you are creating a project, we recommend using the Simple Feed Integration project as a starting point for product and active data feeds. This project is available in the code library.", 2)
("Customer Service Center\n\nThe Customer Service Center module lets you create and search for orders and customers as well as view and modify order and customer data. You can also customize Customer Service Center behavior and appearance to meet your business needs.\n\nCustomer Service Center is turned off by default. All users (including administrators) must have permissions set in Business Manager to be able to use the Customer Service Center module.\n\nDepending on your permission, this module lets you:\n\nSearch for orders\nCreate orders, including:\nAdjust prices on individual items, shipping cost, or entire orders\nEnter coupon code to apply to a new order\nSpecify shipping and billing address\nSearch for products and refine the quantity in an order\nSearch for customers\nCreate customers\nCreate an order for a customer\nView a customer's orders\nView and modify customer data\n\nYou can also customize Customer Service Center to modify the behavior and appearance of its business logic and user interface.\n\nBusiness logic, through Shop API hooks. For example, payment processing or hosted payment pages customization\nAreas of the CSC UI by modifying the JSON for those areas in Business Manager\n\nYou can use existing B2C Commerce capabilities and integrations in Customer Service Center using B2C Commerce Soap APIs and Open Commerce API (OCAPI) hooks. For example, Payment Service Providers and Order Calculation.", 2)
("GetFilesFromDirectory.ds\n\nReview the GetFilesFromDirectory.ds referenced script files when scheduling inventory imports.\n\nThis code is provided as a sample. It isn't a supported part of the SiteGenesis application.", 2)
("EndFileLog.ds\n\nReview the EndFileLog.ds referenced script files when scheduling inventory imports.\n\nThis code is provided as a sample. It isn't a supported part of the SiteGenesis application.", 2)
('Merchandise the No Results Page\n\nAdd custom selected content to the No Results page.\n\nThe following example describes how to merchandise the no results page by changing an existing SiteGenesis content that already appears on the no results page. In addition to what is described here, you can also add links to other catalogs or seasonally appropriate products, and you can embed graphic files within a content asset.\n\nIn UX Studio, open the nohits.isml templates in the SiteGenesis Storefront Core cartridge.\n\nLocate lines 27–32 in the text. This is where SiteGenesis shows the search results page.\n\nLocate line 50–52. This is where SiteGenesis shows the noresults-help content asset.\n\nSelect site > Merchant Tools > Content > Content Assets for the SiteGenesis site.\n\nOpen the noresults-help content asset.\n\nModify this file as follows:\n\nChange:\n\nTo:\n\nOpen the storefront site for the SiteGenesis application and search for GADZUK.\n\nThe no results page contains the new text.', 2)
('Get Started\n\nB2B stores on Lightning Web Runtime (LWR) deliver blazing-fast digital experiences to your customers and bring you the power and flexibility of the lightweight and composable Lightning Web Components (LWC) programming model. For more information, see Lightning Web Runtime.\n\nIf your B2B storefront uses the Aura Components programming model, switch to the B2B Commerce (LWR) template. Don’t worry about recreating a store from scratch. Your investment in Aura makes migration as simple as refactoring and replacing certain UI components. To get started, see Key Differences.\n\nWhen you create a store, you can select either a B2B or a B2C store template built on the LWR (Lightning Web Runtime) platform. If your org was enabled for Commerce before Spring ’23, you can also select a B2B store template built on the Aura platform. We recommend that you select the B2B LWR template for new stores and consider migrating existing B2B stores based on Aura to LWR.', 3)
('Create a Store with the B2B Commerce (LWR) Template\n\nTo migrate your store from B2B Commerce Aura to LWR, create a store using the B2B Commerce (LWR) template. The preparation you do before migration can take place in your B2B Commerce Aura store, but you need a new template to complete the migration. For more information, see Create a Store Using a Template.\n\nFrom Setup, in the Quick Find box, enter Stores, and then select Stores.\nClick Create a Store.\nFrom the template options, select B2B Commerce (LWR), and then click Get Started.\n\nEnter a Store Name and URL.\nClick Create.\n\nYour new LWR store is ready after a few minutes. You can then continue to the final steps of migration, including implementing any Lightning web components that you prepared in advance. See Migrate Your Store.', 2)
('About the Marketplace Seller Integration API\n\nThis document aims to help sellers who wish to perform the management of their items within Commerce Marketplace through a custom integration.\n\nThe following documentation focuses on the basic flow for the integration of the seller data, including example requests and responses.\n\nThe Marketplace Seller Integration API is based on the main REST API from Salesforce. For more information, see the REST API Developer Guide.\n\nTo use the API, you must authenticate using the Login and Get/Refresh Token endpoints. These endpoints include an access token in the response that you can supply as a parameter to make authorized requests to the other endpoints. For step-by-step instructions, see the authorization instructions for the REST API.\n\nTo ensure availability and protect from denial of service attacks, requests to the API are rate limited. For details, see the Limits page in the REST API Developer Guide.', 3)
('commerce_inventory.InventoryCheckItemAvailability\n\nGets product id.\n\nType\tDescription\nID\tproduct id\n\nGets on hand.\n\nType\tDescription\nDouble\tthe on hand\n\nGets available to fulfill.\n\nType\tDescription\nDouble\tavailable to fulfill\n\nGets available to order.\n\nType\tDescription\nDouble\tavailable to order\n\nGets location source id.\n\nType\tDescription\nID\tlocation source id.\n\nGets inventory source type Possibles values LOCATION or LOCATION_GROUP otherwise an error will be return\n\nType\tDescription\nString\tlocation source id\n\nGets quantity to check\n\nType\tDescription\nDouble\tquantity to check.\n\nGets inventory dimension Possibles values ON_HAND, AVAILABLE_TO_FULFILL, AVAILABLE_TO_ORDER otherwise an error will be return\n\nType\tDescription\nString\tinventory dimension\n\nGets is available.\n\nType\tDescription\nBoolean\tis available.\n\nSets Is Available\n\nParam\tDescription\nIs\tAvailable\n\nGets error message\n\nType\tDescription\nString\terror message.\n\nSets error message\n\nParam\tDescription\nerror\tmessage', 2)
('commerce_inventory.InventoryLevelsRequest\n\nGets item inventory level requests.\n\nType\tDescription\nSet\titem inventory level requests\n\nGets inventory location source type.\n\nType\tDescription\nString\tinventory location source type', 2)
('OCAPI 23.2: はじめに\n\nOpen Commerce API (OCAPI) によって、HTTP リクエストと HTTP レスポンスを使用してリソースにアクセスできます。各リソースは一意の URL でアドレス指定されており、URL には API バージョンが含まれています。データは、リクエストパラメーターまたはヘッダーパラメーターを使用して、あるいは定義された構造をもつ JSON ドキュメントとしてリクエストボディ内で転送されます。OCAPI は複数の API に分類されます。Shop API では、クライアントは店舗顧客として、または顧客の代わりに買い物を行うエージェントとして、システムと対話します。Data API は、システムリソースへのアクセスの作成/読み取り/更新/削除を行うために使用します。そして、Meta API は、カスタム属性を含む Open Commerce API の形式的記述を取得するために使用します。API の使用を開始する前に、次のステップを実行することをお勧めします:\n\nリソースのリクエストに使用する HTTP メソッドおよびレスポンスで使用される HTTP ステータスコードとフォールトを読むこと。\nすべてのリクエストにおいて、クライアント ID が必須です。お使いのアプリケーションクライアント用の、クライアント ID の取得を読むこと。\nリクエストで使用する URL スキーマを確認すること。\nデータの整合性を保つために使用するリソース状態のフレームワークを読むこと。\nグローバルに、あるいは 1 つのサイトにリソースの使用を認可 するため、Open Commerce API 設定の構成の必要性について学ぶこと。\n\n3 つの API は以下の目的で使用します:\n\nShop API を使用して、商品とカタログのデータ、画像、推奨項目、および価格またはプロモーションなどの公開されている店舗情報にアクセスします。Shop API を使用する場合は、ゲスト顧客のコンテキストでシステムと対話する場合がほとんどなため、認証は必要ありません。しかし、他のすべてのリクエストと同様に、システムは Open Commerce API 設定をチェックして、指定されたリソースの使用が、提供されたクライアント ID に許可されているかどうかを検証します。\n店舗顧客としてシステムと対話するには、登録済み顧客またはゲスト顧客のコンテキストで Shop API を使用します。たとえば、顧客固有のデータにアクセスする場合や、買い物カゴを作成して送信する場合などです。各リクエストで渡される JWT を取得することによって、顧客を認証します。\n店舗顧客の代わりにエージェントとしてシステムと対話するには、Business Manager ユーザーのコンテキストで Shop API を使用します。たとえば、顧客固有のデータにアクセスする場合や、買い物カゴを作成して送信する場合などです。各リクエストで渡される Business Manager ユーザーの OAuth トークンを取得することによって、ユーザーを認証します。システムはリクエストを許可する前に、Open Commerce API 設定 と必要な Business Manager 許可の両方をチェックします。\nData API を使用して、クーポン、顧客リスト、スロット設定、コンテンツなどのマーチャントのリソースへのアクセスまたは更新を行います。各リクエストで渡されるクライアント ID または Business Manager ユーザーの OAuth トークンを取得することによって、リクエストを認証します。\nMeta API を使用して、Open Commerce API によって提供されるリソースおよびドキュメントについての詳細にアクセスします。\n\n追加の学習資料については、以下を参照してください。\n\nOCAPI 概要ビデオ\nOCAPI 概要スライド\nOCAPI authorization and sample call overview using Postman (Postman を使用した OCAPI 認証とサンプル呼び出し概要ビデオ)\nOCAPI Performance Best Practices FAQ (OCAPI パフォーマンスベストプラクティス FAQ)\nPostman collection, environment, and OCAPI settings (Postman コレクション、環境、および OCAPI 設定) (GitHub レポジトリ)', 5)
('B2C Commerce Developer Documentation Resources\n\nThe following additional developer resources are available externally:\n\nB2C Commerce Script API\nB2C Commerce Pipelet API\nB2C Commerce Job Steps API\nAPI and Object Quotas\nB2C Commerce Import and Export Schemas\nB2C Commerce Content JSON Schemas\nLegacy Developer Documentation (PDF)\nScript Debugger API (SDAPI)\nStorefront Reference Architecture (SFRA) JavaScript\nSiteGenesis Server-side JavaScript', 3)
("Get Started with B2C Commerce Einstein API\n\nUse B2C Commerce Einstein API to send shopper profiles to the Einstein engine. You can send a single shopper's profile or you can send shopper profiles in bulk. A shopper profile includes the shopper's preferences.\n\nYou can also use B2C Commerce Einstein API to get recommendations from the Einstein engine. To help Einstein build recommendations, use the API to tell the Einstein engine when a shopper:\n\nviews a product\nviews a recommendation\nclicks a recommendation\nadds a product to their cart\n\nTo get started, configure the API to use profile data. See Set Up Einstein Profile Connector.", 2)
('B2C Commerce Einstein API の使用開始\n\nB2C Commerce Einstein API を使用して、買い物客のプロフィールを Einstein エンジンに送信します。1 人の買い物客のプロフィールを送信することも、買い物客プロフィールを一括で送信することもできます。買い物客プロフィールには買い物客の好みが含まれています。\n\nB2C Commerce Einstein API を使用して、Einstein エンジンに商品を推奨してもらうこともできます。Einstein による推奨の構築をサポートするために、API を使用して、買い物客が次のアクションをとった時点で Einstein に通知されるように設定できます。\n\n商品を表示する\n推奨商品を表示する\n推奨商品をクリックする\n商品を買い物カゴに追加する\n\n開始するには、API を構成してプロフィールデータを使用します。次を参照してください: Einstein Profile Connector の設定', 2)
('News: PWA Kit 3.0.0 现已推出，并具有模板可扩展性。要升级，请参阅升级到 v3。\n\n开始使用可组合网店\n\nB2C Commerce 的可组合网店解决方案基于两项关键技术：用于创建网店的 Progressive Web App Kit (PWA Kit) 和用于托管网店的 Managed Runtime。\n\n与所有可组合、API 驱动的技术一样，PWA Kit 和 Managed Runtime 可以与 Salesforce 或其他供应商的其他电子商务技术相结合。借助可组合网店，您可以构建满足您的确切需求并可随您的业务扩展的技术堆栈。\n\nPWA Kit 是使用 React 平台通过 JavaScript（或 TypeScript）创建网店的框架，它已成为现代 Web 开发的固定组成部分。\n\n使用 PWA Kit 框架，您可以获得：\n\n项目模板，包括 Retail React App。Retail React App 是一个可定制的网店，可实现从主页到结账的核心电子商务流程。\n一个在服务器端和客户端都工作的渲染系统 - 并处理 [hydration](https://en.wikipedia.org/wiki/Hydration_(web_development)）（将渲染从服务器传输到客户端的过程）。\n允许您将来自 Commerce API 的数据注入到您的组件的路由系统。\n用于自动化日常开发任务的实用功能和脚本。\n与 B2C Commerce API 和 Open Commerce API (OCAPI) 相集成。\n\n在框架的每个主要版本（1.0、2.0 等）普遍可用后，将提供 24 个月的安全补丁。\n\n渐进式 Web 应用程序 (PWA) 是一种网站，其用户体验包括我们通常与移动应用程序相关联的功能，包括快速加载时间、平滑渲染和无缝过渡。\n\nPWA 被称为“渐进式”是因为这些功能根据用户的设备和浏览器可以支持的内容一次添加一个（或渐进式）\n\nManaged Runtime 提供在公共云平台上部署、托管和监控 PWA Kit 网店的基础架构。使用 Managed Runtime 时，可以专注于开发网店，而不是管理服务器。\n\nManaged Runtime 遵循十二因素应用程序方法。网店由无状态构建的单一代码库提供支持，并且可以部署在可用的最高效和低成本的计算基础架构上。每个部署均完全取代之前的部署，并从头开始重新配置。\n\n最重要的是，Managed Runtime 提供与所有 Salesforce 技术相同的企业级安全性和 99.99% 的历史正常运行时间。\n\n有关更多详细信息，请参阅 Managed Runtime 概述。\n\n可组合网店工具偶尔会引用 Mobify，这是最初开发这些技术的公司的名称。Mobify 于 2020 年被 Salesforce 收购，我们仍在进行品牌重塑。\n\n欢迎开源社区对 PWA Kit 的贡献！要了解有关贡献过程的更多信息，请参阅为 PWA Kit 做贡献。\n\n如果您喜欢 PWA Kit，请考虑为 GitHub Repo 加注星标。这可以帮助其他人发现 PWA Kit！\n\n既然已经了解 PWA Kit 和 Managed Runtime 的基础知识，请浏览入门系列中的其他指南：\n\n快速入门\n创建 On-Demand Sandbox（按需沙盒）\n设置 API 访问\n设置本地环境\n推送和部署捆绑包', 2)
('B2C Commerce Einstein API 入门指南\n\n使用 B2C Commerce Einstein API 将购物者概况发送至 Einstein 引擎。您可以发送单个购物者概况，也可以批量发送购物者概况。购物者概况包括购物者偏好。\n\n您还可以使用 B2C Commerce Einstein API 获得 Einstein 引擎的推荐。要帮助 Einstein 构建推荐，请在购物者进行以下操作时使用 API 告知 Einstein 引擎：\n\n查看商品\n查看推荐\n点击推荐\n向购物车添加商品\n\n要想开始，请配置 API 使用概况数据。请参阅 设置 Einstein Profile Connector.', 2)
('News: PWA Kit 3.0.0 現已推出，並提供範本擴充性。若要升級，請參閱升級至 v3。\n\n開始使用 Composable Storefront\n\nB2C Commerce 的 Composable Storefront 解決方案以兩大技術為基礎：Progressive Web App Kit (PWA Kit) 用於建立您的網店，Managed Runtime 用於代管網店。\n\n如同所有由 API 驅動的組合式技術，PWA Kit 和 Managed Runtime 可以與 Salesforce 或其他供應商的電子商務技術結合。有了 Composable Storefront，您可以建構完全符合您需求的技術堆疊，並隨著業務發展而調整規模。\n\nPWA Kit 是一種框架，使用 React 平台以 JavaScript (或 TypeScript) 建立網店，已成為現代 Web 開發的固定工具。\n\n使用 PWA Kit 框架將可獲得：\n\n專案範本，包括 Retail React App。Retail React App 是可自訂的網店，可實作從首頁到結帳的核心電子商務流程。\n在伺服器端和用戶端皆可運作的轉譯系統，還能處理 Hydration (從伺服器端傳送轉譯到用戶端的流程)。\n可讓您從 Commerce API 將資料插入元件的路由系統。\n用於自動化例行開發任務的公用程式函式和指令碼。\n與 B2C Commerce API 和 Open Commerce API (OCAPI) 整合。\n\n在框架的每個主要版本 (1.0、2.0 等) 正式發行後 24 個月期間，將提供安全性修補程式。\n\nProgressive Web App 漸進式網路應用程式 (PWA) 是一種網站，其使用者體驗包括我們通常會在行動應用程式上體驗到的功能，包括快速載入時間、順暢轉譯、無縫轉換等。\n\n之所以被稱為「漸進式」，是因為這些功能會根據使用者裝置和瀏覽器所能支援的內容，一次一次慢慢 (或「漸進地」) 增加。\n\nManaged Runtime 提供基礎架構，讓您在公有雲端平台上部署、代管、監控 PWA Kit 網店。有了 Managed Runtime，您可以專注於開發網店，不必費心管理伺服器。\n\nManaged Runtime 遵循十二因素應用程式方法論。您的網店是由一個無狀態建構的單一程式碼庫所驅動，可以部署在可用的最高效、最低成本的運算基礎架構上。每個部署皆會完全取代先前的部署，並從頭開始重新設定。\n\n最重要的是，Managed Runtime 和所有 Salesforce 技術一樣，提供相同的企業級安全性和 99.99% 的正常運作時間記錄。\n\n如需更多詳細資訊，請參閱 Managed Runtime 概觀。\n\nComposable Storefront 工具偶爾會提到 Mobify，也就是最初開發了這些技術的公司。Salesforce 在 2020 年將 Mobify 併入旗下，目前仍在進行品牌重塑的過程。\n\n我們歡迎開源社群對 PWA Kit 做出貢獻！想進一步瞭解貢獻流程，請參閱 Contributing to PWA Kit (為 PWA Kit 做出貢獻)。\n\n如果您喜歡 PWA Kit，請考慮送顆星給 GitHub Repo。這可以幫助其他人發掘 PWA Kit 喔！\n\n這樣您就已經熟悉 PWA Kit 和 Managed Runtime 的基本知識了，請繼續探索「開始使用」系列的其他指南：\n\n快速入門\n建立 On-Demand Sandbox\n設定 API 存取\n設定您的本機環境\n推送和部署套件', 2)
('開始使用 B2C Commerce Einstein API\n\n使用 B2C Commerce Einstein API 將購物者個人資料傳送至 Einstein 引擎。您可以傳送單一購物者的個人資料，也可以大量傳送購物者個人資料。購物者個人資料包含了購物者的喜好設定。\n\n您也可以使用 B2C Commerce Einstein API，從 Einstein 引擎獲得推薦。若要協助 Einstein 建立推薦，請使用 API 在購物者採取以下動作時，告知 Einstein 引擎：\n\n檢視產品\n檢視推薦\n點擊推薦\n將產品新增至購物車\n\n若要開始使用，請設定 API 來使用個人資料。請參閱 設定 Einstein Profile Connector。', 2)
('Premiers pas avec l’API\xa0B2C Commerce Einstein\n\nUtilisez l’API\xa0B2C Commerce Einstein pour envoyer des profils d’acheteur au moteur Einstein. Vous pouvez envoyer un profil d’acheteur isolé ou plusieurs profils d’acheteur en bloc. Un profil d’acheteur inclut les préférences de cet acheteur.\n\nVous pouvez également utiliser l’API\xa0B2C Commerce Einstein pour obtenir des recommandations du moteur Einstein. Pour aider Einstein à élaborer des recommandations, utilisez l’API pour indiquer au moteur Einstein quand un acheteur\xa0:\n\naffiche un produit\naffiche une recommandation\nclique sur une recommandation\najoute un produit à son panier\n\nPour commencer, configurez l’API pour utiliser les données de profil. Voir Configurer Einstein Profile Connector', 2)
('Die ersten Schritte mit B2C Commerce Einstein API\n\nVerwenden Sie die B2C Commerce Einstein API, um Käuferprofile an die Einstein-Engine zu senden. Dabei können Sie das Profil eines einzelnen Käufers oder die Profile von mehreren Käufern im Massenversand übermitteln. Ein Käuferprofil umfasst die Präferenzen des Käufers.\n\nDarüber hinaus können Sie die B2C Commerce Einstein API auch für Empfehlungen der Einstein-Engine nutzen. Mithilfe der API können Sie Einstein bei der Erstellung von Empfehlungen unterstützen, indem Sie der Einstein-Engine mitteilen, wann ein Käufer:\n\nein Produkt ansieht\neine Empfehlung ansieht\nauf eine Empfehlung klickt\nein Produkt in den Warenkorb legt\n\nKonfigurieren Sie zunächst die API für die Verwendung der Profildaten. Siehe Einrichtung des Einstein Profile Connector.', 2)
("Guida introduttiva a B2C Commerce Einstein API\n\nUtilizzare B2C Commerce Einstein API per inviare profili acquirente al motore di Einstein. È possibile inviare un solo profilo acquirente o più profili acquirente in blocco. Un profilo acquirente include le preferenze dell'acquirente.\n\nÈ possibile utilizzare B2C Commerce Einstein API anche per ricevere suggerimenti dal motore di Einstein. Per consentire ad Einstein di generare suggerimenti, utilizzare l'API per indicare al motore quando un acquirente:\n\nVisualizza un prodotto\nVisualizza un suggerimento\nFa clic su un suggerimento\nAggiunge un prodotto al carrello\n\nPer iniziare, configurare l'API all'uso dei dati di profilo. Vedere Impostazione di Einstein Profile Connector.", 2)
('B2C Commerce Einstein API 시작하기\n\nB2C Commerce Einstein API를 사용하여 Einstein 엔진으로 구매자 프로필을 전송합니다. 단일 구매자의 프로필을 보내거나 대량으로 구매자 프로필을 보낼 수 있습니다. 구매자 프로필에는 구매자의 기본 설정이 포함됩니다.\n\n또한 B2C Commerce Einstein API를 사용하여 Einstein 엔진에서 제품 추천을 받을 수 있습니다. Einstein이 제품 추천을 만드는 데 도움이 되도록, 구매자가 다음과 같은 행동을 할 때 API를 사용하여 Einstein 엔진에 알리십시오.\n\n제품 보기\n제품 추천 보기\n제품 추천 클릭\n구매자가 카트에 제품 추가\n\n시작하려면 프로필 데이터를 사용하도록 API를 구성하십시오. 참조 Einstein Profile Connector 설정.', 2)
('Introdução à Einstein API do B2C Commerce\n\nUse a Einstein API do B2C Commerce para enviar perfis de comprador ao mecanismo do Einstein. Você pode enviar o perfil de um único comprador ou enviar perfis em massa. Um perfil de comprador inclui as preferências do comprador.\n\nVocê também pode usar a Einstein API do B2C Commerce para conseguir recomendações do mecanismo do Einstein. Para ajudar a criar recomendações, use a API para informar ao mecanismo do Einstein quando um comprador:\n\nvisualiza um produto\nvisualiza uma recomendação\nclica em uma recomendação\nadiciona um produto ao carrinho\n\nPara começar, configure a API para usar dados de perfil. Consulte Configurar o Einstein Profile Connector.', 2)
('About the Marketplace Seller Integration API\n\nEssa documentação visa auxiliar os Sellers que desejam realizar a gestão de seus itens no Commerce Marketplace via integração.\n\nA documentação a seguir irá se focar no fluxo básico para a integração de dados de Seller, exemplificando chamadas e retornos esperados.\n\nTodas as chamadas abaixo fazem parte da biblioteca padrão de APIs do ambiente Salesforce. A documentação completa se encontra em: REST API Developer Guide.\n\nPara usar a API, é preciso se autenticar usando as chamadas abaixo de Login e Get/Refresh Token e, posteriormente, utilizar as chaves geradas como tokens de autenticação em cada uma das requisições realizadas.\n\nOs dados de acesso precisam ser criados e enviados pelo Marketplace a cada seller, seguindo o passo a passo padrão da Salesforce: REST API Developer Guide - Set Up Authorization.\n\nLimites padrões de acesso às APIs da org Salesforce se aplicam. Para mais informações, acesse: REST API Developer Guide - Limits.', 4)
('Primeros pasos con API de Einstein de B2C Commerce\n\nUse API de Einstein de B2C Commerce para enviar perfiles de comprador al motor de Einstein. Puede enviar el perfil de un único comprador o puede enviar perfiles de compradores a granel. El perfil del comprador incluye las preferencias del comprador.\n\nTambién puede usar API de Einstein de B2C Commerce para obtener recomendaciones del motor de Einstein. Para ayudar a Einstein a generar recomendaciones, use la API para indicarle al motor de Einstein cuando un comprador:\n\nve un producto\nve una recomendación\nhace clic en una recomendación\nagrega un producto a su carrito\n\nPara comenzar, configure la API para usar los datos del perfil. Consulte Configure Einstein Profile Connector.', 2)
("Einstein Bots API Release Notes\n\nThe API Release Notes include updates to the Einstein Bots REST API, SDK, and channel connector framework.\n\nTo see the latest feature updates, visit Einstein Bots Release Notes.\n\nRemoved support for sending file attachments.\nUses API v5.1.0 and therefore doesn't support sending file attachments.\nConnect your channels faster with v5.0.0, which is more RESTful and simpler to use.\nThree new endpoints handle sessions instead of one.\nStart a new session\nContinue an existing session\nEnd an existing session\nBot and chat session IDs are path parameters instead of request body parameters.\nSupports bot responses with rich file attachments.\nIncludes intents and entities in the API responses.\nAPI version 5 is HATEOS-compliant.\nFirst publicly available version of the SDK and connector framework.\nEinstein Bots Java SDK integrates your client with the bot’s REST API v5.0.0 using Java-based tools and libraries.\nThe channel connector framework uses Spring Boot to connect your app to the SDK.\nA version check makes sure you’re running the latest SDK version. You always need to be running the latest SDK version.\nFirst publicly available version of the Einstein Bots API.", 8)
('Get Started with Sales Engagement\n\nTo build custom integrations with Sales Engagement and inspect cadences to answer your specific business questions, you need to understand the structure of the objects that make up a cadence and how changes to each affect the others.\n\nREQUIRED EDITIONS\nAvailable in: Lightning Experience\nAvailable with Sales Engagement, which is available for an extra cost in: Enterprise, Performance, and Unlimited Editions\n\nThe High Velocity Sales name has changed to Sales Engagement. The automation features within the product now include customer engagement tracking, chat bots, and cadences. The new name captures all the tools to use to automate processes and to engage strategically with leads and customers so that your sales team can focus on selling.\n\nA cadence is a defined series of sales outreach steps, such as phone calls, emails, and LinkedIn messages. Sales managers build cadences, and then managers or sales reps add leads and contacts to their cadences so that reps are automatically prompted to perform those outreach steps in order and on time.\n\nWhen a sales manager builds a cadence, they’re building a structure that includes several objects. These objects update dynamically while they build the cadence, when they activate the cadence, when they add targets, when targets complete steps, and when they edit an active cadence.\n\nSalesforce Help: Streamline Prospect Outreach with Cadences\nSalesforce Help: Sales Engagement\nSales Engagement Implementation Guide\nTrailhead: Sales Engagement Basics\nTrailhead: Sales Engagement for Sales Managers\nTrailhead: Sales Engagement for Sales Reps', 2)
('Get Started with Messaging for In-App\n\nWe provide a UI SDK and a Core SDK for both iOS and Android. The UI SDK gives you a ready-to-use messaging user interface. You can use the default colors, UI text, and icons, or you can customize the UI so that it looks and feels like the rest of your mobile app. The Core SDK gives you access to the lower-level APIs without any UI elements. With the Core SDK, developers can build the UI experience to their specifications. For most customers, using the UI SDK with some customizations is the best balance between implementation effort and a customized interface.\n\nIf you want to take advantage of our out-of-the-box user interface and user experience, try the Messaging for In-App UI SDK (iOS, Android). To build a UI SDK app, add the In-App Messaging view to your app. With the UI SDK, you get all the latest Messaging for In-App features built right into the user interface, including bot support, pre-chat forms, sending and receiving photos and files, push notifications, estimated wait time. In addition, you can customize the colors, the UI text, and the icons.\n\nTo create your own UI from scratch, use the Core SDK (iOS, Android), which provides you with all the basic messaging functionality without any user interface elements.\n\n\u200b\u200bThe UI SDK also includes the Core SDK.\n\nBefore setting up the SDK, review the Before You Begin content and then set up your Salesforce org to use Messaging for In-App. From there, you can get started with your iOS or Android app.\n\nTo learn more about Messaging for In-App and Web, visit our learning map.', 2)
('Messaging for In-App Reference Documentation\n\nYou can find iOS and Android reference documentation at our GitHub repositories.\n\niOS reference documentation site\nAndroid reference documentation site', 3)
('Get Started with Messaging for Web\n\nThis guide provides information about using JavaScript APIs and Lightning Web Components (LWC) to customize your Messaging for Web experience. For example, we describe how authenticated users can have a personalized conversation with an agent by using the User Verification API. We show you how to send customer data to an agent by using the Hidden Pre-Chat API and how to show an auto-response component to your customer, such as a survey. We explain how to build a custom pre-chat form with LWC. And there is so much more.\n\nTo learn more about Messaging for In-App and Web, visit our learning map in Salesforce Help.', 2)
('Messaging for Web Reference\n\nThis reference guide contains information about all the Messaging for Web APIs in JavaScript. To ensure that Messaging for Web works optimally, always republish your deployment after testing newly added features and bug fixes. To learn more about publishing a deployment, see Configure a Messaging for Web Deployment in Salesforce Help.\n\nEvent Listeners\nAuto-Response API\nPre-Chat API\nSettings API\nUser Verification API\nUtilities API', 3)
('Overview\n\nThis guide describes the Messaging object model.\n\nThe Salesforce objects described in this document are accessible using either REST or SOAP. Refer to the SOAP API Developer Guide and the REST API Developer Guide for more information.\n\nTo learn more, see Messaging in Salesforce Help.\n\nRelated developer guides:\n\nMessaging for In-App Developer Guide\nMessaging for Web Developer Guide', 3)
("Get Started with Partner Messaging\n\nPartner Messaging integrates external messaging services with Salesforce. Before Salesforce users can set up and use Partner Messaging in their orgs, Salesforce messaging partners must first enable the feature.\n\nThis guide provides steps to enable Partner Messaging. To learn more about Partner Messaging, visit our learning map in Salesforce Help.\n\nTo get started, prepare your environment before you enable Partner Messaging.\n\nVerify that you have the Digital Engagement SKU with the Partner Messaging add-on license.\nVerify that your org has the SCRT2 Integration User (sfdc_scrt2) permission set.\nVerify that you can access the GitHub repos:\nhttps://github.com/salesforce-misc/interaction-service-apis to reference the schemas for the interaction service inbound APIs and outbound events schema.\nhttps://github.com/salesforce-misc/byoc-ott-demo-app to access a sample implementation of the interactive Inbound/Outbound Message Demo UI, which you’ll set up and use to test the inbound API.\nDetermine the contact email address to use for the connected app. This person receives notifications about the connected app, such as when a Salesforce administrator views the consumer secret of the connected app. This can be your email address.\n\nYou're ready to enable Partner Messaging.", 2)
('Get Started with GraphQL API\nREQUIRED EDITIONS\nAvailable in: Enterprise, Performance, Unlimited, and Developer Editions\n\nGraphQL API is a new paradigm of sending and receiving data, offering developers a single endpoint to call for all data needed in one request. This API allows developers to interact with the Salesforce Platform through GraphQL, a standard query language for APIs and a runtime for fulfilling those queries with your data.\n\nApps that call GraphQL APIs are often much more performant than those that use traditional REST APIs. They are able to reduce round trips to the server through retrieval of all necessary data in just a single invocation.\n\nTo make your first call, use a Quick Start.\n\nTo see the GraphQL API endpoint, see API Reference.\n\nLearn more about GraphQL at graphql.org. You can also quickly get started with GraphQL API here and make calls to a Salesforce org.\n\nGraphQL API is available with Lightning Web Components (LWC). Using the GraphQL wire adapter, LWC developers can work with Salesforce data using GraphQL API while taking advantage of its extensive benefits to build web components and mobile offline apps.', 2)
("Query Multiple Objects Dynamically\n\nGraphQL API simplifies how you query records across multiple objects. You can write a query that asks for the exact fields you want in one call. Using GraphQL API to query multiple objects is more performant than making multiple Apex wire calls. Previously, you could also achieve this by calling a custom Apex controller and then pass the returned records to the getRecords wire adapter with additional parameters that request records from other objects.\n\nAdditionally, GraphQL API queries support referential integrity for references to objects and fields. You don't need to import references to objects and fields like you do with other LWC wire adapters.\n\nWhen you request records across multiple objects, you don't always know the record ID. For example, the record ID can vary depending on the record page you're viewing or the user ID can depend on the context user. To provide the record ID as a dynamic value for your query, use the variables configuration parameter.\n\nThe graphqlMultipleObjects component in the lwc-recipes repo retrieves and displays account and contact records using a single query.\n\nThis example queries all contacts related to an account and displays the contacts with record data from the User object. The query requests the Id and Name fields on the Contact object, along with the Id and Name fields on the User object.\n\nThe AccountId field on the Contact object corresponds to the ID of an account record. Use the recordId property to include the account record context for the contacts query.\n\nTo get record data about the current user, import the @salesforce/user/Id module.\n\nDisplay the records using the for:each directive.\n\nQuery Objects Examples\n\nCall Apex Methods\n\nGraphQL API Query Limitations", 2)
("Apex SDK for Slack\n\nOrganizations must evolve quickly with our customers' needs. With Slack and Salesforce, you can make everyone's work simpler, more pleasant, and more productive while enabling them with the data and services they need.\n\nApex SDK for Slack accelerates development by providing you with a collection of tools for effective collaboration and communication. To build a Slack app, you create view definitions in YAML-based files that the SDK translates to rich, interactive user interfaces using Block Kit.\n\nApex SDK for Slack empowers developers by enabling them to create apps that interact with Salesforce data from within Slack via events, shortcuts, and slash commands. Create command logic to respond to interactions in Slack. Respond to requests directly from a handler, such as responding to slash commands with a modal. You can also issue Slack API calls using Apex classes in the Slack namespace.\n\nAdditionally, Apex SDK for Slack manages the search and CRUD functionality and metadata interpretation so you can focus on your business logic and app interaction.", 2)
('Enable Slack for Salesforce Beta\n\nAccept the Beta Terms of Service so your org gets uninterrupted access to Slack connectivity. Enabling Slack for Salesforce also makes a collection of Salesforce apps for Slack available to your org.\n\nTo enable Slack for Salesforce:\n\nFrom Setup, in the Quick Find box, enter Slack, and then select Initial Slack Setup.\nReview the Terms and Conditions for enabling the beta service.\nClick to accept the terms.\n\nSee Also\n\nSalesforce Apps for Slack Release Notes\nSalesforce Apps for Slack', 2)
('GetSchema RPC Method\n\nThe GetSchema method returns the schema of an event topic using the schema ID. Use the schema to encode the payload in the Avro format of the event to publish, or to decode the payload of a received event.\n\nBecause the schema typically doesn’t change often, we recommend that you call GetSchema once and use the returned schema for all operations. If the event schema changes, for example, when an administrator adds a field to the event definition, the schema ID changes. We recommend that you store the schema ID and compare it with the latest schema ID retrieved from PublishResponse or FetchResponse. If the schema ID changes, call GetSchema to retrieve the new schema.\n\nTo get the schema ID for the SchemaRequest parameter, do one of the following.\n\nCall GetTopic. The return value of this method is TopicInfo. TopicInfo contains schema_id, which represents the latest schema. We recommend that you publish events with the latest schema.\nFor events received from the event bus, get the schema ID from the event message in the FetchResponse, ProducerEvent.schema_id. Use this schema for deserialization. For events published to the event bus, get the schema ID from the PublishResponse.\n\nYou can still publish events with an old schema saved from an earlier GetTopic call. You use an Avro code generator to generate classes based on Avro types and deploy your app. If the event schema changes later, you can still publish and subscribe to the events as long as the schema differences are resolvable by the Avro schema resolution rules.\n\nFor more information about the fields in SchemaRequest and SchemaInfo, see the Pub/Sub API proto file.', 3)
('Get Started with Data.com API\n\nAccess the most up-to-date contact and account information. The Data.com API provides Data.com Prospector and Data.com Clean with data to add to your Salesforce organization, providing financial insights, hierarchical views of companies, and accurate contact information. The Data.com API gives you the data you need, when you need it.\n\nWhen your Data.com Prospector or Data.com Clean contract expires, Data.com features, objects, and fields will be removed from your org. To support customers’ needs around compliance and to remain a leader in trust and privacy, Salesforce removed all contact data from the Data.com service on February 1, 2021.\n\nFor more information, see Data.com Prospector and Clean Retirement.\n\nData.com Search API\nUse Salesforce Object Query Language (SOQL) to access the Datacloud objects and find contact and company records in the Data.com database. Purchase and add records to your Salesforce organization.\n\nData.com Match API\nUse the Data.com Match API to match your contact and company records with the latest Data.com records using the Data.com match engine. You can match by D-U-N-S number and other key fields. The API identifies fields from your record that differs from the matching Data.com record.\n\nData.com Purchase API\nPurchase Data.com company and contact records with the Data.com Purchase API.\n\nData.com DUNSRight API\nUse the Data.com DUNSRight Match API to match your account records with Data.com company records using the DUNSRight match engine. You can match by D-U-N-S number and other key fields. The API identifies fields from your record that differs from the matching record.', 2)
("Get Started with Communications Cloud TM Forum API\n\nTM Forum's Open APIs are technology agnostic and can be used in any digital service scenario, including B2B, Internet of Things, Smart Health, Smart Grid, Big Data, NFV, Next Generation OSS/BSS, and more.\n\nTo know more about the TM Forum Open API program and the adoption of Open APIs by companies worldwide, see Introduction to TM Forum Open APIs.\n\n\t\t\nGet Oriented\tDive In: Learn About the Set Up for Industry APIs\tDive In: Learn About the Set Up for Integrations API\nWhat is Communications Cloud?\tEnable Access to Industry APIs\tEnable Access to Integrations API\nWhat is Industry Integration Solution?\tImport Static Resources\tConnect Your Salesforce and Mulesoft Instances for Integrations API\nWhat is the Salesforce Industry API?\tAuthorization of API Using OAuth 2.0\tEnable Integrations\nWhat is the Salesforce Integrations API?\tBuild the Base URL\t\nGet a Communications Cloud Trial Org\t\t\nFrequently Asked Questions\t\t\n\t\t\nGo Deeper: Explore Communications Cloud TMF Forum APIs\tExtend Further: Learn About Customizations and Extensions\tKnow Your Resources & Get Help\nTM Forum Industry APIs\tExtend Industry APIs (using Integration Procedures & Data Raptors)\tSalesforce Industry Integrations Admin Guide\nTM Forum Integrations API\tExtend Integrations API\tCommunications Cloud Help\n\tResource Mappings\tIntegration Assets on Mulesoft\n\tCustomizations\tTrailhead: Get to Know Communications Cloud\n\t\tSee What's New in the Latest Release", 2)
('Get Started\n\nSalesforce provides these two solutions for integrating Energy and Utilities Cloud with external systems:\n\nIndustry API - Industry API are exposed on top of Energy and Utilites Cloud to enable external systems to interact with the Salesforce data models.\nIndustry Integrations - These are pre-built integration applications that enable specific Energy and Utilites Cloud processes to interact with external systems.', 2)
("Get Started\n\nSalesforce provides integration apps for integrating Financial Services Cloud with external banking systems. The integration apps are out-of-the-box integration templates with pre-built transformations that are deployed on MuleSoft. To access the integration apps, purchase a MuleSoft instance. If you already have a MuleSoft instance, you can leverage it to connect to Salesforce.\nThe integration apps are inspired by the BIAN canonical model. The BIAN designs are ‘canonical’ meaning they can be consistently interpreted by any bank in many different implementation situations. To know more about BIAN, see Introduction to BIAN.\n\nThese industry integration apps are available in MuleSoft Exchange:\n\nTo view the Financial Services Cloud integration app and its details, see MuleSoft Exchange.\nIf you don't have a MuleSoft account, you can build your integration apps by implementing the Financial Services Cloud Integrations API specification in your integration platform.\n\nUse Industry Integration Solutions in your Salesforce org to connect your Salesforce and MuleSoft instances and to automate the deployment of the Financial Services Cloud integration app in your MuleSoft instance. You can extend the app in MuleSoft AnyPoint Platform to complete your business needs.\nTo access and use the Financial Services Cloud integration app:\n\nAccept terms and enable access.\nDeploy integration assets using Industry Integration Solutions. See Industry Integration Solutions in Salesforce Help.\nExtend Integration App.\n\nAfter the integration asset is deployed, Salesforce creates a named credential for the integration instance. The named credential specifies the URL of a callout endpoint and its required authentication parameters in one definition. See Named Credentials in Salesforce Help.", 2)
('Get Started with Loyalty Management Integrations API\n\nUse Loyalty Management Integrations API to securely interact with a point of sale (POS) system to get member profile details, enroll individual members in a loyalty program, manage vouchers, and create accrual and redemption orders.\n\nLoyalty Management Retail POS API Unlocked Package: Set up your Salesforce org, install the package, and then integrate Loyalty Management with a POS system. You can then make API requests from the POS system.\nLoyalty Management Retail POS API Powered by MuleSoft: Set up Loyalty Management POS API unlocked package, enable Retail POS APIs, and then leverage your existing MuleSoft instance and connect with Salesforce.\nLoyalty Management Restaurant POS API Powered by MuleSoft: Set up Loyalty Management POS API unlocked package, enable Restaurant POS APIs, and then leverage your existing MuleSoft instance and connect with Salesforce.', 2)
('Get Started\n\nAutomotive Cloud integrations are available in MuleSoft Direct for customers to deploy to their MuleSoft instance. Customers have the flexibility to extend or customize the integrations as required. To learn more about the integrations, see Industry Integration Solutions.', 2)
('Einstein Platform Services API\n\nSalesforce is retiring Einstein Vision and Language, and your subscription will not be renewable after May 1, 2024. You can continue using Einstein Vision and Language through your Order Term.\n\nTo avoid interruptions, transition any Salesforce org using Einstein Vision and Language to another solution before your subscriptions expire. We will be communicating additional details to you soon. If you have questions, contact your Account Executive about your subscriptions.\n\nYou access the Einstein Vision and Einstein Language services via these standard REST API calls. Use the APIs to programmatically work with datasets, labels, examples, models, and predictions.\n\nYou can download the OpenAPI specification which describes the APIs from GitHub.\n\nEinstein Vision and Language are Health Insurance Portability and Accountability Act (HIPAA) compliant. Einstein Vision and Language meet the strict HIPAA standards for processing customers’ protected health information (PHI).\n\nHIPAA compliance positions Einstein Vision and Language services to provide capabilities that can be used in the highly regulated healthcare sector.', 3)
("Guest User Security Restrictions\n\nBeginning with the Winter '21 Salesforce release, Guest Users, also called anonymous users, cannot access any records by default. This affects all Salesforce orgs.\n\nFor more about the guest user implementation for Industries CPQ, see Guest User Enhancements Overview.\n\nBeginning with CME Spring '20 Minor Release, Salesforce does not allow guest users to create and update records by default with the exception of Cart-Based and Digital Commerce APIs listed in this topic.\n\nSee Also\n\nGuest User Access\nGuest User Security Policies and Timelines\nGive Secure Access to Unauthenticated Users with the Guest User Profile", 2)
('App Transport Security Exclusions\n\nWith iOS 9, Apple has introduced App Transport Security (ATS) - a new security system requiring all requests made within the app to have a secured network connection.\n\nMany native iOS apps written before iOS 9 use unsecured connections for simple REST requests or loading images from an image server. To ensure these requests are accepted in iOS 9, you may need to modify the Info.plist within the app.\n\nATS will reject any unsecured (HTTP) requests from being made. It will also reject secured (HTTPS) requests if they do not use best practices for secure communications.\n\nThis security measure will most likely affect the loading of image URLs that Personalization has provided. Therefore, it is best to test the loading of images within the app to determine whether or not it is necessary to make an exception for your image server.\n\nIt may be challenging to determine whether or not App Transport Security is rejecting the loading of images. The only sign would be a UIImageView not displaying aUIImage. You may see errors in your console output that reference ATS directly. To determine whether the image data is loaded correctly, it is best to put a breakpoint in the campaign handler.\n\nApple does offer a way to configure ATS from within your Info.plist file. You can opt-out of specific domains by using NSExceptionDomains. For information on making domain exceptions, refer to the Apple Cocoa Keys documentation on NSAppTransportSecurity.', 5)
('API Reference\nClass\tDescription\nEvergage\tPrimarily used to configure and start the Marketing Cloud Personalization iOS SDK.\nEVGCampaign\tA custom ‘Data’ campaign to be handled by the app, served in response to Personalization actions generated by the user interacting with the app.\nEVGContext\tProvides APIs to handle data campaigns, track item views and activity, and track manual actions, all within a lifecycle-managed context such as EVGScreen.\nEVGClientConfigurationBuilder\tBuilds the Personalization iOS SDK configuration, including some required settings, provided by the client.\nEVGScreen\tA "screen" of the app, and the context for its associated user activity.\nBlock\tDescription\nEVGCampaignHandler\tCallback implemented by the app to handle potential custom data campaigns served in response to Personalization actions generated by the user interacting with the app.\nEVGClientConfigurationBlock\tThe block/closure used to populate the EVGClientConfigurationBuilder, in order to specify the Personalization iOS SDK configuration in [Evergage startWithClientConfiguration:].\nCategory\tDescription\nEvergage(Swizzling)\tCategory that eliminates the need for you to manually forward info to Personalization via API calls.\nUIViewController(Evergage)\tCategory used to enable Marketing Cloud Personalization to automatically track screens, dynamically map them to actions, and provide APIs for tracking and campaigns.\nConstant\tDescription\nEVGLogLevel\tConstant that indicates the threshold for logging in [Evergage logLevel].', 5)
('EVGClientConfigurationBuilder Class Reference\nInherits from\tDeclared in\nNSObject\tEVGClientConfigurationBuilder.h\n\nBuilds the Marketing Cloud Personalization iOS configuration, including some required settings, provided by the client in [Evergage startWithClientConfiguration:].\n\nAccount within Personalization to use.\n\nDataset within the Personalization account to use.\n\nIf the app uses push notifications (APNS and/or Firebase), allow Personalization to collect the app’s APNS/Firebase token(s) in order to support Personalization push notification campaigns.\n\nDiscussion\n\nDefaults to false.\n\nFor more information, see Push Notifications.\n\nSee Also\n\n[Evergage(Swizzling)]\n\nAllow user-initiated gesture to connect to the Personalization web console for action mapping screens.\n\nDiscussion\n\nDefaults to false. Recommended to use only during development in DEBUG builds.\n\nFor more information, see Tracking Guide.', 5)
('EVGScreen Class Reference\nInherits from\tDeclared in\nEVGContext : NSObject\tEVGScreen.h\n\nAn EVGContext associated with a UIViewController for tracking and personalization, when an app can use a UIViewController for each screen or page of the app.\n\nEVGScreen can be retrieved via [UIViewController(Evergage) evergageScreen].\n\nFor APIs to track item views and activity, track manual actions, and handle data campaigns, see EVGContext.\n\nIf your app can\'t use a UIViewController for each of its screens or pages, use Evergage globalContext.\n\nIf the screen is visible.\n\nDiscussion\n\nPersonalization automatically handles the following operations:\n\nUpdates visibility during [super viewDidAppear:] and [super viewWillDisappear:], for eligible view controllers.\nTracks the "view action" when the screen becomes visible and the app is or becomes active, if an action is dynamically mapped to the screen using the Personalization web app. For more information, see the Tracking Guide.', 2)
('EVGCampaignHandler Block Reference\nDeclared in\nEVGCampaign.h\n\nCallback implemented by the app to handle potential custom data campaigns served in response to Marketing Cloud Personalization actions generated by the user interacting with the app.\n\nFor additional information, see Mobile Data Campaigns. For lifecycle details, see [EVGContext setCampaignHandler:forTarget:].\n\nUsage Details:\n\nFor a view controller, it is recommended to setup handlers in viewWillAppear:, as shown in the examples in this section.\nValidate the expected campaign data/JSON before processing, since campaigns are dynamic and designed in the Personalization web app.\nThe same campaign could be re-served, so when applicable, check if the same content is already active. For example, there’s no need to re-render the same message/UI to the user if it’s still visible. This is especially true when testing a specific experience, see [Evergage(Swizzling) handleOpenURL:].\nFollow best practices using weak references within the handler block, to avoid retaining objects in memory longer than expected, which could lead to memory bloat and unexpected behavior. The following examples correctly use weak reference.\n\nThe following is example code that expects the featured product’s name and updates a UILabel on screen.\n\nObjective-C\n\nSwift', 5)
('EVGClientConfigurationBlock Block Reference\nDeclared in\tAvailability\tReferences\nEVGClientConfigurationBuilder.h\t1.3.0\t[Evergage startWithClientConfiguration:] and EVGClientConfigurationBuilder\n\nThe block/closure used to populate the EVGClientConfigurationBuilder, in order to specify the Marketing Cloud Personalization iOS SDK configuration in [Evergage startWithClientConfiguration:].\n\n[Evergage startWithClientConfiguration:]\nEVGClientConfigurationBuilder', 5)
("UIViewController(Evergage) Category Reference\nDeclared in\nUIViewController+Evergage.h\n\nUIViewController category used to enable Marketing Cloud Personalization to automatically track screens, dynamically map them to actions, and provide APIs for tracking and campaigns.\n\nFor access to EVGContext APIs, see evergageScreen. For information about dynamically mapping screens to view actions, see the Tracking Guide.\n\nA EVGScreen EVGContext for tracking and personalization, when your app can use a UIViewController for each of its screens or pages.\n\nIf your app can't use a UIViewController for each of its screens or pages, use [Evergage globalContext] instead.\n\nDiscussion\n\nUI-related and lazily created on first access from main thread.\n\nReturns nil if Personalization is disabled, or not yet accessed from main thread.\n\nSee Also\n\nEVGScreen\nEVGContext\n\nThe optional evergageName for this UIViewController. This method is only relevant if using Code-less Screen Upload and Action Mapping.\n\nDiscussion\n\nUniquely naming your UIViewControllers may make action-mapping screens in the Personalization web-app even faster and easier.\n\nShould be set before viewDidAppear, such as within Interface Builder (Attribute Inspector on the view controller) or programmatically in viewDidLoad or viewWillAppear.", 2)
('EVGLogLevel Constant Reference\nDeclared in\tReferences\nEVGConstants.h\t[Evergage logLevel]\n\nIndicates the threshold for logging in [Evergage logLevel]. Log messages at the threshold level and lower will be logged. For instance, if the threshold is EVGLogLevelWarn, messages at level EVGLogLevelWarn or EVGLogLevelError will be logged.\n\nConstant\tDescription\tDeclared in\nEVGLogLevelError\tIndicates that an operation failed.\tDeclared In EVGConstants.h.\nEVGLogLevelWarn\tIndicates that something abnormal happened but the overall operation did not necessarily fail.\tDeclared In EVGConstants.h.\nEVGLogLevelInfo\tProvides detail about most operations.\tDeclared In EVGConstants.h.\nEVGLogLevelDebug\tProvides a high level of detail primarily intended for Personalization developers.\tDeclared In EVGConstants.h.\nEVGLogLevelOff\tDisables all logging. This is the default for release builds.\tDeclared In EVGConstants.h.\nEVGLogLevelAll\tEnables all logging.\tDeclared In EVGConstants.h.\n[Evergage logLevel]', 3)
('Item Reference\nClass\tDescription\nEVGArticle\tAn article is content that is typically organized by category or keyword.\nEVGBlog\tA blog is content that is typically presented as reverse chronologically sorted on a single topic.\nEVGCategorizedItem\tAbstract class. A categorized item belongs to one or more categories.\nEVGCategory\tA category organizes other items and is contained in a hierarchy.\nEVGItem\tAbstract base class. An item is something in a site or app that users can view or otherwise engage with. Typical examples are products, articles and blogs.\nEVGLineItem\tA line item contains a single EVGItem subclass and the quantity that were ordered.\nEVGLocation\tLocation to associate with an Item, for example for filtering reasons if a product is only available in an area.\nEVGOrder\tAn order sent upon user checkout. The order contains a total purchase value and line items representing each product and quantity.\nEVGProduct\tA product is an item that can be sold to users. Products can be added to EVGLineItem objects when they have been ordered by the user.\nEVGReview\tA user-created review of an item.\nEVGTag\tAdditional tags about an item such as Brand for products or Author and Keywords for articles.\nConstant\tDescription\nEVGPromotionState\tModifies how items will be selected and ordered for promotion.\nEVGTagType\tSpecifies which type a tag belongs to.', 5)
('EVGArticle Class Reference\nInherits from\tDeclared in\nEVGCategorizedItem : EVGItem : NSObject\tEVGItems.h\n\nAn article is content that is typically organized by category or keyword.\n\nDate and time when this article was last modified.\n\nSee Also\n\nEVGItem published\n\nSubtitle for this article.\n\nCreates an EVGArticle with the required id only.\n\nParameters\n\nParameter\tDescription\nevgId\tSee [EVGItem evgId]. This is the only required field.\n\nReturn Value\n\nAn article which can be further modified.\n\nCreates an EVGArticle with the required id and most common optionals.\n\nParameters\n\nParameter\tDescription\nevgId\tSee [EVGItem evgId]. This is the only required field.\nname\tSee [EVGItem name]\nsubTitle\tSee subTitle\nurl\tSee [EVGItem url]\nevgDescription\tSee [EVGItem evgDescription]\n\nReturn Value\n\nAn article which can be further modified.\n\nCreates an EVGArticle from the provided JSON.\n\nParameters\n\nParameter\tDescription\njson\tAn article in JSON form\n\nReturn Value\n\nAn article which can be further modified, or nil if JSON is invalid', 5)
('EVGBlog Class Reference\nInherits from\tDeclared in\nEVGCategorizedItem : EVGItem : NSObject\tEVGItems.h\n\nA blog is content that is typically presented as reverse chronologically sorted on a single topic.\n\nDate and time when this article was last modified.\n\nSee Also\n\nEVGItem published\n\nSubtitle for this article.\n\nCreates an EVGBlog with the required ID only.\n\nParameters\n\nParameter\tDescription\nevgId\tSee [EVGItem evgId]. This is the only required field.\n\nReturn Value\n\nA blog which can be further modified.\n\nCreates an EVGBlog with the required id and most common optionals.\n\nParameters\n\nParameter\tDescription\nevgId\tSee [EVGItem evgId]. This is the only required field.\nname\tSee [EVGItem name]\nsubTitle\tSee subTitle\nurl\tSee [EVGItem url]\nevgDescription\tSee [EVGItem evgDescription]\n\nReturn Value\n\nA blog which can be further modified.\n\nCreates an EVGBlog from the provided JSON.\n\nParameters\n\nParameter\tDescription\njson\tA blog in JSON form\n\nReturn Value\n\nA blog which can be further modified, or nil if JSON is invalid', 5)
('EVGCategorizedItem Class Reference\nInherits from\tDeclared in\nEVGItem : NSObject\tEVGItems.h\n\nAbstract class. A categorized item belongs to one or more categories.\n\nSee Also\n\nEVGProduct\nEVGArticle\nEVGBlog\n\nThe categories that this categorized item belongs to.', 5)
('EVGCategory Class Reference\nInherits from\tDeclared in\nEVGItem : NSObject\tEVGItems.h\n\nA category organizes other items and is contained in a hierarchy.\n\nIf YES, this category is a department. Dynamic promoted content can be configured to only choose categories that are also departments.\n\nCreates an EVGCategory with the required id only.\n\nParameters\n\nParameter\tDescription\nevgId\tSee [EVGItem evgId]. This is the only required field.\n\nReturn Value\n\nA category which can be further modified.\n\nCreates an EVGCategory with the required id and most common optionals.\n\nParameters\n\nParameter\tDescription\nevgId\tSee [EVGItem evgId]. This is the only required field.\nisDepartment\tSee isDepartment\nname\tSee [EVGItem name]\nevgDescription\tSee [EVGItem evgDescription]\n\nReturn Value\n\nA category which can be further modified.\n\nCreates an EVGCategory from the provided JSON.\n\nParameters\n\nParameter\tDescription\njson\tA category in JSON form\n\nReturn Value\n\nA category which can be further modified, or nil if JSON is invalid', 5)
('EVGLineItem Class Reference\nInherits from\tDeclared in\nNSObject\tEVGItems.h \n\nA line item contains a single EVGItem subclass and the quantity that were ordered.\n\nHere is an example of how to initialize a single EVGLineItem:\n\nThe item being ordered, subclass of EVGItem.\n\nThe quantity of the item being ordered. Defaults to 1\n\nBuilds a line item which contains one or more units of a product in an order. This method only builds a data object. To use it, pass it to one of the tracking methods like [EVGContext addToCart:].\n\nParameters\n\nParameter\tDescription\nitem\tThe required EVGItem subclass being ordered\nquantity\tThe optional quantity, defaults to 1\n\nReturn Value\n\nA line item which can be further modified.\n\nBuilds a line item which contains one or more units of a product in an order. This method only builds a data object. To use it, pass it to one of the tracking methods like [EVGContext addToCart:].\n\nParameters\n\nParameter\tDescription\nproductId\tThe ID of the product in this line item. This is the only required field.\nproductName\tThe name of the product. It should be provided whenever possible.\nprice\tThe unit price of the product. The revenue for this line item will be price x quantity. This is required when the product is being ordered but optional otherwise.\nquantity\tThe number of units of the product this line item represents.\n\nReturn Value\n\nA line item which can be further modified.', 5)
('EVGLocation Class Reference\nInherits from\tDeclared in\nNSObject\tEVGItems.h \n\nUse the EVGLocation class to associate location information with an Item. It serves use cases such as filtering products based on availability in specific areas.\n\nThe EVGLocation class is intended solely for use with items and is not applicable to other entities or functionalities.\n\nLatitudinal coordinate of the location, should be from -90 to 90.\n\nLongitudinal coordinate of the location, should be from -180 to 180.\n\nName of the city.\n\nName of the state or province.\n\nPostal code of the location.\n\nCreates a location with geographic coordinates.\n\nParameters\n\nParameter\tDescription\nlatitude\tLatitudinal coordinate, should be from -90 to 90\nlongitude\tLongitudinal coordinate, should be from -180 to 180\n\nCreates a location with city and state.\n\nParameters\n\nParameter\tDescription\ncity\tCity name\nstateProvinceCode\tState or Province Code (e.g. MA)\n\nCreates a location with postal code.\n\nParameters\n\nParameter\tDescription\npostalCode\tPostal code\n\nCreates a location from the provided JSON.\n\nParameters\n\nParameter\tDescription\njson\tA location in JSON form\n\nReturn Value\n\nA location which can be further modified, or nil if JSON is invalid', 5)
('EVGOrder Class Reference\nInherits from\tDeclared in\nNSObject\tEVGItems.h \n\nAn order sent upon user checkout. The order contains a total purchase value and line items representing each product and quantity.\n\nHere is a convenient way to initialize an EVGOrder\n\nOptional array of EVGLineItems ordered by the user.\n\nOptional order ID uniquely identifies an order to avoid duplication if the same order is resent.\n\nThe total value of the order. If present and nonzero this value overrides the normal order value calculation which is quantity x price for all the line items.\n\nISO code for the pricing currency of this order’s total value such as USD, EUR, GBP.\n\nBuilds an order. This method only builds a data object. To use it, pass it to one of the tracking methods like [EVGContext purchase:].\n\nParameters\n\nParameter\tDescription\norderId\tThe optional unique ID of this order.\nlineItems\tThe optional items being ordered along with their quantities. All entries must be of type EVGLineItem.\ntotalValue\tThe optional total value of the order. If nil or 0 it will be treated as the sum of the revenue from each line item (price x quantity).\n\nReturn Value\n\nAn order which can be further modified.', 5)
('EVGPromotionState Constants Reference\nDeclared in\tReferences\nEVGItems.h\tEVGItem\n\nModifies how items will be selected and ordered for promotion.\n\nConstant\tDescription\tDeclared in\nEVGPromotionStateUndefined\tDon’t make any changes to the standard promoted content behavior. The default promotion state.\tEVGItems.h \nEVGPromotionStatePrioritized\tGive the associated item a higher priority when evaluating campaign dynamic promoted content rules; ignored for static rules.\tEVGItems.h \nEVGPromotionStateExcluded\tNever promote the associated item, even if it otherwise matches promoted content rules; honored for both static and dynamic rules.\tEVGItems.h\n\nSee Also\n\nEVGItem', 5)
('EVGReview Class Reference\nInherits from\tDeclared in\nNSObject\tEVGItems.h\n\nA user-created review of an item.\n\nThe ID (see [EVGItem evgId]) of the item being reviewed.\n\nDate and time when the review was submitted.\n\nScore given to the item in this review, must be normalized to the range 1-100 inclusive.\n\nThe title of the review.\n\nThe text content of the review.\n\nName to be displayed along with review, may have no relation to actual user ID.\n\nWhether the product was purchased by this user before being reviewed.\n\nBuilds review details for an item. This method only builds a data object. To use it, pass it to one of the tracking methods like [EVGContext review:reviewDetails:].\n\nParameters\n\nParameter\tDescription\nitemId\tThe required [EVGItem evgId] of the item being reviewed\ndate\tSee date\nrating\tSee rating\ntitle\tSee title\npurchased\tSee purchased\n\nReturn Value\n\nReview details which can be further modified.', 5)
('EVGTag Class Reference\nInherits from\tDeclared in\nEVGItem : NSObject\tEVGItems.h\n\nAdditional tags about an item such as Brand for products or Author and Keywords for articles.\n\nRequired. The type of a tag. See EVGTagType for values.\n\nCreates an EVGTag with the required id and type only.\n\nParameters\n\nParameter\tDescription\nevgId\tRequired, see [EVGItem evgId]\ntype\tRequired, see EVGTagType\n\nReturn Value\n\nA tag which can be further modified.\n\nCreates an EVGTag with the required id and type, and the most common optionals.\n\nParameters\n\nParameter\tDescription\nevgId\tRequired, see [EVGItem evgId]\ntype\tRequired, see EVGTagType\nname\tSee [EVGItem name]\nevgDescription\tSee [EVGItem evgDescription]\n\nReturn Value\n\nA tag which can be further modified.\n\nCreates a tag from the provided JSON.\n\nParameters\n\nParameter\tDescription\njson\tA tag in JSON form\n\nReturn Value\n\nA tag which can be further modified, or nil if JSON is invalid', 5)
('EVGTagType Constants Reference\nDeclared in\tReferences\nEVGItems.h\tEVGTag\n\nSpecifies which type a tag belongs to.\n\nConstant\tDescription\tDeclared in\nEVGTagTypeBrand\tA manufacturer, for example “Nike”.\tEVGItems.h\nEVGTagTypeItemClass\tA custom type of item in addition to the ones predefined by Evergage. For instance, “Concert”.\tEVGItems.h\nEVGTagTypeGender\tThe gender the item is intended for. For instance, “Male”, “Female”, “Unisex”. Available in 1.2.0\tEVGItems.h\nEVGTagTypeStyle\tA distinctive appearance. For example, furniture styles might be “Retro”, “Art Deco” and “Shaker”.\tEVGItems.h\nEVGTagTypeAuthor\tA person who wrote an article or blog.\tEVGItems.h\nEVGTagTypeKeyword\tA word or short phrase describing an item. These might be curated or added by individual users. For example, if the topic was sewing there might be a keyword tag for “needlepoint” and another for “patterns”.\tEVGItems.h\nEVGTagTypeContentClass\tThe type or format of an article or blog. For example, “ebook”, “pdf”, “whitepaper”. Available in 1.2.0\tEVGItems.h\n\nSee Also\n\nEVGTag', 5)
('EVGScreen Class Reference\nInherits from\tDeclared in\nEVGContext : NSObject\tEVGScreen.h\n\nA "screen" of the app, and the context for its associated user activity.\n\nTypically an app screen is represented by a UIViewController. Its EVGScreen can be retrieved via [UIViewController(Evergage) evergageScreen].\n\nFor APIs to track item views and activity, track manual actions, and handle data campaigns, see EVGContext.\n\nIf you need a non-UIViewController screen, please get in touch with the Support team.\n\nIf the screen is visible.\n\nDiscussion\n\nFor the standard [UIViewController(Evergage) evergageScreen], Personalization automatically:\n\nUpdates visibility during viewDidAppear: and viewWillDisappear:, for eligible view controllers.\nTracks the "view action" when the screen becomes visible and the app is or becomes active, if an action is dynamically mapped to the screen using the Personalization web app. For more information, see the Tracking Guide.', 3)
('UIViewController(Evergage) Category Reference\nDeclared in\nUIViewController+Evergage.h\n\nUIViewController category used to enable Marketing Cloud Personalization to automatically track screens, dynamically map them to actions, and provide APIs for tracking and campaigns.\n\nFor access to EVGContext APIs, see evergageScreen. For information about dynamically mapping screens to view actions, see the Tracking Guide.\n\nProvides APIs to track item views and activity, track manual actions, and handle custom data campaigns for this screen.\n\nDiscussion\n\nUI-related and lazily created on first access from main thread.\n\nnil if Personalization is disabled, or not yet accessed from main thread.\n\nSee Also\n\nEVGScreen\nEVGContext\n\nThe optional evergageName for this UIViewController.\n\nDiscussion\n\nUniquely naming your UIViewControllers may make action-mapping screens in the Personalization web-app even faster and easier.\n\nShould be set before viewDidAppear, such as within Interface Builder (Attribute Inspector on the view controller) or programmatically in viewDidLoad or viewWillAppear.', 3)
('Marketing Cloud Personalization iOS SDK Release Notes\nIncludes module maps for Swift\nNew feature: mobile push notification campaigns, supporting APNS and Firebase Messaging, see the Push Notifications Guide\nAutomatically gather time zone, to support time zone specific scheduling of push notification campaigns\nExpanded app-defined EVGClientConfiguration provided on [Evergage startWithClientConfiguration:]\nAbility to disable most Swizzling, see [Evergage(Swizzling) swizzlingEnabled]\nSupport accumulating time viewed via [EVGContext viewCategory:] and [EVGContext viewTag:], as was already done for [EVGContext viewItem:] and [EVGContext viewItemDetail:]\nSupport optional different action name in view APIs, via\n[EVGContext viewItem:actionName:]\n[EVGContext viewItemDetail:actionName:]\n[EVGContext viewCategory:actionName:]\n[EVGContext viewTag:actionName:]\nAdded [EVGItem location], [EVGItem rating], [EVGItem numRatings]\nReduce harmless compiler warnings from using the SDK across integration styles (zip/pod ObjC/Swift).\nFix: After [Evergage reset], the SDK needs to once again automatically fetch the initial configuration from the server\nImproved control over expiration of configurations fetched from the server\nDocumentation updates\nNew feature: In-App Message campaigns\nAbility to control testing non-published campaigns via URLs, see Testing Guide\nAdded EVGContext, [Evergage globalContext], and [Evergage reset]\nDocumentation updates\nNow supports CocoaPods\n\nFirst GA public release\n\nNetwork: Queueing, connectivity monitoring\nTracking: APIs, app lifecycle monitoring ("foreground", "background", etc)\nMobile Data campaigns\nMapping screens to actions, see Tracking Guide', 2)
('EVGLogLevel Constants Reference\nDeclared in\tReferences\nEVGConstants.h\t[Evergage logLevel]\n\nIndicates the threshold for logging in [Evergage logLevel]. Log messages at the threshold level and lower will be logged. For instance, if the threshold is EVGLogLevelWarn, messages at level EVGLogLevelWarn or EVGLogLevelError will be logged.\n\nConstant\tDescription\tDeclared in\nEVGLogLevelError\tIndicates that an operation failed.\tDeclared In EVGConstants.h.\nEVGLogLevelWarn\tIndicates that something abnormal happened but the overall operation did not necessarily fail.\tDeclared In EVGConstants.h.\nEVGLogLevelInfo\tProvides detail about most operations.\tDeclared In EVGConstants.h.\nEVGLogLevelDebug\tProvides a high level of detail primarily intended for Personalization developers.\tDeclared In EVGConstants.h.\nEVGLogLevelOff\tDisables all logging. This is the default for release builds.\tDeclared In EVGConstants.h.\nEVGLogLevelAll\tEnables all logging.\tDeclared In EVGConstants.h.\n[Evergage logLevel]', 2)
("API Reference\n\nPackage: com.evergage.android\n\nInterface\tDescription\nCampaign\tA custom 'Data' campaign to be handled by the app, served in response to Marketing Cloud Personalization actions generated by the user interacting with the app.\nCampaignHandler\tCallback implemented by the app to handle potential custom 'Data' campaigns served in response to Personalization actions generated by the user interacting with the app.\nContext\tProvides APIs to handle data campaigns, track Item views and interactions, and track manual actions, all within a lifecycle-managed context such as Screen.\nScreen\tA 'screen' of the app, and the context for its associated user activity.\nClass\tDescription\nClientConfiguration\tPersonalization Android configuration, provided by the client in Evergage.start(ClientConfiguration), built using ClientConfiguration.Builder.\nClientConfiguration.Builder\tBuilder for ClientConfiguration.\nEvergage\tThis class is primarily used to initialize, configure, and start Personalization.\nEvergageActivity\tSupports easily and codelessly managing test campaigns from the device in debug/debuggable builds, by allowing the user to open related URLs in the mobile browser.\nAnnotation\tType Description\nLogLevel\tIndicates the threshold level for logging in Evergage.setLogLevel(int).", 3)
('Interface CampaignHandler\n\nCallback implemented by the app to handle potential custom "Data" campaigns served in response to Marketing Cloud Personalization actions generated by the user interacting with the app.\n\nFor additional information, see Mobile Data Campaigns. For lifecycle details, see Context.setCampaignHandler(com.evergage.android.CampaignHandler, java.lang.String).\n\nFor an activity, it is recommended to set up handlers in onStart(), as shown in the following example.\nValidate the expected campaign data/JSON before processing, since campaigns are dynamic and can be changed at any time via the Personalization UI.\nThe same campaign/content could be re-served, so when applicable, use Campaign.equals(java.lang.Object) to determine if the same content is already active/visible. For example, there\'s no need to re-render the same message/UI to the user if it\'s already visible. This is especially true when testing a specific experience, see Testing Guide.\n\nThe following is example code that expects the featured product\'s name and updates a TextView on the screen.\n\nFor more information and example code, see CampaignHandler\n\nParameters\n\nParameter\tDescription\ncampaign\tThe incoming campaign to be handled.', 3)
("Interface Screen\n\nA Context associated with an Activity for tracking and personalization, when an app can use an Activity for each screen or page of the app. You can retrieve a screen associated with an Activity via Evergage.getScreenForActivity(Activity).\n\nFor non-ignorable activities, the Screen is created during super.onCreate() and destroyed during super.onDestroy().\n\nFor information on APIs to track item views, interactions, manual actions, and handle data campaigns, see Context.\n\nIf your app cannot use an Activity for each of it's screens or pages, see Evergage.getGlobalContext()\n\nMethod\tModifier and Type\tDescription\nisRunning()\tBoolean\tIf the screen is running (typically foreground/foremost Activity).\n\nIf the screen is running (typically foreground/foremost Activity). Personalization automatically updates this state based on the eligible activity's super.onResume() and super.onPause().\n\nReturns:\n\ntrue, if the screen is running.", 2)
("Class ClientConfiguration\n\nMarketing Cloud Personalization Android configuration, provided by the client in Evergage.start(ClientConfiguration), built using ClientConfiguration.Builder.\n\nSee Also\n\nEvergage.start(ClientConfiguration)\nClientConfiguration.Builder\nNested Class\tDescription\tModifier and Type\nClientConfiguration.Builder\tBuilder for ClientConfiguration.\tstatic class\nMethods\tDescription\tModifier and Type\tRequired?\ngetAccount()\tAccount within Personalization to use.\tString\tYes\ngetDataset()\tDataset within the Personalization account to use.\tString\tYes\nusePushNotifications()\tIf the app uses Firebase Cloud Messaging, allow Personalization to collect the app's Firebase token in order to support Personalization push notification campaigns.\tBoolean\tNo\n\nAccount within Personalization to use.\n\nRequired - Dataset within the Personalization account to use.\n\nIf the app uses Firebase Cloud Messaging, allow Personalization to collect the app's Firebase token in order to support Personalization push notification campaigns.\n\nIf unspecified, defaults to false.\n\nFor more information, see Push Notifications.\n\nSee Also\n\nEvergage.setFirebaseToken(String)", 2)
("Class ClientConfiguration.Builder\n\nBuilder for ClientConfiguration.\n\nSee Also:\n\nEvergage.start(ClientConfiguration)\nClientConfiguration\nMethods\tDescription\tModifier and Type\naccount(java.lang.String account)\tThe Personalization account to use.\tClientConfiguration.Builder\nbuild()\tProduces ClientConfiguration and resets the builder.\tClientConfiguration\ndataset(java.lang.String dataset)\tThe dataset within the Personalization account to use.\tClientConfiguration.Builder\nusePushNotifications(java.lang.Boolean usePushNotifications)\tIf the app uses Firebase Cloud Messaging, allow Personalization to collect the app's Firebase token in order to support Personalization push notification campaigns.\tClientConfiguration.Builder\n\nSee Also\n\nClientConfiguration.getAccount()\n\nSee Also\n\nClientConfiguration.getDataset()\n\nSee Also\n\nClientConfiguration.usePushNotifications()\n\nProduces ClientConfiguration and resets the builder.", 3)
('Annotation Type LogLevel\n\nIndicates the threshold level for logging in Evergage.setLogLevel(int).\n\nThe initial default is WARN for debug/debuggable builds, and OFF otherwise.\n\nLog messages at the threshold level and lower will be logged. For instance, if the threshold is WARN, messages at level WARN or ERROR will be logged.\n\nLevels:\n\nOFF\nERROR\nWARN\nINFO\nDEBUG\nALL\n\nDisables all logging.\n\nIndicates that an operation failed.\n\nIndicates that something abnormal happened but the overall operation did not necessarily fail.\n\nProvides detail about most operations.\n\nProvides a high level of detail primarily intended for Marketing Cloud Personalization developers.\n\nEnables all logging.', 4)
('Item Reference\n\nPackage: com.evergage.android.promote\n\nClass\tDescription\nArticle\tAn article is content that is typically organized by category or keyword.\nBlog\tA blog is content that is typically presented as reverse chronologically sorted on a single topic.\nCategorizedItem\tAbstract class.\nCategory\tA category organizes other items and is contained in a hierarchy.\nItem\tAbstract base class.\nLineItem\tA line item contains a single Item and the quantity that was ordered.\nLocation\tLocation to associate with an Item, for example for filtering reasons if a product only available in an area.\nOrder\tAn order sent upon user checkout.\nProduct\tA product is a CategorizedItem that can be sold to users.\nReview\tA user-created review of an item.\nTag\tAdditional tags about an item such as Brand for products or Author and Keywords for articles.\nAnnotation Type\tDescription\nPromotionState\tModifies how items will be selected and ordered for promotion.\nTag.Type \tSpecifies which type a tag belongs to.', 4)
('Class Article\n\nAn article is content that is typically organized by category or keyword.\n\nField\tDescription\tModifier and Type\nmodifiedDate\tDate and time when this article was last modified.\tjava.util.Date\nsubTitle\tSubtitle for this article.\tjava.lang.String\n\nFields inherited from class CategorizedItem:\n\ncategories\n\nFields inherited from class Item:\n\ndescription\nexpiration\nid\nimageUrl\nlocation\nname\nnumRatings\npromotionState\npublished\nrating\ntags\nurl\n\nDate and time when this article was last modified. For other dates that can be set, see Item.expiration and Item.published.\n\nSubtitle for this article. To set the title, see Item.name .\n\nCreates an article with the required ID only.\n\nCreates an article with the required id only. The article can then be further modified.\n\nParameter\tDescription\tRequired?\nid\tSee Item.id\tYes\nMethod\tModifier and Type\nfromJSONObject(org.json.JSONObject json, java.lang.String id)\tstatic Article\n\nMethods inherited from class Item:\n\nfromJSONString', 4)
('Class Blog\n\nA blog is content that is typically presented as reverse chronologically sorted on a single topic.\n\nField\tDescription\tModifier and Type\nmodifiedDate\tDate and time when this blog was last modified.\tjava.util.Date\nsubTitle\tSubtitle for the blog.\tjava.lang.String\n\nFields inherited from class CategorizedItem:\n\ncategories\n\nFields inherited from class Item:\n\ndescription\nexpiration\nid\nimageUrl\nlocation\nname\nnumRatings\npromotionState\npublished\nrating\ntags\nurl\n\nDate and time when this blog was last modified. For other dates that can be set, see Item.expiration and Item.published.\n\nSubtitle for the blog. To set the title, see Item.name .\n\nCreates a blog with the required id only. The blog can then be further modified.\n\nParameters:\n\nParameter\tDescription\tRequired?\nid\tSee Item.id\tYes\nMethod\tModifier and Type\nfromJSONObject(org.json.JSONObject json, java.lang.String id)\tstatic Blog\n\nMethods inherited from class Item:\n\nfromJSONString', 3)
('Class CategorizedItem\n\nAbstract class. A categorized item belongs to one or more categories. For more information, see Product, Article, and Blog.\n\nDirect known subclasses:\n\nArticle\nBlog\nProduct\n\nThe categories that this categorized item belongs to.\n\nFields inherited from class Item:\n\ndescription\nexpiration\nid\nimageUrl\nlocation\nname\nnumRatings\npromotionState\npublished\nrating\ntags\nurl\n\nMethods inherited from class Item:\n\nfromJSONString', 4)
('Class Category\n\nA category organizes other items and is contained in a hierarchy.\n\nIf true, this category is in a department. Dynamic promoted content can be configured to only choose categories that are also departments.\n\nFields inherited from class Item:\n\ndescription\nexpiration\nid\nimageUrl\nlocation\nname\nnumRatings\npromotionState\npublished\nrating\ntags\nurl\n\nCreates a Category with the required id only. The category can then be further modified.\n\nParameters:\n\nParameter\tDescription\tRequired?\nid\tSee Item.id\tYes\nMethod\tModifier and Type\nfromJSONObject(org.json.JSONObject json, java.lang.String id)\tstatic Category\n\nMethods inherited from class Item:\n\nfromJSONString', 4)
('LineItem\n\nA line item contains a single Item and the quantity that was ordered.\n\nField\tDescription\tModifier and Type\nattributedTerm\tWord to associate with this item that will then be used in SmartSearch.\tjava.lang.String\nitem\tThe item being ordered, must be a concrete subclass of Item such as Product\tItem\nquantity\tThe quantity of the item being ordered.\tjava.lang.Integer\n\nThe quantity of the item being ordered.\n\nThe item being ordered, must be a concrete subclass of Item such as Product\n\nWord to associate with this item that will then be used in SmartSearch.\n\nBuilds a line item which contains the specified number of units of a product in an order. This method only builds a data object. To use it, pass it to one of the tracking methods like Context.addToCart(com.evergage.android.promote.LineItem).\n\nParameters:\n\nParameter\tDescription\tRequired?\nitem\tThe Item (such as Product) being ordered\tYes\nquantity\tThe number of units of the product this line item represents\tNo\n\nAll cart and order interactions involving LineItem requires each LineItem to have a price. For more information, see price.', 4)
('Location\n\nUse the Location class to associate location information with an Item. It serves use cases such as filtering products based on availability in specific areas.\n\nThe Location class is intended solely for use with items and is not applicable to other entities or functionalities.\n\nField\tDescription\tModifier and Type\ncity\tName of the city.\tjava.lang.String\nlatitude\tLatitudinal coordinate of the location, should be from -90 to 90.\tjava.lang.Double\nlongitude\tLongitudinal coordinate of the location, should be from -180 to 180.\tjava.lang.Double\npostalCode\tPostal code of the location.\tjava.lang.String\nstateProvinceCode\tName of the state or province.\tjava.lang.String\n\nLatitudinal coordinate of the location, should be from -90 to 90.\n\nLongitudinal coordinate of the location, should be from -180 to 180.\n\nName of the city.\n\nName of the state or province.\n\nPostal code of the location.\n\nCreates a location with geographic coordinates.\n\nParameters:\n\nParameter\tDescription\nlatitude\tLatitudinal coordinate, should be from -90 to 90\nlongitude\tLongitudinal coordinate, should be from -180 to 180\n\nCreates a location with city and state.\n\nParameters:\n\nParameter\tDescription\ncity\tCity name\nstateProvinceCode\tState or Province Code (e.g. MA)\n\nCreates a location with postal code.\n\nParameters:\n\nParameter\tDescription\npostalCode\tPostal code\nMethod\tModifier and Type\nfromJSONObject(org.json.JSONObject json)\tstatic Location', 2)
("Class Order\n\nAn order sent upon user checkout. The order contains a total purchase value and line items representing each product and quantity.\n\nField\tDescription\tModifier and Type\nlineItems\tOptional list of LineItem ordered by the user.\tjava.util.List<LineItem>\norderId\tOptional order ID uniquely identifies an order to avoid duplication if the same order is resent.\tjava.lang.String\ntotalValue\tThe total value of the order.\tjava.lang.Double\ntotalValueCurrency\tISO code for the pricing currency of this order's total value such as USD, EUR, GBP.\t\n\nOptional list of LineItem ordered by the user.\n\nOptional order ID uniquely identifies an order to avoid duplication if the same order is resent.\n\nThe total value of the order. If present and non-zero, this value overrides the normal order value calculation which is quantity multiplied by price for all the line items.\n\nISO code for the pricing currency of this order's total value such as USD, EUR, GBP.\n\nBuilds an order, which can then be further modified. This method only builds a data object. To use it, pass it to one of the tracking methods like Context.purchase(com.evergage.android.promote.Order).\n\nParameter\tDescription\norderId\tThe optional unique ID of this order.\nlineItems\tThe optional items being ordered along with their quantities. All entries must be of type LineItem.\ntotalValue\tThe optional total value of the order. If null or 0, the total will be generated as the sum of the revenue from each line item (price x quantity).", 4)
('Class Review\n\nA user-created review of an item.\n\nField\tDescription\tModifier and Type\ncontent\tThe text content of the review.\tjava.lang.String\ndate\tDate and time when the review was submitted.\tjava.util.Date\nitemId\tThe ID of the item being reviewed.\tjava.lang.String\npurchased\tWhether the product was purchased by this user before being reviewed.\tjava.lang.Boolean\nrating\tScore given to the item in this review, must be normalized to the range 1-100 inclusive.\tjava.lang.Integer\ntitle\tThe title of the review.\tjava.lang.String\nuserDisplayName\tName to be displayed along with review, may have no relation to actual user ID.\tjava.lang.String\n\nThe ID of the item being reviewed.\n\nSee also\n\nItem.id\n\nDate and time when the review was submitted.\n\nScore given to the item in this review, must be normalized to the range 1-100 inclusive.\n\nThe title of the review.\n\nThe text content of the review.\n\nName to be displayed along with review, may have no relation to actual user ID.\n\nWhether the product was purchased by this user before being reviewed.\n\nBuilds item review details, which can then be further modified. This method only builds a data object. To use it, pass it to one of the tracking methods like Context.review(Item, Review).\n\nParameter\tDescription\tRequired?\nitemId\tThe Item.id of the item being reviewed\tYes\ndate\tSee date\tNo\nrating\tSee rating. Should be a value from 1 to 100.\tNo\ntitle\tSee title\tNo\npurchased\tSee purchased\tNo\nMethod\tModifier and Type\nfromJSONObject(org.json.JSONObject json)\tstatic Review', 4)
('Class Tag\n\nAdditional tags about an item such as Brand for products or Author and Keywords for articles.\n\nClass\tDescription\tModifier and Type\nTag.Type\tSpecifies which type a tag belongs to.\tstatic interface\nField\tDescription\tModifier and Type\ntagType\tThe type of a tag. See Tag.Type for values.\tjava.lang.String\n\nFields inherited from class Item:\n\ndescription\nexpiration\nid\nimageUrl\nlocation\nname\nnumRatings\npromotionState\npublished\nrating\ntags\nurl\nConstructor\tDescription\nTag(java.lang.String id, java.lang.String tagType)\tCreates a Tag with the required id and type only.\n\nCreates a Tag with the required id and type only. The tag can then be further modified.\n\nParameter\tDescription\tRequired?\nid\tSee Item.id\tYes\ntagType\tSee Tag.Type\tYes\nMethod\tModifier and Type\nfromJSONObject(org.json.JSONObject json, java.lang.String id)\tstatic Tag', 2)
('Annotation Type PromotionState\n\nModifies how items will be selected and ordered for promotion. If not defined (null), it will not make any changes to the standard promoted content behavior.\n\nNever promote the associated item, even if it otherwise matches promoted content rules; honored for both static and dynamic rules.\n\nGive the associated item a higher priority when evaluating campaign dynamic promoted content rules; ignored for static rules.', 4)
('Annotation Type Tag.Type\n\nSpecifies which type a tag belongs to.\n\nBrand\nItemClass\nGender\nStyle\nAuthor\nKeyword\nContentClass\nSize\n\nA manufacturer, for example Nike.\n\nA custom type of item in addition to the ones predefined by Marketing Cloud Personalization. For instance, Concert.\n\nThe gender the item is intended for. For instance, Male, Female, Unisex.\n\nA distinctive appearance. For example, furniture styles might be Retro, Art Deco and Shaker.\n\nThe person who wrote the article or blog.\n\nA word or short phrase describing an item. These might be curated or added by individual users. For example, if the topic was sewing there might be a keyword tag for needlepoint and another for patterns.\n\nThe type or format of an article or blog. For example, ebook, pdf, whitepaper.\n\nSize of the item. For instance, Small, Medium, Large.', 4)
('Marketing Cloud Personalization iOS SDK Release Notes\nNew feature: mobile push notification campaigns, supporting APNS and Firebase Messaging, see the Push Notifications Guide\nAutomatically gather time zone, to support time zone specific scheduling of push notification campaigns\nExpanded app-defined EVGClientConfiguration provided on [Evergage startWithClientConfiguration:]\nAbility to disable most Swizzling, see [Evergage(Swizzling) swizzlingEnabled]\nSupport accumulating time viewed via [EVGContext viewCategory:] and [EVGContext viewTag:], as was already done for [EVGContext viewItem:] and [EVGContext viewItemDetail:]\nSupport optional different action name in view APIs, via\n[EVGContext viewItem:actionName:]\n[EVGContext viewItemDetail:actionName:]\n[EVGContext viewCategory:actionName:]\n[EVGContext viewTag:actionName:]\nAdded [EVGItem location], [EVGItem rating], [EVGItem numRatings]\nReduce harmless compiler warnings from using the SDK across integration styles (zip/pod ObjC/Swift).\nFix: After [Evergage reset], the SDK needs to once again automatically fetch the initial configuration from the server\nImproved control over expiration of configurations fetched from the server\nDocumentation updates\nNew feature: In-App Message campaigns\nAbility to control testing non-published campaigns via URLs, see Testing Guide\nAdded EVGContext, [Evergage globalContext], and [Evergage reset]\nDocumentation updates\nNow supports CocoaPods\n\nFirst GA public release\n\nNetwork: Queueing, connectivity monitoring\nTracking: APIs, app lifecycle monitoring ("foreground", "background", etc)\nMobile Data campaigns\nMapping screens to actions, see Tracking Guide', 2)
('Marketing Cloud Personalization Android SDK Release Notes\nNew feature: mobile push notification campaigns, supporting Firebase Cloud Messaging\nAutomatically gather time zone, to support time zone specific scheduling of push notification campaigns\nExpanded app-defined ClientConfiguration provided on start\nFixed test URL confirmation toasts (Android window permissions had changed)\nSupport accumulating time viewed via viewCategory and viewTag, as was already done for viewItem and viewItemDetail\nSupport optional different action name in view APIs, via\nviewItem(Item, String)\nviewItemDetail(Item, String)\nviewCategory(Category, String)\nviewTag(Tag, String)\nFixed: After reset, the SDK needs to once again automatically fetch the initial configuration from the server\nDocumentation improvements\nReleased to Maven Central\nUpdated the Integration Guide\n\nFirst GA public release\n\nNetwork: Queueing, connectivity monitoring\nTracking: APIs, Screen/Activity context, lifecycle monitoring (Activities, "foreground", "background")\nCampaigns: Data, In-App Message, URL-handling for testing\nAuto-detects DEBUG/debuggable builds and adjusts default log level', 2)
('Location\n\nUse the Location class to associate location information with an Item. It serves use cases such as filtering products based on availability in specific areas.\n\nThe Location class is intended solely for use with items and is not applicable to other entities or functionalities.\n\nField\tDescription\tModifier and Type\ncity\tName of the city.\tjava.lang.String\nlatitude\tLatitudinal coordinate of the location, should be from -90 to 90.\tjava.lang.Double\nlongitude\tLongitudinal coordinate of the location, should be from -180 to 180.\tjava.lang.Double\npostalCode\tPostal code of the location.\tjava.lang.String\nstateProvinceCode\tName of the state or province.\tjava.lang.String\n\nLatitudinal coordinate of the location, should be from -90 to 90.\n\nLongitudinal coordinate of the location, should be from -180 to 180.\n\nName of the city.\n\nName of the state or province.\n\nPostal code of the location.\n\nCreates a location with geographic coordinates.\n\nParameters:\n\nParameter\tDescription\nlatitude\tLatitudinal coordinate, should be from -90 to 90\nlongitude\tLongitudinal coordinate, should be from -180 to 180\n\nCreates a location with city and state.\n\nParameters:\n\nParameter\tDescription\ncity\tCity name\nstateProvinceCode\tState or Province Code (e.g. MA)\n\nCreates a location with postal code.\n\nParameters:\n\nParameter\tDescription\tRequired?\npostalCode\tPostal code\tNo\nMethod\tModifier and Type\nfromJSONObject(org.json.JSONObject json)\tstatic Location', 2)
("Get Started with the CRM Analytics Dashboard Component\n\nThe wave:waveDashboard component displays a CRM Analytics dashboard in a Visualforce or Lightning page.\n\nThe component is available in the Lightning App Builder as a drag-and-drop component. You can also create your own component to interact programmatically with the wave:waveDashboard component.\n\nTo display a CRM Analytics dashboard, pass in the required attribute, which is either the dashboardId or the developerName. All other attributes have a default value and are only specified if you want to override with your own custom value.\n\nTo change the dashboard state dynamically, use the filter atttribute to add selections or filters to the embedded dashboard. You can filter dataset fields by variables or specified values. For more information, see Filter and Selection Syntax for Embedded Dashboards.\n\nYou can also update the dashboard state via the setState component method or by using the CRM Analytics Web SDK Events like wave:update. For more details on using events to interact with this component, see the Web SDK Events guide.\n\nHere's an example of a simple CRM Analytics dashboard component.\n\nSee Also\n\nWave Dashboard Component Reference\nEmbed Dashboards in Lightning Pages\nAdd an Analytics Dashboard to a Visualforce Page\nLightning Aura Components Developer Guide", 2)
('Get Started with Salesforce Connect Adapter for GraphQL\n\nGraphQL is a standard query language that allows applications to flexibly access required data and provides a modern way to integrate applications. Unlike traditional REST APIs, GraphQL is more efficient because it provides granularity for client apps to specify the fields that they need.\n\nThe Salesforce Connect adapter for GraphQL includes special capabilities for Amazon AppSync and provides seamless access to Amazon RDS. Amazon AppSync hosts the GraphQL endpoint to accept and validate GraphQL queries. The GraphQL resolver translates GraphQL operations into SQL statements and executes them against an Amazon RDS-hosted database. You can then create an external data source with the endpoint URL of the AppSync GraphQL API and provide access to AWS data source from Salesforce.  For more information about Salesforce Connect adapter for GraphQL, see Access External Data with the Salesforce Connect Adapter for GraphQL help documentation.', 2)
('Attach Applied Discount Database Table\n\nThis example outlines how to attach a database table that’s in the same Amazon RDS instance as the example solution. Suppose you want to attach your MyAppliedDiscount table to apply a discount for one or more order items.\n\nAdd the type and input declarations for the MyAppliedDiscount table to the GraphQL schema.\n\nAdd metadata entries in the Parameter Store for the MyAppliedDiscount table.\n\nThis is a sample table qualifier generated for an external ID based on the id field of the MyOrder table.\n\nThis is a sample table qualifier generated for an external ID based on the id field of the MyOrderItem table.\n\nThis is a sample table qualifier generated for an external ID based on the id field of the MyProduct table.\n\nThis is a sample table qualifier for a virtual external ID defined using the values formula.', 3)
('Named Credential API Links\n\nYou can create named credentials through the UI or programmatically. Follow these links to programmatically create and manage named credentials and external credentials.\n\nNamedCredentials Class | Apex Reference Guide\n\nCreate, get, update, and delete credentials. Get external credentials. Get the URL for the OAuth token flow for an external credential.\n\nConnectApi.NamedCredential | Apex Reference Guide\n\nNamed credential associated with an external credential.\n\nNamed Credentials Resources | Connect REST API Developer Guide\n\nGet, create, refresh, replace, update, and delete a credential. Get the URL for the OAuth token flow for an external credential. Get, create, update, and delete external credentials. Get, create, update, and delete named credentials.\n\nMetadata API, Tooling API, and Object Reference:\n\nNamedCredential | Metadata API\n\nNamedCredential | Tooling API\n\nNamedCredential | Object Reference\n\nRepresents a named credential, which specifies the URL of a callout endpoint and its required authentication parameters in one definition. A named credential can be specified as an endpoint to simplify the setup of authenticated callouts.\n\nAvailable in the Metadata API and the Object Reference in API version 33.0 and later. Available in the Tooling API in API version 51.0 and later.\n\nConnectApi.ExternalCredential | Apex Reference Guide\n\nExternal credential, including the named credentials and principals associated with it and the type and status of each principal.\n\nConnectApi.ExternalCredentialParameter | Apex Reference Guide\n\nExternal credential parameters.\n\nMetadata API and Tooling API:\n\nExternalCredential | Metadata API\nExternalCredential | Tooling API\n\nRepresents the details of how Salesforce authenticates to the external system.\n\nAvailable in the Metadata API and the Tooling API in API version 56.0 and later.', 3)
('Create Lightning Web Components\n\nA Lightning web component is a reusable custom HTML element with its own API.\n\nCheck out these sections to learn more about creating your own Lightning web components.\n\nDefine a Component\nHTML Templates\nCSS\nComposition\nFields, Properties, and Attributes\nJavascript\nAccess Salesforce Resources\nComponent Accessibility\nLifecycle Hooks', 2)
('Component Configuration File\n\nEvery component must have a configuration file. The configuration file defines the metadata values for the component, including supported targets and the design configuration for Lightning App Builder and Experience Builder.\n\nThe configuration file follows the naming convention componentName.js-meta.xml, such as myComponent.js-meta.xml.\n\nInclude the configuration file in your component’s project folder, and push it to your org along with the other component files.\n\nHere’s the simplest configuration file.\n\nFor the complete list of elements in the configuration file, see XML Configuration File Elements.\n\nIf you don’t include a configuration file for your component, you get an error similar to the following when you push your changes.\n\nCannot find Lightning Component Bundle <component_name>\n\n\nSee Also\n\nConfigure a Component for Lightning App Builder\nConfigure a Component for Experience Builder\nXML Configuration File Elements', 2)
('HTML Templates\n\nThe power of Lightning Web Components is the templating system, which uses the virtual DOM to render components smartly and efficiently. It’s a best practice to let LWC manipulate the DOM instead of writing JavaScript to do it.\n\nUse a <template> root tag in your HTML template. You can also use nested <template> tags to work with directives.\n\nSee Also\n\nLifecycle Hooks', 2)
('Communicate Across the DOM\n\nThere are two ways to communicate between components that aren’t in the same DOM tree. Use Lightning message service (lightning/messageService), or use a singleton library that follows the publish-subscribe pattern.\n\nTo communicate between components within a single Lightning page or across multiple pages, use Lightning message service to communicate over a Lightning message channel. The advantage over pubsub is that message channels aren’t restricted to a single page. Any component in a Lightning Experience application that listens for events on a message channel updates when it receives a message. It works between Lightning web components, Aura components, and Visualforce pages in any tab or in any pop-out window in Lightning Experience. It also works across namespaces. For more information, see Communicate Across the DOM with Lightning Message Service.\n\nIn containers that don’t support Lightning Messaging Service, use the pubsub module. Download the module from github.com/developerforce/pubsub.\n\nIn a publish-subscribe pattern, one component publishes an event. Other components subscribe to receive and handle the event. Every component that subscribes to the event receives the event. The pubsub module restricts events to a single page.', 2)
("Use the Wire Service to Get Data\n\nTo read Salesforce data, Lightning web components use a reactive wire service. Use @wire in a component’s JavaScript class to specify a Lightning Data Service (LDS) wire adapter. The wire adapter defines the data shape that the wire service provisions in an immutable stream.\n\nThe LDS wire adapters are built on User Interface API or Connect API resources. Each wire adapter provides different Salesforce data and metadata, from individual records and lists of records, to object and layout schema. For example, the lightning/uiRecordApi module provides wire adapters to get record data or get default data that's needed to create a record. See the Reference section for supported wire adapters.\n\nBefore you use a wire adapter, make sure that there isn’t an easier way to get the data. To view, edit, or create records using a form-based interface, consider the lightning-record*form components.\n\nTo improve performance, always use the wire adapter that returns the least amount data that your use case requires. For example, getRecord returns record data, while getObjectInfo returns metadata for an object and its fields. To see the data a wire adapter returns, see the Returns section for each wire adapter in lightning/ui*Api Wire Adapters and Functions.\n\nSee Also\n\nlightning/ui*Api Wire Adapters and Functions", 2)
('Lightning Web Security\n\nLightning Web Security is designed to make it easier for your components to use secure coding practices. Lightning Locker has been the default security architecture for all Lightning components. Lightning Web Security (LWS) is replacing Lightning Locker for Lightning components. LWS for Lightning web components and Aura components is generally available.\n\nLightning Web Security is modeled after the latest TC39 standards to provide innovative usable security for any UI component. This approach enables teams to safely use code from third parties without fear of threats such as cross-site scripting (XSS) attacks. The result is a more secure way to control the execution of code within the UI layer without forcing developers to jump through hoops or abandon desired functionality.\n\nThe good news is that this technology doesn’t require refactoring of your LWC code because your code already abides by the security practices required by Lightning Locker. Most existing Lightning web components just work in this new architecture.\n\nEven better news is you have the option to refactor your code to let your components take advantage of the new freedoms that this technology enables. Your components run in an isolated JavaScript environment dedicated to your namespace, but they can import components and modules from other namespaces as if they’re all running in the same environment. The namespace isolation is transparent to the components because the architecture takes care of it seamlessly for you. As a result, some of the restrictions that your components observe when running in Lightning Locker aren’t necessary in Lightning Web Security.\n\nWe call these isolated environments JavaScript sandboxes. Each namespace has a dedicated JavaScript sandbox. The architecture manages the virtual interaction of components that are running in different JavaScript sandboxes.\n\nSee Also\n\nSalesforce Developers Blog: What ISV Partners Need to Know About Lightning Web Security', 2)
('Configure Components for Custom Tabs\n\nTo use a Lightning web component as a custom tab in Lightning Experience or in the Salesforce mobile app, add the tab target in the component’s configuration file.\n\nThe componentName.js-meta.xml file defines the metadata values for the component, including the setting to allow usage in a custom tab. Add the lightning__Tab target to the component’s configuration file.\n\nAfter you configure the tab target, add your Lightning web component as a custom tab in Lightning Experience or the Salesforce mobile app.', 2)
("Add Query Parameters\n\nTo add query parameters to the URL, update the PageReference.state property. The navigation service uses a PageReference to generate a URL. The key-value pairs of the state property are serialized to URL query parameters. The query parameters describe the page and form a more specific URL that the user can save or bookmark.\n\nKeep these behaviors in mind when working with the state property.\n\nThe PageReference object is frozen, so you can’t change it directly. To navigate to the same page with a modified state, copy the current PageReference and modify the copy using Object.assign({}, pageReference).\nstate properties must use a namespace prefix followed by two underscores, __. If the component isn’t part of a managed package, use c for the namespace prefix. If the component is part of a managed package, use the package's namespace.\nSince the key-value pairs of PageReference.state are serialized to URL query parameters, all the values must be strings.\nCode that consumes a value from state must parse the value into its proper format.\nTo delete a value from the state object, set it as undefined.\nEven when using HTTPS, including personal data for URL parameters isn’t safe. See Storing Sensitive Data for details.\nIn Lightning Experience and Experience Builder sites that are built with Aura or LWR templates, the view isn’t rerendered when only the URL query string changes. To react to a change in the URL query string, we recommend that components observe the CurrentPageReference object and compare against the page reference's state.\n\nThe component in this example has a link labeled Show Panel that changes to Hide Panel when clicked. Clicking either link updates the current page's state. When the page state changes, the this.currentPageReference property, decorated with @wire(CurrentPageReference), updates. The component rerenders to show or hide the panel and update the link label.", 2)
('Create Components for the Pardot Email Content Builder\n\nCustom components in the email content builder allow marketers and managers to create more engaging email content for their customers.', 2)
('Test Lightning Web Components\n\nJest is a powerful tool with rich features for writing JavaScript tests. Use Jest to write unit tests for all of your Lightning web components.\n\nRun Jest tests at the command line or (with some configuration) within your IDE. Jest tests don’t run in a browser or connect to an org, so they run fast. When run in “watch mode” they give you immediate feedback while you’re coding. Jest tests work only with Lightning web components, they don’t work with Aura components.\n\nWrite Jest tests to:\n\nTest a component in isolation\nTest a component’s public API (@api properties and methods, events)\nTest basic user interaction (clicks)\nVerify the DOM output of a component\nVerify that events fire when expected\n\nThe lwc-recipes repo is filled with Jest tests. Look for Jest tests in the __tests__ folders within the Lightning web components in force-app/main/default/lwc.\n\nSee Also\n\nJest: Delightful JavaScript Testing\nLightning Aura Components Developer Guide: Testing Components with Lightning Testing Service', 2)
('Lightning Web コンポーネントの使用開始\n\nLightning Web コンポーネント (LWC) フレームワークは、Salesforce プラットフォーム上にカスタムユーザインターフェース、Web およびモバイルアプリケーション、デジタルエクスペリエンスを作成するために使用します。Lightning Web コンポーネントは、HTML と JavaScript を使用して作成されたカスタム HTML 要素です。\n\n必要なエディション\n使用可能なインターフェース: Lightning Experience\n使用可能なエディション: Enterprise Edition、Performance Edition、Unlimited Edition、および Developer Edition\n\nSalesforce は、Lightning Design System で作成された Lightning Web 基本コンポーネントを提供しており、カスタムエクスペリエンスのビルディングブロックとして使用できます。Lightning Web 基本コンポーネントを使用することで、コンポーネントのデザインを統一でき、シンプルな開発環境を構築できます。Salesforce Lightning Experience は、Lightning Design System と Lightning 基本コンポーネントによって構築されています。\n\nまずは、自分に合ったレベルを選択してください。\n\nコーディングの開始: 最初のコンポーネントの作成\n開発環境の設定\nTrailhead とサンプルコードの探索\nSalesforce データの操作の理解\nSalesforce 機能のカスタマイズの理解\n\nLightning Web Components は、コア Web コンポーネント標準を使用し、Salesforce でサポート対象のブラウザで適切に動作するために必要な機能のみを提供します。Lightning Web Components は、ブラウザでネイティブに実行されるコード上に構築されるため、軽量で卓越したパフォーマンスを発揮します。記述するコードの大部分は、標準の JavaScript および HTML です。\n\nSalesforce は、World Wide Web Consortium (W3C) のメンバーとして、オープンな Web 標準の開発に寄与しています。Salesforce 開発者は、JavaScript を進化させる委員会である Ecma International Technical Committee 39 (TC39) にメンバーとして貢献しています。\n\nまた、Lightning Web コンポーネントもオープン-ソースです。\n\nLightning Web Components と Aura Components (元のモデル) の 2 つのプログラミングモデルを使用して、Lightning コンポーネントを作成できます。Lightning Web コンポーネントと Aura コンポーネントは 1 つのページで共存および相互運用できます。どちらも Lightning コンポーネントとしてシステム管理者やエンドユーザに表示されます。\n\nLightning 基本コンポーネントは Lightning Web コンポーネントおよび Aura コンポーネントとして利用できます。コンポーネントの参照には、両方のコンポーネントのドキュメント、仕様、そして例が用意されています。両者の違いについては、「基本コンポーネント: Aura コンポーネントと Lightning Web コンポーネント」を参照してください。\n\nLWC と Aura のいずれかを選択する場合は、LWC を選択してください。「Lightning Web Components または Aura の選択方法」を参照してください。', 2)
("Get Started with Data Cloud Connect API\n\nSalesforce Data Cloud Connect REST API creates business value by organizing and simplifying interactions with Data Cloud services. It's the preferred platform for customers to construct solutions on top of Data Cloud, offering uniform implementation and testing practices.\n\nUse the Data Cloud Connect REST API Postman collection to try out Data Cloud Connect REST API resources with your own variables.\n\nThe Data Cloud Connect REST API Postman collection is provided as-is. It's not officially supported by Salesforce or covered by SLAs.\n\nThe Connect REST API Developer Guide contains additional information about how to get started using Connect API.", 2)
('Get the latest Salesforce Developer blog posts and podcast episodes via Slack or RSS.\nAdd to Slack\nSubscribe to RSS', 7)
('Skip to Navigation\nSkip to Main Content\nComponent Reference\nDeveloper Guide\nLWS Console\nLWS Distortion Viewer\nLocker Console\nLocker API Viewer', 4)
